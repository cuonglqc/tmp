{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2025-04-13T16:04:04.378Z",
        "id": "page_2",
        "title": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
        "pageTimings": {
          "onContentLoad": 972.2809999948367,
          "onLoad": 993.2469999766909
        }
      }
    ],
    "entries": [
      {
        "_connectionId": "321315",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "19",
                "url": "http://186.186.0.1/static/js/main.226b3d06.js",
                "lineNumber": 1,
                "columnNumber": 336882
              },
              {
                "functionName": "as",
                "scriptId": "19",
                "url": "http://186.186.0.1/static/js/main.226b3d06.js",
                "lineNumber": 1,
                "columnNumber": 100690
              },
              {
                "functionName": "ku",
                "scriptId": "19",
                "url": "http://186.186.0.1/static/js/main.226b3d06.js",
                "lineNumber": 1,
                "columnNumber": 120917
              },
              {
                "functionName": "",
                "scriptId": "19",
                "url": "http://186.186.0.1/static/js/main.226b3d06.js",
                "lineNumber": 1,
                "columnNumber": 117507
              },
              {
                "functionName": "S",
                "scriptId": "19",
                "url": "http://186.186.0.1/static/js/main.226b3d06.js",
                "lineNumber": 1,
                "columnNumber": 145487
              },
              {
                "functionName": "P",
                "scriptId": "19",
                "url": "http://186.186.0.1/static/js/main.226b3d06.js",
                "lineNumber": 1,
                "columnNumber": 146021
              }
            ],
            "parentId": {
              "id": "15",
              "debuggerId": "2770852815322759297.6271785377889017863"
            }
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,vi;q=0.8"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Host",
              "value": "v1.awingconnect.vn"
            },
            {
              "name": "Referer",
              "value": "http://186.186.0.1/"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            }
          ],
          "queryString": [
            {
              "name": "serial",
              "value": "CC:2D:E0:0E:00:0A"
            },
            {
              "name": "client_mac",
              "value": "26:17:2E:AE:22:79"
            },
            {
              "name": "client_ip",
              "value": "186.186.31.234"
            },
            {
              "name": "userurl",
              "value": ""
            },
            {
              "name": "login_url",
              "value": "http://186.186.0.1/login"
            },
            {
              "name": "chap_id",
              "value": "\\170"
            },
            {
              "name": "chap_challenge",
              "value": "\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "cookies": [],
          "headersSize": 720,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-type",
              "value": "text/html; charset=utf-8"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 16:04:03 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 6944,
            "mimeType": "text/html",
            "compression": 4133,
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1,user-scalable=0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta http-equiv=\"cache-control\" content=\"max-age=0\" />\n    <meta http-equiv=\"cache-control\" content=\"no-cache\" />\n    <meta http-equiv=\"expires\" content=\"0\" />\n    <meta http-equiv=\"expires\" content=\"Tue, 01 Jan 1980 1:00:00 GMT\" />\n    <meta http-equiv=\"pragma\" content=\"no-cache\" />\n    <title>Free Wi-Fi | AWING</title>\n    <link rel=\"stylesheet\" href=\"/lib/bootstrap/dist/css/bootstrap.min.css?v=PI8n5gCcz9cQqQXm3PEtDuPG8qx9oFsFctPg0S5zb8g&amp;v=PI8n5gCcz9cQqQXm3PEtDuPG8qx9oFsFctPg0S5zb8g\" />\n    <script src=\"/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&amp;v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo\"></script>\n    \n    \n        <link rel=\"stylesheet\" href=\"/captive/awing-captive.min.css?v=RHHiZObHJAL977bXI4UD3x5f7eg\" />\n        <script src=\"/captive/awing-captive-utils.min.js?v=wJF_5VXM8kyhQ_3MOpNLGrclOLI\"></script>\n        <script>\n            if (awingCaptiveUtils.isBlockBrowser()) {\n                window.location.href = window.location.origin + \"/State/UnsupportedBrowser\";\n            }\n        </script>\n        <script src=\"/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y\"></script>\n    \n    <script src=\"/lib/bootstrap/dist/js/bootstrap.es5.bundle.min.js?v=FS00swd1d1eP0jSsk4dJUDRNMIJ7uEXKNzujgruz9yI&amp;v=FS00swd1d1eP0jSsk4dJUDRNMIJ7uEXKNzujgruz9yI\"></script>\n</head>\n<body style=\"background-color: whitesmoke;\">\n    <header b-6hwrygmmwk style=\"background-color: white; height: 60px; display: none;\">\n    </header>\n    <main b-6hwrygmmwk role=\"main\">\n        <div b-6hwrygmmwk id=\"awing-captive__container\">\n            \n<div b-ac3khziyh2 id=\"awing-captive__login-loading\" style=\"display: none\">\n    <div b-ac3khziyh2 class='loading-header'>\n        <span b-ac3khziyh2>\n            Powered by <b b-ac3khziyh2>AWING</b>\n        </span>\n    </div>\n    <div b-ac3khziyh2 class=\"progress\">\n        <div b-ac3khziyh2 class=\"progress-bar\" role=\"progressbar\" style=\"width: 0%;\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n    </div>\n</div>\n<script>\n    $('#awing-captive__login-loading .progress .progress-bar').on(\"animationend\",\n        function() {\n            awingStateMachineContextActions.completeEvent(awingConstants.EVENT_MESSAGE.LOADING_ANIMATION_LOGIN_COMPLETE);\n        }\n    );\n</script><div id=\"awing-captive__htmlcommon\">\n    <!-- Hiển thị htmlcommon của trang login -->\n</div>\n<div id=\"awing-captive__htmlscreen\">\n    <!-- Hiển thị nội dung view của trang login -->\n</div>\n<div b-t6yo2uaw4d id=\"awing-captive__welcome-loading\" style=\"display: none\">\n    <div b-t6yo2uaw4d class='loading-header'>\n        <span b-t6yo2uaw4d id=\"awing-captive__welcome-counter\" class='number'>0</span><sub b-t6yo2uaw4d class='unit'>%</sub>\n        <div b-t6yo2uaw4d class='linear-activity'>\n            <div b-t6yo2uaw4d class='determinate loading-lp' style='width: 0%'></div>\n        </div>\n    </div>\n    <p b-t6yo2uaw4d id='loading-message' class='loading-message' style=\"margin-bottom: 0\">\n        <b b-t6yo2uaw4d data-translate=\"Common.Connecting\">Đang kết nối Internet...</b>\n    </p>\n    <p b-t6yo2uaw4d>\n        <i b-t6yo2uaw4d style='font-style: normal;font-weight:normal'>Connecting…</i>\n    </p>\n    <div b-t6yo2uaw4d id='loading-contact-container'></div>\n</div>\n<script type=\"text/javascript\">\n    // window.scroll(0, 0);\n    // $('body').css('min-height', 'auto');\n        let counter = parseInt(awingCaptiveUtils.getCookie(\"loadingIndex\") || \"0\");\n\n        let $num = $('#awing-captive__welcome-counter');\n        let awingcaptive__loadingInterval = setInterval(function () {\n            if (counter >= 99) {\n                clearInterval(awingcaptive__loadingInterval);\n            }\n            else {\n                counter++;\n                $num.html(counter);\n                $(\".determinate\").css(\"width\", counter + \"%\");\n                awingCaptiveUtils.setCookie(\"loadingIndex\", counter, 10);\n            }\n        }, 100);\n   \n</script>\n\n        </div>\n<div b-z327fgq9jt id=\"awing-captive__continue-scroll\" class=\"awing-captive__continue-scroll\" style=\"display: none;\">\n    <svg b-z327fgq9jt version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 300 300\" style=\"enable-background:new 0 0 300 300;\" xml:space=\"preserve\">\n    <path b-z327fgq9jt class=\"st0\" d=\"M156.8,207.6l127.5-104.2c3.5-2.9,3.5-7.6,0-10.5c-3.5-2.9-9.4-2.9-12.9,0l-121.1,99l-121-99 c-3.5-2.9-9.4-2.9-12.9,0c-1.8,1.5-2.7,3.4-2.7,5.3s0.9,3.8,2.7,5.3l127.5,104.2C147.5,210.6,153.3,210.6,156.8,207.6z\" />\n      </svg>\n</div>\n<script>\n    document.addEventListener(\"DOMContentLoaded\", function () {\n        let scrollElement = document.getElementById('awing-captive__continue-scroll');\n        // Tạo một Intersection Observer\n        let observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    // Phần tử bắt đầu xuất hiện trong viewport\n                    console.log('Continue hide!');\n                    scrollElement.style.display = 'none';\n                } else {\n                    // Phần tử đã biến mất khỏi viewport\n                    console.log('Continue show!');\n                    scrollElement.style.display = 'block';\n                }\n            });\n        });\n\n        // Chọn phần tử cần theo dõi\n        let targetElement = document.getElementById('awing-section-to-observe');\n\n        // Bắt đầu quan sát\n        observer.observe(targetElement);\n    });\n</script>    </main>\n    <div b-6hwrygmmwk id=\"awing-section-to-agreement\"></div>\n    <div b-6hwrygmmwk id=\"awing-section-to-observe\"></div>\n    <footer b-6hwrygmmwk class=\"border-top footer\" style=\"display: none;\">\n        <div b-6hwrygmmwk style=\"padding: 0 2%; line-height: revert;\" class=\"d-flex justify-content-between\">\n            <div b-6hwrygmmwk>\n                <div b-6hwrygmmwk style=\"float:left;\">\n                </div>\n                <div b-6hwrygmmwk>\n                    <b b-6hwrygmmwk>Advertising:</b> contact@awing.vn\n                </div>\n                <div b-6hwrygmmwk>\n                </div>\n            </div>\n            <div b-6hwrygmmwk>\n                <b b-6hwrygmmwk style=\"float:right;text-align:right;\">Powered by AWING</b>\n            </div>\n        </div>\n    </footer>\n    \n    <script type=\"text/javascript\">\n        awingUIActions.setInitialLanguage('vie');\n        var awingStateMachineContext = new CaptiveContext({\"isRescue\":false,\"useHttps\":false}, null);\n        var awingStateMachine = startStateMachine(awingStateMachineContext);\n    </script>\n\n</body>\n</html>\n"
          },
          "redirectURL": "",
          "headersSize": 188,
          "bodySize": 2811,
          "_transferSize": 2999,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:04.371Z",
        "time": 108.76300004171952,
        "timings": {
          "blocked": 34.15600004104897,
          "dns": 0.01699999999999946,
          "ssl": -1,
          "connect": 6.041,
          "send": 0.6169999999999973,
          "wait": 66.37199999642372,
          "receive": 1.560000004246831,
          "_blocked_queueing": 6.526000041048974,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
          "lineNumber": 12
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/lib/bootstrap/dist/css/bootstrap.min.css?v=PI8n5gCcz9cQqQXm3PEtDuPG8qx9oFsFctPg0S5zb8g&v=PI8n5gCcz9cQqQXm3PEtDuPG8qx9oFsFctPg0S5zb8g",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "PI8n5gCcz9cQqQXm3PEtDuPG8qx9oFsFctPg0S5zb8g"
            },
            {
              "name": "v",
              "value": "PI8n5gCcz9cQqQXm3PEtDuPG8qx9oFsFctPg0S5zb8g"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "cache-control",
              "value": "public,max-age=604800"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "etag",
              "value": "\"1dad33bfc4b12e3\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 13:19:44 GMT"
            },
            {
              "name": "content-type",
              "value": "text/css"
            },
            {
              "name": "last-modified",
              "value": "Thu, 11 Jul 2024 02:42:35 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 232803,
            "mimeType": "text/css",
            "text": "@charset \"UTF-8\";/*!\n * Bootstrap  v5.3.3 (https://getbootstrap.com/)\n * Copyright 2011-2024 The Bootstrap Authors\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n */:root,[data-bs-theme=light]{--bs-blue:#0d6efd;--bs-indigo:#6610f2;--bs-purple:#6f42c1;--bs-pink:#d63384;--bs-red:#dc3545;--bs-orange:#fd7e14;--bs-yellow:#ffc107;--bs-green:#198754;--bs-teal:#20c997;--bs-cyan:#0dcaf0;--bs-black:#000;--bs-white:#fff;--bs-gray:#6c757d;--bs-gray-dark:#343a40;--bs-gray-100:#f8f9fa;--bs-gray-200:#e9ecef;--bs-gray-300:#dee2e6;--bs-gray-400:#ced4da;--bs-gray-500:#adb5bd;--bs-gray-600:#6c757d;--bs-gray-700:#495057;--bs-gray-800:#343a40;--bs-gray-900:#212529;--bs-primary:#0d6efd;--bs-secondary:#6c757d;--bs-success:#198754;--bs-info:#0dcaf0;--bs-warning:#ffc107;--bs-danger:#dc3545;--bs-light:#f8f9fa;--bs-dark:#212529;--bs-primary-rgb:13,110,253;--bs-secondary-rgb:108,117,125;--bs-success-rgb:25,135,84;--bs-info-rgb:13,202,240;--bs-warning-rgb:255,193,7;--bs-danger-rgb:220,53,69;--bs-light-rgb:248,249,250;--bs-dark-rgb:33,37,41;--bs-primary-text-emphasis:#052c65;--bs-secondary-text-emphasis:#2b2f32;--bs-success-text-emphasis:#0a3622;--bs-info-text-emphasis:#055160;--bs-warning-text-emphasis:#664d03;--bs-danger-text-emphasis:#58151c;--bs-light-text-emphasis:#495057;--bs-dark-text-emphasis:#495057;--bs-primary-bg-subtle:#cfe2ff;--bs-secondary-bg-subtle:#e2e3e5;--bs-success-bg-subtle:#d1e7dd;--bs-info-bg-subtle:#cff4fc;--bs-warning-bg-subtle:#fff3cd;--bs-danger-bg-subtle:#f8d7da;--bs-light-bg-subtle:#fcfcfd;--bs-dark-bg-subtle:#ced4da;--bs-primary-border-subtle:#9ec5fe;--bs-secondary-border-subtle:#c4c8cb;--bs-success-border-subtle:#a3cfbb;--bs-info-border-subtle:#9eeaf9;--bs-warning-border-subtle:#ffe69c;--bs-danger-border-subtle:#f1aeb5;--bs-light-border-subtle:#e9ecef;--bs-dark-border-subtle:#adb5bd;--bs-white-rgb:255,255,255;--bs-black-rgb:0,0,0;--bs-font-sans-serif:system-ui,-apple-system,\"Segoe UI\",Roboto,\"Helvetica Neue\",\"Noto Sans\",\"Liberation Sans\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--bs-font-monospace:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--bs-gradient:linear-gradient(180deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));--bs-body-font-family:var(--bs-font-sans-serif);--bs-body-font-size:1rem;--bs-body-font-weight:400;--bs-body-line-height:1.5;--bs-body-color:#212529;--bs-body-color-rgb:33,37,41;--bs-body-bg:#fff;--bs-body-bg-rgb:255,255,255;--bs-emphasis-color:#000;--bs-emphasis-color-rgb:0,0,0;--bs-secondary-color:rgba(33, 37, 41, 0.75);--bs-secondary-color-rgb:33,37,41;--bs-secondary-bg:#e9ecef;--bs-secondary-bg-rgb:233,236,239;--bs-tertiary-color:rgba(33, 37, 41, 0.5);--bs-tertiary-color-rgb:33,37,41;--bs-tertiary-bg:#f8f9fa;--bs-tertiary-bg-rgb:248,249,250;--bs-heading-color:inherit;--bs-link-color:#0d6efd;--bs-link-color-rgb:13,110,253;--bs-link-decoration:underline;--bs-link-hover-color:#0a58ca;--bs-link-hover-color-rgb:10,88,202;--bs-code-color:#d63384;--bs-highlight-color:#212529;--bs-highlight-bg:#fff3cd;--bs-border-width:1px;--bs-border-style:solid;--bs-border-color:#dee2e6;--bs-border-color-translucent:rgba(0, 0, 0, 0.175);--bs-border-radius:0.375rem;--bs-border-radius-sm:0.25rem;--bs-border-radius-lg:0.5rem;--bs-border-radius-xl:1rem;--bs-border-radius-xxl:2rem;--bs-border-radius-2xl:var(--bs-border-radius-xxl);--bs-border-radius-pill:50rem;--bs-box-shadow:0 0.5rem 1rem rgba(0, 0, 0, 0.15);--bs-box-shadow-sm:0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);--bs-box-shadow-lg:0 1rem 3rem rgba(0, 0, 0, 0.175);--bs-box-shadow-inset:inset 0 1px 2px rgba(0, 0, 0, 0.075);--bs-focus-ring-width:0.25rem;--bs-focus-ring-opacity:0.25;--bs-focus-ring-color:rgba(13, 110, 253, 0.25);--bs-form-valid-color:#198754;--bs-form-valid-border-color:#198754;--bs-form-invalid-color:#dc3545;--bs-form-invalid-border-color:#dc3545}[data-bs-theme=dark]{color-scheme:dark;--bs-body-color:#dee2e6;--bs-body-color-rgb:222,226,230;--bs-body-bg:#212529;--bs-body-bg-rgb:33,37,41;--bs-emphasis-color:#fff;--bs-emphasis-color-rgb:255,255,255;--bs-secondary-color:rgba(222, 226, 230, 0.75);--bs-secondary-color-rgb:222,226,230;--bs-secondary-bg:#343a40;--bs-secondary-bg-rgb:52,58,64;--bs-tertiary-color:rgba(222, 226, 230, 0.5);--bs-tertiary-color-rgb:222,226,230;--bs-tertiary-bg:#2b3035;--bs-tertiary-bg-rgb:43,48,53;--bs-primary-text-emphasis:#6ea8fe;--bs-secondary-text-emphasis:#a7acb1;--bs-success-text-emphasis:#75b798;--bs-info-text-emphasis:#6edff6;--bs-warning-text-emphasis:#ffda6a;--bs-danger-text-emphasis:#ea868f;--bs-light-text-emphasis:#f8f9fa;--bs-dark-text-emphasis:#dee2e6;--bs-primary-bg-subtle:#031633;--bs-secondary-bg-subtle:#161719;--bs-success-bg-subtle:#051b11;--bs-info-bg-subtle:#032830;--bs-warning-bg-subtle:#332701;--bs-danger-bg-subtle:#2c0b0e;--bs-light-bg-subtle:#343a40;--bs-dark-bg-subtle:#1a1d20;--bs-primary-border-subtle:#084298;--bs-secondary-border-subtle:#41464b;--bs-success-border-subtle:#0f5132;--bs-info-border-subtle:#087990;--bs-warning-border-subtle:#997404;--bs-danger-border-subtle:#842029;--bs-light-border-subtle:#495057;--bs-dark-border-subtle:#343a40;--bs-heading-color:inherit;--bs-link-color:#6ea8fe;--bs-link-hover-color:#8bb9fe;--bs-link-color-rgb:110,168,254;--bs-link-hover-color-rgb:139,185,254;--bs-code-color:#e685b5;--bs-highlight-color:#dee2e6;--bs-highlight-bg:#664d03;--bs-border-color:#495057;--bs-border-color-translucent:rgba(255, 255, 255, 0.15);--bs-form-valid-color:#75b798;--bs-form-valid-border-color:#75b798;--bs-form-invalid-color:#ea868f;--bs-form-invalid-border-color:#ea868f}*,::after,::before{box-sizing:border-box}@media (prefers-reduced-motion:no-preference){:root{scroll-behavior:smooth}}body{margin:0;font-family:var(--bs-body-font-family);font-size:var(--bs-body-font-size);font-weight:var(--bs-body-font-weight);line-height:var(--bs-body-line-height);color:var(--bs-body-color);text-align:var(--bs-body-text-align);background-color:var(--bs-body-bg);-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:transparent}hr{margin:1rem 0;color:inherit;border:0;border-top:var(--bs-border-width) solid;opacity:.25}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem;font-weight:500;line-height:1.2;color:var(--bs-heading-color)}.h1,h1{font-size:calc(1.375rem + 1.5vw)}@media (min-width:1200px){.h1,h1{font-size:2.5rem}}.h2,h2{font-size:calc(1.325rem + .9vw)}@media (min-width:1200px){.h2,h2{font-size:2rem}}.h3,h3{font-size:calc(1.3rem + .6vw)}@media (min-width:1200px){.h3,h3{font-size:1.75rem}}.h4,h4{font-size:calc(1.275rem + .3vw)}@media (min-width:1200px){.h4,h4{font-size:1.5rem}}.h5,h5{font-size:1.25rem}.h6,h6{font-size:1rem}p{margin-top:0;margin-bottom:1rem}abbr[title]{-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;-webkit-text-decoration-skip-ink:none;text-decoration-skip-ink:none}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul{padding-left:2rem}dl,ol,ul{margin-top:0;margin-bottom:1rem}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}.small,small{font-size:.875em}.mark,mark{padding:.1875em;color:var(--bs-highlight-color);background-color:var(--bs-highlight-bg)}sub,sup{position:relative;font-size:.75em;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:rgba(var(--bs-link-color-rgb),var(--bs-link-opacity,1));text-decoration:underline}a:hover{--bs-link-color-rgb:var(--bs-link-hover-color-rgb)}a:not([href]):not([class]),a:not([href]):not([class]):hover{color:inherit;text-decoration:none}code,kbd,pre,samp{font-family:var(--bs-font-monospace);font-size:1em}pre{display:block;margin-top:0;margin-bottom:1rem;overflow:auto;font-size:.875em}pre code{font-size:inherit;color:inherit;word-break:normal}code{font-size:.875em;color:var(--bs-code-color);word-wrap:break-word}a>code{color:inherit}kbd{padding:.1875rem .375rem;font-size:.875em;color:var(--bs-body-bg);background-color:var(--bs-body-color);border-radius:.25rem}kbd kbd{padding:0;font-size:1em}figure{margin:0 0 1rem}img,svg{vertical-align:middle}table{caption-side:bottom;border-collapse:collapse}caption{padding-top:.5rem;padding-bottom:.5rem;color:var(--bs-secondary-color);text-align:left}th{text-align:inherit;text-align:-webkit-match-parent}tbody,td,tfoot,th,thead,tr{border-color:inherit;border-style:solid;border-width:0}label{display:inline-block}button{border-radius:0}button:focus:not(:focus-visible){outline:0}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,select{text-transform:none}[role=button]{cursor:pointer}select{word-wrap:normal}select:disabled{opacity:1}[list]:not([type=date]):not([type=datetime-local]):not([type=month]):not([type=week]):not([type=time])::-webkit-calendar-picker-indicator{display:none!important}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]:not(:disabled),[type=reset]:not(:disabled),[type=submit]:not(:disabled),button:not(:disabled){cursor:pointer}::-moz-focus-inner{padding:0;border-style:none}textarea{resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{float:left;width:100%;padding:0;margin-bottom:.5rem;font-size:calc(1.275rem + .3vw);line-height:inherit}@media (min-width:1200px){legend{font-size:1.5rem}}legend+*{clear:left}::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-fields-wrapper,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-minute,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-text,::-webkit-datetime-edit-year-field{padding:0}::-webkit-inner-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-color-swatch-wrapper{padding:0}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}::file-selector-button{font:inherit;-webkit-appearance:button}output{display:inline-block}iframe{border:0}summary{display:list-item;cursor:pointer}progress{vertical-align:baseline}[hidden]{display:none!important}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:calc(1.625rem + 4.5vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-1{font-size:5rem}}.display-2{font-size:calc(1.575rem + 3.9vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-2{font-size:4.5rem}}.display-3{font-size:calc(1.525rem + 3.3vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-3{font-size:4rem}}.display-4{font-size:calc(1.475rem + 2.7vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-4{font-size:3.5rem}}.display-5{font-size:calc(1.425rem + 2.1vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-5{font-size:3rem}}.display-6{font-size:calc(1.375rem + 1.5vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-6{font-size:2.5rem}}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:.875em;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.25rem}.blockquote>:last-child{margin-bottom:0}.blockquote-footer{margin-top:-1rem;margin-bottom:1rem;font-size:.875em;color:#6c757d}.blockquote-footer::before{content:\"— \"}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:var(--bs-body-bg);border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:.5rem;line-height:1}.figure-caption{font-size:.875em;color:var(--bs-secondary-color)}.container,.container-fluid,.container-lg,.container-md,.container-sm,.container-xl,.container-xxl{--bs-gutter-x:1.5rem;--bs-gutter-y:0;width:100%;padding-right:calc(var(--bs-gutter-x) * .5);padding-left:calc(var(--bs-gutter-x) * .5);margin-right:auto;margin-left:auto}@media (min-width:576px){.container,.container-sm{max-width:540px}}@media (min-width:768px){.container,.container-md,.container-sm{max-width:720px}}@media (min-width:992px){.container,.container-lg,.container-md,.container-sm{max-width:960px}}@media (min-width:1200px){.container,.container-lg,.container-md,.container-sm,.container-xl{max-width:1140px}}@media (min-width:1400px){.container,.container-lg,.container-md,.container-sm,.container-xl,.container-xxl{max-width:1320px}}:root{--bs-breakpoint-xs:0;--bs-breakpoint-sm:576px;--bs-breakpoint-md:768px;--bs-breakpoint-lg:992px;--bs-breakpoint-xl:1200px;--bs-breakpoint-xxl:1400px}.row{--bs-gutter-x:1.5rem;--bs-gutter-y:0;display:flex;flex-wrap:wrap;margin-top:calc(-1 * var(--bs-gutter-y));margin-right:calc(-.5 * var(--bs-gutter-x));margin-left:calc(-.5 * var(--bs-gutter-x))}.row>*{flex-shrink:0;width:100%;max-width:100%;padding-right:calc(var(--bs-gutter-x) * .5);padding-left:calc(var(--bs-gutter-x) * .5);margin-top:var(--bs-gutter-y)}.col{flex:1 0 0%}.row-cols-auto>*{flex:0 0 auto;width:auto}.row-cols-1>*{flex:0 0 auto;width:100%}.row-cols-2>*{flex:0 0 auto;width:50%}.row-cols-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-4>*{flex:0 0 auto;width:25%}.row-cols-5>*{flex:0 0 auto;width:20%}.row-cols-6>*{flex:0 0 auto;width:16.66666667%}.col-auto{flex:0 0 auto;width:auto}.col-1{flex:0 0 auto;width:8.33333333%}.col-2{flex:0 0 auto;width:16.66666667%}.col-3{flex:0 0 auto;width:25%}.col-4{flex:0 0 auto;width:33.33333333%}.col-5{flex:0 0 auto;width:41.66666667%}.col-6{flex:0 0 auto;width:50%}.col-7{flex:0 0 auto;width:58.33333333%}.col-8{flex:0 0 auto;width:66.66666667%}.col-9{flex:0 0 auto;width:75%}.col-10{flex:0 0 auto;width:83.33333333%}.col-11{flex:0 0 auto;width:91.66666667%}.col-12{flex:0 0 auto;width:100%}.offset-1{margin-left:8.33333333%}.offset-2{margin-left:16.66666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.33333333%}.offset-5{margin-left:41.66666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.33333333%}.offset-8{margin-left:66.66666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.33333333%}.offset-11{margin-left:91.66666667%}.g-0,.gx-0{--bs-gutter-x:0}.g-0,.gy-0{--bs-gutter-y:0}.g-1,.gx-1{--bs-gutter-x:0.25rem}.g-1,.gy-1{--bs-gutter-y:0.25rem}.g-2,.gx-2{--bs-gutter-x:0.5rem}.g-2,.gy-2{--bs-gutter-y:0.5rem}.g-3,.gx-3{--bs-gutter-x:1rem}.g-3,.gy-3{--bs-gutter-y:1rem}.g-4,.gx-4{--bs-gutter-x:1.5rem}.g-4,.gy-4{--bs-gutter-y:1.5rem}.g-5,.gx-5{--bs-gutter-x:3rem}.g-5,.gy-5{--bs-gutter-y:3rem}@media (min-width:576px){.col-sm{flex:1 0 0%}.row-cols-sm-auto>*{flex:0 0 auto;width:auto}.row-cols-sm-1>*{flex:0 0 auto;width:100%}.row-cols-sm-2>*{flex:0 0 auto;width:50%}.row-cols-sm-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-sm-4>*{flex:0 0 auto;width:25%}.row-cols-sm-5>*{flex:0 0 auto;width:20%}.row-cols-sm-6>*{flex:0 0 auto;width:16.66666667%}.col-sm-auto{flex:0 0 auto;width:auto}.col-sm-1{flex:0 0 auto;width:8.33333333%}.col-sm-2{flex:0 0 auto;width:16.66666667%}.col-sm-3{flex:0 0 auto;width:25%}.col-sm-4{flex:0 0 auto;width:33.33333333%}.col-sm-5{flex:0 0 auto;width:41.66666667%}.col-sm-6{flex:0 0 auto;width:50%}.col-sm-7{flex:0 0 auto;width:58.33333333%}.col-sm-8{flex:0 0 auto;width:66.66666667%}.col-sm-9{flex:0 0 auto;width:75%}.col-sm-10{flex:0 0 auto;width:83.33333333%}.col-sm-11{flex:0 0 auto;width:91.66666667%}.col-sm-12{flex:0 0 auto;width:100%}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.33333333%}.offset-sm-2{margin-left:16.66666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.33333333%}.offset-sm-5{margin-left:41.66666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.33333333%}.offset-sm-8{margin-left:66.66666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.33333333%}.offset-sm-11{margin-left:91.66666667%}.g-sm-0,.gx-sm-0{--bs-gutter-x:0}.g-sm-0,.gy-sm-0{--bs-gutter-y:0}.g-sm-1,.gx-sm-1{--bs-gutter-x:0.25rem}.g-sm-1,.gy-sm-1{--bs-gutter-y:0.25rem}.g-sm-2,.gx-sm-2{--bs-gutter-x:0.5rem}.g-sm-2,.gy-sm-2{--bs-gutter-y:0.5rem}.g-sm-3,.gx-sm-3{--bs-gutter-x:1rem}.g-sm-3,.gy-sm-3{--bs-gutter-y:1rem}.g-sm-4,.gx-sm-4{--bs-gutter-x:1.5rem}.g-sm-4,.gy-sm-4{--bs-gutter-y:1.5rem}.g-sm-5,.gx-sm-5{--bs-gutter-x:3rem}.g-sm-5,.gy-sm-5{--bs-gutter-y:3rem}}@media (min-width:768px){.col-md{flex:1 0 0%}.row-cols-md-auto>*{flex:0 0 auto;width:auto}.row-cols-md-1>*{flex:0 0 auto;width:100%}.row-cols-md-2>*{flex:0 0 auto;width:50%}.row-cols-md-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-md-4>*{flex:0 0 auto;width:25%}.row-cols-md-5>*{flex:0 0 auto;width:20%}.row-cols-md-6>*{flex:0 0 auto;width:16.66666667%}.col-md-auto{flex:0 0 auto;width:auto}.col-md-1{flex:0 0 auto;width:8.33333333%}.col-md-2{flex:0 0 auto;width:16.66666667%}.col-md-3{flex:0 0 auto;width:25%}.col-md-4{flex:0 0 auto;width:33.33333333%}.col-md-5{flex:0 0 auto;width:41.66666667%}.col-md-6{flex:0 0 auto;width:50%}.col-md-7{flex:0 0 auto;width:58.33333333%}.col-md-8{flex:0 0 auto;width:66.66666667%}.col-md-9{flex:0 0 auto;width:75%}.col-md-10{flex:0 0 auto;width:83.33333333%}.col-md-11{flex:0 0 auto;width:91.66666667%}.col-md-12{flex:0 0 auto;width:100%}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.33333333%}.offset-md-2{margin-left:16.66666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.33333333%}.offset-md-5{margin-left:41.66666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.33333333%}.offset-md-8{margin-left:66.66666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.33333333%}.offset-md-11{margin-left:91.66666667%}.g-md-0,.gx-md-0{--bs-gutter-x:0}.g-md-0,.gy-md-0{--bs-gutter-y:0}.g-md-1,.gx-md-1{--bs-gutter-x:0.25rem}.g-md-1,.gy-md-1{--bs-gutter-y:0.25rem}.g-md-2,.gx-md-2{--bs-gutter-x:0.5rem}.g-md-2,.gy-md-2{--bs-gutter-y:0.5rem}.g-md-3,.gx-md-3{--bs-gutter-x:1rem}.g-md-3,.gy-md-3{--bs-gutter-y:1rem}.g-md-4,.gx-md-4{--bs-gutter-x:1.5rem}.g-md-4,.gy-md-4{--bs-gutter-y:1.5rem}.g-md-5,.gx-md-5{--bs-gutter-x:3rem}.g-md-5,.gy-md-5{--bs-gutter-y:3rem}}@media (min-width:992px){.col-lg{flex:1 0 0%}.row-cols-lg-auto>*{flex:0 0 auto;width:auto}.row-cols-lg-1>*{flex:0 0 auto;width:100%}.row-cols-lg-2>*{flex:0 0 auto;width:50%}.row-cols-lg-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-lg-4>*{flex:0 0 auto;width:25%}.row-cols-lg-5>*{flex:0 0 auto;width:20%}.row-cols-lg-6>*{flex:0 0 auto;width:16.66666667%}.col-lg-auto{flex:0 0 auto;width:auto}.col-lg-1{flex:0 0 auto;width:8.33333333%}.col-lg-2{flex:0 0 auto;width:16.66666667%}.col-lg-3{flex:0 0 auto;width:25%}.col-lg-4{flex:0 0 auto;width:33.33333333%}.col-lg-5{flex:0 0 auto;width:41.66666667%}.col-lg-6{flex:0 0 auto;width:50%}.col-lg-7{flex:0 0 auto;width:58.33333333%}.col-lg-8{flex:0 0 auto;width:66.66666667%}.col-lg-9{flex:0 0 auto;width:75%}.col-lg-10{flex:0 0 auto;width:83.33333333%}.col-lg-11{flex:0 0 auto;width:91.66666667%}.col-lg-12{flex:0 0 auto;width:100%}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.33333333%}.offset-lg-2{margin-left:16.66666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.33333333%}.offset-lg-5{margin-left:41.66666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.33333333%}.offset-lg-8{margin-left:66.66666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.33333333%}.offset-lg-11{margin-left:91.66666667%}.g-lg-0,.gx-lg-0{--bs-gutter-x:0}.g-lg-0,.gy-lg-0{--bs-gutter-y:0}.g-lg-1,.gx-lg-1{--bs-gutter-x:0.25rem}.g-lg-1,.gy-lg-1{--bs-gutter-y:0.25rem}.g-lg-2,.gx-lg-2{--bs-gutter-x:0.5rem}.g-lg-2,.gy-lg-2{--bs-gutter-y:0.5rem}.g-lg-3,.gx-lg-3{--bs-gutter-x:1rem}.g-lg-3,.gy-lg-3{--bs-gutter-y:1rem}.g-lg-4,.gx-lg-4{--bs-gutter-x:1.5rem}.g-lg-4,.gy-lg-4{--bs-gutter-y:1.5rem}.g-lg-5,.gx-lg-5{--bs-gutter-x:3rem}.g-lg-5,.gy-lg-5{--bs-gutter-y:3rem}}@media (min-width:1200px){.col-xl{flex:1 0 0%}.row-cols-xl-auto>*{flex:0 0 auto;width:auto}.row-cols-xl-1>*{flex:0 0 auto;width:100%}.row-cols-xl-2>*{flex:0 0 auto;width:50%}.row-cols-xl-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-xl-4>*{flex:0 0 auto;width:25%}.row-cols-xl-5>*{flex:0 0 auto;width:20%}.row-cols-xl-6>*{flex:0 0 auto;width:16.66666667%}.col-xl-auto{flex:0 0 auto;width:auto}.col-xl-1{flex:0 0 auto;width:8.33333333%}.col-xl-2{flex:0 0 auto;width:16.66666667%}.col-xl-3{flex:0 0 auto;width:25%}.col-xl-4{flex:0 0 auto;width:33.33333333%}.col-xl-5{flex:0 0 auto;width:41.66666667%}.col-xl-6{flex:0 0 auto;width:50%}.col-xl-7{flex:0 0 auto;width:58.33333333%}.col-xl-8{flex:0 0 auto;width:66.66666667%}.col-xl-9{flex:0 0 auto;width:75%}.col-xl-10{flex:0 0 auto;width:83.33333333%}.col-xl-11{flex:0 0 auto;width:91.66666667%}.col-xl-12{flex:0 0 auto;width:100%}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.33333333%}.offset-xl-2{margin-left:16.66666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.33333333%}.offset-xl-5{margin-left:41.66666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.33333333%}.offset-xl-8{margin-left:66.66666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.33333333%}.offset-xl-11{margin-left:91.66666667%}.g-xl-0,.gx-xl-0{--bs-gutter-x:0}.g-xl-0,.gy-xl-0{--bs-gutter-y:0}.g-xl-1,.gx-xl-1{--bs-gutter-x:0.25rem}.g-xl-1,.gy-xl-1{--bs-gutter-y:0.25rem}.g-xl-2,.gx-xl-2{--bs-gutter-x:0.5rem}.g-xl-2,.gy-xl-2{--bs-gutter-y:0.5rem}.g-xl-3,.gx-xl-3{--bs-gutter-x:1rem}.g-xl-3,.gy-xl-3{--bs-gutter-y:1rem}.g-xl-4,.gx-xl-4{--bs-gutter-x:1.5rem}.g-xl-4,.gy-xl-4{--bs-gutter-y:1.5rem}.g-xl-5,.gx-xl-5{--bs-gutter-x:3rem}.g-xl-5,.gy-xl-5{--bs-gutter-y:3rem}}@media (min-width:1400px){.col-xxl{flex:1 0 0%}.row-cols-xxl-auto>*{flex:0 0 auto;width:auto}.row-cols-xxl-1>*{flex:0 0 auto;width:100%}.row-cols-xxl-2>*{flex:0 0 auto;width:50%}.row-cols-xxl-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-xxl-4>*{flex:0 0 auto;width:25%}.row-cols-xxl-5>*{flex:0 0 auto;width:20%}.row-cols-xxl-6>*{flex:0 0 auto;width:16.66666667%}.col-xxl-auto{flex:0 0 auto;width:auto}.col-xxl-1{flex:0 0 auto;width:8.33333333%}.col-xxl-2{flex:0 0 auto;width:16.66666667%}.col-xxl-3{flex:0 0 auto;width:25%}.col-xxl-4{flex:0 0 auto;width:33.33333333%}.col-xxl-5{flex:0 0 auto;width:41.66666667%}.col-xxl-6{flex:0 0 auto;width:50%}.col-xxl-7{flex:0 0 auto;width:58.33333333%}.col-xxl-8{flex:0 0 auto;width:66.66666667%}.col-xxl-9{flex:0 0 auto;width:75%}.col-xxl-10{flex:0 0 auto;width:83.33333333%}.col-xxl-11{flex:0 0 auto;width:91.66666667%}.col-xxl-12{flex:0 0 auto;width:100%}.offset-xxl-0{margin-left:0}.offset-xxl-1{margin-left:8.33333333%}.offset-xxl-2{margin-left:16.66666667%}.offset-xxl-3{margin-left:25%}.offset-xxl-4{margin-left:33.33333333%}.offset-xxl-5{margin-left:41.66666667%}.offset-xxl-6{margin-left:50%}.offset-xxl-7{margin-left:58.33333333%}.offset-xxl-8{margin-left:66.66666667%}.offset-xxl-9{margin-left:75%}.offset-xxl-10{margin-left:83.33333333%}.offset-xxl-11{margin-left:91.66666667%}.g-xxl-0,.gx-xxl-0{--bs-gutter-x:0}.g-xxl-0,.gy-xxl-0{--bs-gutter-y:0}.g-xxl-1,.gx-xxl-1{--bs-gutter-x:0.25rem}.g-xxl-1,.gy-xxl-1{--bs-gutter-y:0.25rem}.g-xxl-2,.gx-xxl-2{--bs-gutter-x:0.5rem}.g-xxl-2,.gy-xxl-2{--bs-gutter-y:0.5rem}.g-xxl-3,.gx-xxl-3{--bs-gutter-x:1rem}.g-xxl-3,.gy-xxl-3{--bs-gutter-y:1rem}.g-xxl-4,.gx-xxl-4{--bs-gutter-x:1.5rem}.g-xxl-4,.gy-xxl-4{--bs-gutter-y:1.5rem}.g-xxl-5,.gx-xxl-5{--bs-gutter-x:3rem}.g-xxl-5,.gy-xxl-5{--bs-gutter-y:3rem}}.table{--bs-table-color-type:initial;--bs-table-bg-type:initial;--bs-table-color-state:initial;--bs-table-bg-state:initial;--bs-table-color:var(--bs-emphasis-color);--bs-table-bg:var(--bs-body-bg);--bs-table-border-color:var(--bs-border-color);--bs-table-accent-bg:transparent;--bs-table-striped-color:var(--bs-emphasis-color);--bs-table-striped-bg:rgba(var(--bs-emphasis-color-rgb), 0.05);--bs-table-active-color:var(--bs-emphasis-color);--bs-table-active-bg:rgba(var(--bs-emphasis-color-rgb), 0.1);--bs-table-hover-color:var(--bs-emphasis-color);--bs-table-hover-bg:rgba(var(--bs-emphasis-color-rgb), 0.075);width:100%;margin-bottom:1rem;vertical-align:top;border-color:var(--bs-table-border-color)}.table>:not(caption)>*>*{padding:.5rem .5rem;color:var(--bs-table-color-state,var(--bs-table-color-type,var(--bs-table-color)));background-color:var(--bs-table-bg);border-bottom-width:var(--bs-border-width);box-shadow:inset 0 0 0 9999px var(--bs-table-bg-state,var(--bs-table-bg-type,var(--bs-table-accent-bg)))}.table>tbody{vertical-align:inherit}.table>thead{vertical-align:bottom}.table-group-divider{border-top:calc(var(--bs-border-width) * 2) solid currentcolor}.caption-top{caption-side:top}.table-sm>:not(caption)>*>*{padding:.25rem .25rem}.table-bordered>:not(caption)>*{border-width:var(--bs-border-width) 0}.table-bordered>:not(caption)>*>*{border-width:0 var(--bs-border-width)}.table-borderless>:not(caption)>*>*{border-bottom-width:0}.table-borderless>:not(:first-child){border-top-width:0}.table-striped>tbody>tr:nth-of-type(odd)>*{--bs-table-color-type:var(--bs-table-striped-color);--bs-table-bg-type:var(--bs-table-striped-bg)}.table-striped-columns>:not(caption)>tr>:nth-child(2n){--bs-table-color-type:var(--bs-table-striped-color);--bs-table-bg-type:var(--bs-table-striped-bg)}.table-active{--bs-table-color-state:var(--bs-table-active-color);--bs-table-bg-state:var(--bs-table-active-bg)}.table-hover>tbody>tr:hover>*{--bs-table-color-state:var(--bs-table-hover-color);--bs-table-bg-state:var(--bs-table-hover-bg)}.table-primary{--bs-table-color:#000;--bs-table-bg:#cfe2ff;--bs-table-border-color:#a6b5cc;--bs-table-striped-bg:#c5d7f2;--bs-table-striped-color:#000;--bs-table-active-bg:#bacbe6;--bs-table-active-color:#000;--bs-table-hover-bg:#bfd1ec;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-secondary{--bs-table-color:#000;--bs-table-bg:#e2e3e5;--bs-table-border-color:#b5b6b7;--bs-table-striped-bg:#d7d8da;--bs-table-striped-color:#000;--bs-table-active-bg:#cbccce;--bs-table-active-color:#000;--bs-table-hover-bg:#d1d2d4;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-success{--bs-table-color:#000;--bs-table-bg:#d1e7dd;--bs-table-border-color:#a7b9b1;--bs-table-striped-bg:#c7dbd2;--bs-table-striped-color:#000;--bs-table-active-bg:#bcd0c7;--bs-table-active-color:#000;--bs-table-hover-bg:#c1d6cc;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-info{--bs-table-color:#000;--bs-table-bg:#cff4fc;--bs-table-border-color:#a6c3ca;--bs-table-striped-bg:#c5e8ef;--bs-table-striped-color:#000;--bs-table-active-bg:#badce3;--bs-table-active-color:#000;--bs-table-hover-bg:#bfe2e9;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-warning{--bs-table-color:#000;--bs-table-bg:#fff3cd;--bs-table-border-color:#ccc2a4;--bs-table-striped-bg:#f2e7c3;--bs-table-striped-color:#000;--bs-table-active-bg:#e6dbb9;--bs-table-active-color:#000;--bs-table-hover-bg:#ece1be;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-danger{--bs-table-color:#000;--bs-table-bg:#f8d7da;--bs-table-border-color:#c6acae;--bs-table-striped-bg:#eccccf;--bs-table-striped-color:#000;--bs-table-active-bg:#dfc2c4;--bs-table-active-color:#000;--bs-table-hover-bg:#e5c7ca;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-light{--bs-table-color:#000;--bs-table-bg:#f8f9fa;--bs-table-border-color:#c6c7c8;--bs-table-striped-bg:#ecedee;--bs-table-striped-color:#000;--bs-table-active-bg:#dfe0e1;--bs-table-active-color:#000;--bs-table-hover-bg:#e5e6e7;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-dark{--bs-table-color:#fff;--bs-table-bg:#212529;--bs-table-border-color:#4d5154;--bs-table-striped-bg:#2c3034;--bs-table-striped-color:#fff;--bs-table-active-bg:#373b3e;--bs-table-active-color:#fff;--bs-table-hover-bg:#323539;--bs-table-hover-color:#fff;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-responsive{overflow-x:auto;-webkit-overflow-scrolling:touch}@media (max-width:575.98px){.table-responsive-sm{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:767.98px){.table-responsive-md{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:991.98px){.table-responsive-lg{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:1199.98px){.table-responsive-xl{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:1399.98px){.table-responsive-xxl{overflow-x:auto;-webkit-overflow-scrolling:touch}}.form-label{margin-bottom:.5rem}.col-form-label{padding-top:calc(.375rem + var(--bs-border-width));padding-bottom:calc(.375rem + var(--bs-border-width));margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(.5rem + var(--bs-border-width));padding-bottom:calc(.5rem + var(--bs-border-width));font-size:1.25rem}.col-form-label-sm{padding-top:calc(.25rem + var(--bs-border-width));padding-bottom:calc(.25rem + var(--bs-border-width));font-size:.875rem}.form-text{margin-top:.25rem;font-size:.875em;color:var(--bs-secondary-color)}.form-control{display:block;width:100%;padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--bs-body-bg);background-clip:padding-box;border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-control{transition:none}}.form-control[type=file]{overflow:hidden}.form-control[type=file]:not(:disabled):not([readonly]){cursor:pointer}.form-control:focus{color:var(--bs-body-color);background-color:var(--bs-body-bg);border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-control::-webkit-date-and-time-value{min-width:85px;height:1.5em;margin:0}.form-control::-webkit-datetime-edit{display:block;padding:0}.form-control::-moz-placeholder{color:var(--bs-secondary-color);opacity:1}.form-control::placeholder{color:var(--bs-secondary-color);opacity:1}.form-control:disabled{background-color:var(--bs-secondary-bg);opacity:1}.form-control::-webkit-file-upload-button{padding:.375rem .75rem;margin:-.375rem -.75rem;-webkit-margin-end:.75rem;margin-inline-end:.75rem;color:var(--bs-body-color);background-color:var(--bs-tertiary-bg);pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:var(--bs-border-width);border-radius:0;-webkit-transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}.form-control::file-selector-button{padding:.375rem .75rem;margin:-.375rem -.75rem;-webkit-margin-end:.75rem;margin-inline-end:.75rem;color:var(--bs-body-color);background-color:var(--bs-tertiary-bg);pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:var(--bs-border-width);border-radius:0;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-control::-webkit-file-upload-button{-webkit-transition:none;transition:none}.form-control::file-selector-button{transition:none}}.form-control:hover:not(:disabled):not([readonly])::-webkit-file-upload-button{background-color:var(--bs-secondary-bg)}.form-control:hover:not(:disabled):not([readonly])::file-selector-button{background-color:var(--bs-secondary-bg)}.form-control-plaintext{display:block;width:100%;padding:.375rem 0;margin-bottom:0;line-height:1.5;color:var(--bs-body-color);background-color:transparent;border:solid transparent;border-width:var(--bs-border-width) 0}.form-control-plaintext:focus{outline:0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm{padding-right:0;padding-left:0}.form-control-sm{min-height:calc(1.5em + .5rem + calc(var(--bs-border-width) * 2));padding:.25rem .5rem;font-size:.875rem;border-radius:var(--bs-border-radius-sm)}.form-control-sm::-webkit-file-upload-button{padding:.25rem .5rem;margin:-.25rem -.5rem;-webkit-margin-end:.5rem;margin-inline-end:.5rem}.form-control-sm::file-selector-button{padding:.25rem .5rem;margin:-.25rem -.5rem;-webkit-margin-end:.5rem;margin-inline-end:.5rem}.form-control-lg{min-height:calc(1.5em + 1rem + calc(var(--bs-border-width) * 2));padding:.5rem 1rem;font-size:1.25rem;border-radius:var(--bs-border-radius-lg)}.form-control-lg::-webkit-file-upload-button{padding:.5rem 1rem;margin:-.5rem -1rem;-webkit-margin-end:1rem;margin-inline-end:1rem}.form-control-lg::file-selector-button{padding:.5rem 1rem;margin:-.5rem -1rem;-webkit-margin-end:1rem;margin-inline-end:1rem}textarea.form-control{min-height:calc(1.5em + .75rem + calc(var(--bs-border-width) * 2))}textarea.form-control-sm{min-height:calc(1.5em + .5rem + calc(var(--bs-border-width) * 2))}textarea.form-control-lg{min-height:calc(1.5em + 1rem + calc(var(--bs-border-width) * 2))}.form-control-color{width:3rem;height:calc(1.5em + .75rem + calc(var(--bs-border-width) * 2));padding:.375rem}.form-control-color:not(:disabled):not([readonly]){cursor:pointer}.form-control-color::-moz-color-swatch{border:0!important;border-radius:var(--bs-border-radius)}.form-control-color::-webkit-color-swatch{border:0!important;border-radius:var(--bs-border-radius)}.form-control-color.form-control-sm{height:calc(1.5em + .5rem + calc(var(--bs-border-width) * 2))}.form-control-color.form-control-lg{height:calc(1.5em + 1rem + calc(var(--bs-border-width) * 2))}.form-select{--bs-form-select-bg-img:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e\");display:block;width:100%;padding:.375rem 2.25rem .375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--bs-body-bg);background-image:var(--bs-form-select-bg-img),var(--bs-form-select-bg-icon,none);background-repeat:no-repeat;background-position:right .75rem center;background-size:16px 12px;border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-select{transition:none}}.form-select:focus{border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-select[multiple],.form-select[size]:not([size=\"1\"]){padding-right:.75rem;background-image:none}.form-select:disabled{background-color:var(--bs-secondary-bg)}.form-select:-moz-focusring{color:transparent;text-shadow:0 0 0 var(--bs-body-color)}.form-select-sm{padding-top:.25rem;padding-bottom:.25rem;padding-left:.5rem;font-size:.875rem;border-radius:var(--bs-border-radius-sm)}.form-select-lg{padding-top:.5rem;padding-bottom:.5rem;padding-left:1rem;font-size:1.25rem;border-radius:var(--bs-border-radius-lg)}[data-bs-theme=dark] .form-select{--bs-form-select-bg-img:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23dee2e6' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e\")}.form-check{display:block;min-height:1.5rem;padding-left:1.5em;margin-bottom:.125rem}.form-check .form-check-input{float:left;margin-left:-1.5em}.form-check-reverse{padding-right:1.5em;padding-left:0;text-align:right}.form-check-reverse .form-check-input{float:right;margin-right:-1.5em;margin-left:0}.form-check-input{--bs-form-check-bg:var(--bs-body-bg);flex-shrink:0;width:1em;height:1em;margin-top:.25em;vertical-align:top;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--bs-form-check-bg);background-image:var(--bs-form-check-bg-image);background-repeat:no-repeat;background-position:center;background-size:contain;border:var(--bs-border-width) solid var(--bs-border-color);-webkit-print-color-adjust:exact;color-adjust:exact;print-color-adjust:exact}.form-check-input[type=checkbox]{border-radius:.25em}.form-check-input[type=radio]{border-radius:50%}.form-check-input:active{filter:brightness(90%)}.form-check-input:focus{border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-check-input:checked{background-color:#0d6efd;border-color:#0d6efd}.form-check-input:checked[type=checkbox]{--bs-form-check-bg-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/%3e%3c/svg%3e\")}.form-check-input:checked[type=radio]{--bs-form-check-bg-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='2' fill='%23fff'/%3e%3c/svg%3e\")}.form-check-input[type=checkbox]:indeterminate{background-color:#0d6efd;border-color:#0d6efd;--bs-form-check-bg-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/%3e%3c/svg%3e\")}.form-check-input:disabled{pointer-events:none;filter:none;opacity:.5}.form-check-input:disabled~.form-check-label,.form-check-input[disabled]~.form-check-label{cursor:default;opacity:.5}.form-switch{padding-left:2.5em}.form-switch .form-check-input{--bs-form-switch-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e\");width:2em;margin-left:-2.5em;background-image:var(--bs-form-switch-bg);background-position:left center;border-radius:2em;transition:background-position .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-switch .form-check-input{transition:none}}.form-switch .form-check-input:focus{--bs-form-switch-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%2386b7fe'/%3e%3c/svg%3e\")}.form-switch .form-check-input:checked{background-position:right center;--bs-form-switch-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e\")}.form-switch.form-check-reverse{padding-right:2.5em;padding-left:0}.form-switch.form-check-reverse .form-check-input{margin-right:-2.5em;margin-left:0}.form-check-inline{display:inline-block;margin-right:1rem}.btn-check{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.btn-check:disabled+.btn,.btn-check[disabled]+.btn{pointer-events:none;filter:none;opacity:.65}[data-bs-theme=dark] .form-switch .form-check-input:not(:checked):not(:focus){--bs-form-switch-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%28255, 255, 255, 0.25%29'/%3e%3c/svg%3e\")}.form-range{width:100%;height:1.5rem;padding:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent}.form-range:focus{outline:0}.form-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .25rem rgba(13,110,253,.25)}.form-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .25rem rgba(13,110,253,.25)}.form-range::-moz-focus-outer{border:0}.form-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-.25rem;-webkit-appearance:none;appearance:none;background-color:#0d6efd;border:0;border-radius:1rem;-webkit-transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-range::-webkit-slider-thumb{-webkit-transition:none;transition:none}}.form-range::-webkit-slider-thumb:active{background-color:#b6d4fe}.form-range::-webkit-slider-runnable-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:var(--bs-secondary-bg);border-color:transparent;border-radius:1rem}.form-range::-moz-range-thumb{width:1rem;height:1rem;-moz-appearance:none;appearance:none;background-color:#0d6efd;border:0;border-radius:1rem;-moz-transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-range::-moz-range-thumb{-moz-transition:none;transition:none}}.form-range::-moz-range-thumb:active{background-color:#b6d4fe}.form-range::-moz-range-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:var(--bs-secondary-bg);border-color:transparent;border-radius:1rem}.form-range:disabled{pointer-events:none}.form-range:disabled::-webkit-slider-thumb{background-color:var(--bs-secondary-color)}.form-range:disabled::-moz-range-thumb{background-color:var(--bs-secondary-color)}.form-floating{position:relative}.form-floating>.form-control,.form-floating>.form-control-plaintext,.form-floating>.form-select{height:calc(3.5rem + calc(var(--bs-border-width) * 2));min-height:calc(3.5rem + calc(var(--bs-border-width) * 2));line-height:1.25}.form-floating>label{position:absolute;top:0;left:0;z-index:2;height:100%;padding:1rem .75rem;overflow:hidden;text-align:start;text-overflow:ellipsis;white-space:nowrap;pointer-events:none;border:var(--bs-border-width) solid transparent;transform-origin:0 0;transition:opacity .1s ease-in-out,transform .1s ease-in-out}@media (prefers-reduced-motion:reduce){.form-floating>label{transition:none}}.form-floating>.form-control,.form-floating>.form-control-plaintext{padding:1rem .75rem}.form-floating>.form-control-plaintext::-moz-placeholder,.form-floating>.form-control::-moz-placeholder{color:transparent}.form-floating>.form-control-plaintext::placeholder,.form-floating>.form-control::placeholder{color:transparent}.form-floating>.form-control-plaintext:not(:-moz-placeholder-shown),.form-floating>.form-control:not(:-moz-placeholder-shown){padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control-plaintext:focus,.form-floating>.form-control-plaintext:not(:placeholder-shown),.form-floating>.form-control:focus,.form-floating>.form-control:not(:placeholder-shown){padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control-plaintext:-webkit-autofill,.form-floating>.form-control:-webkit-autofill{padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-select{padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control:not(:-moz-placeholder-shown)~label{color:rgba(var(--bs-body-color-rgb),.65);transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control-plaintext~label,.form-floating>.form-control:focus~label,.form-floating>.form-control:not(:placeholder-shown)~label,.form-floating>.form-select~label{color:rgba(var(--bs-body-color-rgb),.65);transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control:not(:-moz-placeholder-shown)~label::after{position:absolute;inset:1rem 0.375rem;z-index:-1;height:1.5em;content:\"\";background-color:var(--bs-body-bg);border-radius:var(--bs-border-radius)}.form-floating>.form-control-plaintext~label::after,.form-floating>.form-control:focus~label::after,.form-floating>.form-control:not(:placeholder-shown)~label::after,.form-floating>.form-select~label::after{position:absolute;inset:1rem 0.375rem;z-index:-1;height:1.5em;content:\"\";background-color:var(--bs-body-bg);border-radius:var(--bs-border-radius)}.form-floating>.form-control:-webkit-autofill~label{color:rgba(var(--bs-body-color-rgb),.65);transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control-plaintext~label{border-width:var(--bs-border-width) 0}.form-floating>.form-control:disabled~label,.form-floating>:disabled~label{color:#6c757d}.form-floating>.form-control:disabled~label::after,.form-floating>:disabled~label::after{background-color:var(--bs-secondary-bg)}.input-group{position:relative;display:flex;flex-wrap:wrap;align-items:stretch;width:100%}.input-group>.form-control,.input-group>.form-floating,.input-group>.form-select{position:relative;flex:1 1 auto;width:1%;min-width:0}.input-group>.form-control:focus,.input-group>.form-floating:focus-within,.input-group>.form-select:focus{z-index:5}.input-group .btn{position:relative;z-index:2}.input-group .btn:focus{z-index:5}.input-group-text{display:flex;align-items:center;padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);text-align:center;white-space:nowrap;background-color:var(--bs-tertiary-bg);border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius)}.input-group-lg>.btn,.input-group-lg>.form-control,.input-group-lg>.form-select,.input-group-lg>.input-group-text{padding:.5rem 1rem;font-size:1.25rem;border-radius:var(--bs-border-radius-lg)}.input-group-sm>.btn,.input-group-sm>.form-control,.input-group-sm>.form-select,.input-group-sm>.input-group-text{padding:.25rem .5rem;font-size:.875rem;border-radius:var(--bs-border-radius-sm)}.input-group-lg>.form-select,.input-group-sm>.form-select{padding-right:3rem}.input-group:not(.has-validation)>.dropdown-toggle:nth-last-child(n+3),.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-control,.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-select,.input-group:not(.has-validation)>:not(:last-child):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating){border-top-right-radius:0;border-bottom-right-radius:0}.input-group.has-validation>.dropdown-toggle:nth-last-child(n+4),.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-control,.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-select,.input-group.has-validation>:nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating){border-top-right-radius:0;border-bottom-right-radius:0}.input-group>:not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback){margin-left:calc(var(--bs-border-width) * -1);border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.form-floating:not(:first-child)>.form-control,.input-group>.form-floating:not(:first-child)>.form-select{border-top-left-radius:0;border-bottom-left-radius:0}.valid-feedback{display:none;width:100%;margin-top:.25rem;font-size:.875em;color:var(--bs-form-valid-color)}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;color:#fff;background-color:var(--bs-success);border-radius:var(--bs-border-radius)}.is-valid~.valid-feedback,.is-valid~.valid-tooltip,.was-validated :valid~.valid-feedback,.was-validated :valid~.valid-tooltip{display:block}.form-control.is-valid,.was-validated .form-control:valid{border-color:var(--bs-form-valid-border-color);padding-right:calc(1.5em + .75rem);background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\");background-repeat:no-repeat;background-position:right calc(.375em + .1875rem) center;background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-valid:focus,.was-validated .form-control:valid:focus{border-color:var(--bs-form-valid-border-color);box-shadow:0 0 0 .25rem rgba(var(--bs-success-rgb),.25)}.was-validated textarea.form-control:valid,textarea.form-control.is-valid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.form-select.is-valid,.was-validated .form-select:valid{border-color:var(--bs-form-valid-border-color)}.form-select.is-valid:not([multiple]):not([size]),.form-select.is-valid:not([multiple])[size=\"1\"],.was-validated .form-select:valid:not([multiple]):not([size]),.was-validated .form-select:valid:not([multiple])[size=\"1\"]{--bs-form-select-bg-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\");padding-right:4.125rem;background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(.75em + .375rem) calc(.75em + .375rem)}.form-select.is-valid:focus,.was-validated .form-select:valid:focus{border-color:var(--bs-form-valid-border-color);box-shadow:0 0 0 .25rem rgba(var(--bs-success-rgb),.25)}.form-control-color.is-valid,.was-validated .form-control-color:valid{width:calc(3rem + calc(1.5em + .75rem))}.form-check-input.is-valid,.was-validated .form-check-input:valid{border-color:var(--bs-form-valid-border-color)}.form-check-input.is-valid:checked,.was-validated .form-check-input:valid:checked{background-color:var(--bs-form-valid-color)}.form-check-input.is-valid:focus,.was-validated .form-check-input:valid:focus{box-shadow:0 0 0 .25rem rgba(var(--bs-success-rgb),.25)}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:var(--bs-form-valid-color)}.form-check-inline .form-check-input~.valid-feedback{margin-left:.5em}.input-group>.form-control:not(:focus).is-valid,.input-group>.form-floating:not(:focus-within).is-valid,.input-group>.form-select:not(:focus).is-valid,.was-validated .input-group>.form-control:not(:focus):valid,.was-validated .input-group>.form-floating:not(:focus-within):valid,.was-validated .input-group>.form-select:not(:focus):valid{z-index:3}.invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:.875em;color:var(--bs-form-invalid-color)}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;color:#fff;background-color:var(--bs-danger);border-radius:var(--bs-border-radius)}.is-invalid~.invalid-feedback,.is-invalid~.invalid-tooltip,.was-validated :invalid~.invalid-feedback,.was-validated :invalid~.invalid-tooltip{display:block}.form-control.is-invalid,.was-validated .form-control:invalid{border-color:var(--bs-form-invalid-border-color);padding-right:calc(1.5em + .75rem);background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\");background-repeat:no-repeat;background-position:right calc(.375em + .1875rem) center;background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-invalid:focus,.was-validated .form-control:invalid:focus{border-color:var(--bs-form-invalid-border-color);box-shadow:0 0 0 .25rem rgba(var(--bs-danger-rgb),.25)}.was-validated textarea.form-control:invalid,textarea.form-control.is-invalid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.form-select.is-invalid,.was-validated .form-select:invalid{border-color:var(--bs-form-invalid-border-color)}.form-select.is-invalid:not([multiple]):not([size]),.form-select.is-invalid:not([multiple])[size=\"1\"],.was-validated .form-select:invalid:not([multiple]):not([size]),.was-validated .form-select:invalid:not([multiple])[size=\"1\"]{--bs-form-select-bg-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\");padding-right:4.125rem;background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(.75em + .375rem) calc(.75em + .375rem)}.form-select.is-invalid:focus,.was-validated .form-select:invalid:focus{border-color:var(--bs-form-invalid-border-color);box-shadow:0 0 0 .25rem rgba(var(--bs-danger-rgb),.25)}.form-control-color.is-invalid,.was-validated .form-control-color:invalid{width:calc(3rem + calc(1.5em + .75rem))}.form-check-input.is-invalid,.was-validated .form-check-input:invalid{border-color:var(--bs-form-invalid-border-color)}.form-check-input.is-invalid:checked,.was-validated .form-check-input:invalid:checked{background-color:var(--bs-form-invalid-color)}.form-check-input.is-invalid:focus,.was-validated .form-check-input:invalid:focus{box-shadow:0 0 0 .25rem rgba(var(--bs-danger-rgb),.25)}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:var(--bs-form-invalid-color)}.form-check-inline .form-check-input~.invalid-feedback{margin-left:.5em}.input-group>.form-control:not(:focus).is-invalid,.input-group>.form-floating:not(:focus-within).is-invalid,.input-group>.form-select:not(:focus).is-invalid,.was-validated .input-group>.form-control:not(:focus):invalid,.was-validated .input-group>.form-floating:not(:focus-within):invalid,.was-validated .input-group>.form-select:not(:focus):invalid{z-index:4}.btn{--bs-btn-padding-x:0.75rem;--bs-btn-padding-y:0.375rem;--bs-btn-font-family: ;--bs-btn-font-size:1rem;--bs-btn-font-weight:400;--bs-btn-line-height:1.5;--bs-btn-color:var(--bs-body-color);--bs-btn-bg:transparent;--bs-btn-border-width:var(--bs-border-width);--bs-btn-border-color:transparent;--bs-btn-border-radius:var(--bs-border-radius);--bs-btn-hover-border-color:transparent;--bs-btn-box-shadow:inset 0 1px 0 rgba(255, 255, 255, 0.15),0 1px 1px rgba(0, 0, 0, 0.075);--bs-btn-disabled-opacity:0.65;--bs-btn-focus-box-shadow:0 0 0 0.25rem rgba(var(--bs-btn-focus-shadow-rgb), .5);display:inline-block;padding:var(--bs-btn-padding-y) var(--bs-btn-padding-x);font-family:var(--bs-btn-font-family);font-size:var(--bs-btn-font-size);font-weight:var(--bs-btn-font-weight);line-height:var(--bs-btn-line-height);color:var(--bs-btn-color);text-align:center;text-decoration:none;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:var(--bs-btn-border-width) solid var(--bs-btn-border-color);border-radius:var(--bs-btn-border-radius);background-color:var(--bs-btn-bg);transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.btn{transition:none}}.btn:hover{color:var(--bs-btn-hover-color);background-color:var(--bs-btn-hover-bg);border-color:var(--bs-btn-hover-border-color)}.btn-check+.btn:hover{color:var(--bs-btn-color);background-color:var(--bs-btn-bg);border-color:var(--bs-btn-border-color)}.btn:focus-visible{color:var(--bs-btn-hover-color);background-color:var(--bs-btn-hover-bg);border-color:var(--bs-btn-hover-border-color);outline:0;box-shadow:var(--bs-btn-focus-box-shadow)}.btn-check:focus-visible+.btn{border-color:var(--bs-btn-hover-border-color);outline:0;box-shadow:var(--bs-btn-focus-box-shadow)}.btn-check:checked+.btn,.btn.active,.btn.show,.btn:first-child:active,:not(.btn-check)+.btn:active{color:var(--bs-btn-active-color);background-color:var(--bs-btn-active-bg);border-color:var(--bs-btn-active-border-color)}.btn-check:checked+.btn:focus-visible,.btn.active:focus-visible,.btn.show:focus-visible,.btn:first-child:active:focus-visible,:not(.btn-check)+.btn:active:focus-visible{box-shadow:var(--bs-btn-focus-box-shadow)}.btn-check:checked:focus-visible+.btn{box-shadow:var(--bs-btn-focus-box-shadow)}.btn.disabled,.btn:disabled,fieldset:disabled .btn{color:var(--bs-btn-disabled-color);pointer-events:none;background-color:var(--bs-btn-disabled-bg);border-color:var(--bs-btn-disabled-border-color);opacity:var(--bs-btn-disabled-opacity)}.btn-primary{--bs-btn-color:#fff;--bs-btn-bg:#0d6efd;--bs-btn-border-color:#0d6efd;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#0b5ed7;--bs-btn-hover-border-color:#0a58ca;--bs-btn-focus-shadow-rgb:49,132,253;--bs-btn-active-color:#fff;--bs-btn-active-bg:#0a58ca;--bs-btn-active-border-color:#0a53be;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#0d6efd;--bs-btn-disabled-border-color:#0d6efd}.btn-secondary{--bs-btn-color:#fff;--bs-btn-bg:#6c757d;--bs-btn-border-color:#6c757d;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#5c636a;--bs-btn-hover-border-color:#565e64;--bs-btn-focus-shadow-rgb:130,138,145;--bs-btn-active-color:#fff;--bs-btn-active-bg:#565e64;--bs-btn-active-border-color:#51585e;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#6c757d;--bs-btn-disabled-border-color:#6c757d}.btn-success{--bs-btn-color:#fff;--bs-btn-bg:#198754;--bs-btn-border-color:#198754;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#157347;--bs-btn-hover-border-color:#146c43;--bs-btn-focus-shadow-rgb:60,153,110;--bs-btn-active-color:#fff;--bs-btn-active-bg:#146c43;--bs-btn-active-border-color:#13653f;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#198754;--bs-btn-disabled-border-color:#198754}.btn-info{--bs-btn-color:#000;--bs-btn-bg:#0dcaf0;--bs-btn-border-color:#0dcaf0;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#31d2f2;--bs-btn-hover-border-color:#25cff2;--bs-btn-focus-shadow-rgb:11,172,204;--bs-btn-active-color:#000;--bs-btn-active-bg:#3dd5f3;--bs-btn-active-border-color:#25cff2;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#0dcaf0;--bs-btn-disabled-border-color:#0dcaf0}.btn-warning{--bs-btn-color:#000;--bs-btn-bg:#ffc107;--bs-btn-border-color:#ffc107;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#ffca2c;--bs-btn-hover-border-color:#ffc720;--bs-btn-focus-shadow-rgb:217,164,6;--bs-btn-active-color:#000;--bs-btn-active-bg:#ffcd39;--bs-btn-active-border-color:#ffc720;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#ffc107;--bs-btn-disabled-border-color:#ffc107}.btn-danger{--bs-btn-color:#fff;--bs-btn-bg:#dc3545;--bs-btn-border-color:#dc3545;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#bb2d3b;--bs-btn-hover-border-color:#b02a37;--bs-btn-focus-shadow-rgb:225,83,97;--bs-btn-active-color:#fff;--bs-btn-active-bg:#b02a37;--bs-btn-active-border-color:#a52834;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#dc3545;--bs-btn-disabled-border-color:#dc3545}.btn-light{--bs-btn-color:#000;--bs-btn-bg:#f8f9fa;--bs-btn-border-color:#f8f9fa;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#d3d4d5;--bs-btn-hover-border-color:#c6c7c8;--bs-btn-focus-shadow-rgb:211,212,213;--bs-btn-active-color:#000;--bs-btn-active-bg:#c6c7c8;--bs-btn-active-border-color:#babbbc;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#f8f9fa;--bs-btn-disabled-border-color:#f8f9fa}.btn-dark{--bs-btn-color:#fff;--bs-btn-bg:#212529;--bs-btn-border-color:#212529;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#424649;--bs-btn-hover-border-color:#373b3e;--bs-btn-focus-shadow-rgb:66,70,73;--bs-btn-active-color:#fff;--bs-btn-active-bg:#4d5154;--bs-btn-active-border-color:#373b3e;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#212529;--bs-btn-disabled-border-color:#212529}.btn-outline-primary{--bs-btn-color:#0d6efd;--bs-btn-border-color:#0d6efd;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#0d6efd;--bs-btn-hover-border-color:#0d6efd;--bs-btn-focus-shadow-rgb:13,110,253;--bs-btn-active-color:#fff;--bs-btn-active-bg:#0d6efd;--bs-btn-active-border-color:#0d6efd;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#0d6efd;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#0d6efd;--bs-gradient:none}.btn-outline-secondary{--bs-btn-color:#6c757d;--bs-btn-border-color:#6c757d;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#6c757d;--bs-btn-hover-border-color:#6c757d;--bs-btn-focus-shadow-rgb:108,117,125;--bs-btn-active-color:#fff;--bs-btn-active-bg:#6c757d;--bs-btn-active-border-color:#6c757d;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#6c757d;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#6c757d;--bs-gradient:none}.btn-outline-success{--bs-btn-color:#198754;--bs-btn-border-color:#198754;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#198754;--bs-btn-hover-border-color:#198754;--bs-btn-focus-shadow-rgb:25,135,84;--bs-btn-active-color:#fff;--bs-btn-active-bg:#198754;--bs-btn-active-border-color:#198754;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#198754;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#198754;--bs-gradient:none}.btn-outline-info{--bs-btn-color:#0dcaf0;--bs-btn-border-color:#0dcaf0;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#0dcaf0;--bs-btn-hover-border-color:#0dcaf0;--bs-btn-focus-shadow-rgb:13,202,240;--bs-btn-active-color:#000;--bs-btn-active-bg:#0dcaf0;--bs-btn-active-border-color:#0dcaf0;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#0dcaf0;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#0dcaf0;--bs-gradient:none}.btn-outline-warning{--bs-btn-color:#ffc107;--bs-btn-border-color:#ffc107;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#ffc107;--bs-btn-hover-border-color:#ffc107;--bs-btn-focus-shadow-rgb:255,193,7;--bs-btn-active-color:#000;--bs-btn-active-bg:#ffc107;--bs-btn-active-border-color:#ffc107;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#ffc107;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#ffc107;--bs-gradient:none}.btn-outline-danger{--bs-btn-color:#dc3545;--bs-btn-border-color:#dc3545;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#dc3545;--bs-btn-hover-border-color:#dc3545;--bs-btn-focus-shadow-rgb:220,53,69;--bs-btn-active-color:#fff;--bs-btn-active-bg:#dc3545;--bs-btn-active-border-color:#dc3545;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#dc3545;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#dc3545;--bs-gradient:none}.btn-outline-light{--bs-btn-color:#f8f9fa;--bs-btn-border-color:#f8f9fa;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#f8f9fa;--bs-btn-hover-border-color:#f8f9fa;--bs-btn-focus-shadow-rgb:248,249,250;--bs-btn-active-color:#000;--bs-btn-active-bg:#f8f9fa;--bs-btn-active-border-color:#f8f9fa;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#f8f9fa;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#f8f9fa;--bs-gradient:none}.btn-outline-dark{--bs-btn-color:#212529;--bs-btn-border-color:#212529;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#212529;--bs-btn-hover-border-color:#212529;--bs-btn-focus-shadow-rgb:33,37,41;--bs-btn-active-color:#fff;--bs-btn-active-bg:#212529;--bs-btn-active-border-color:#212529;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#212529;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#212529;--bs-gradient:none}.btn-link{--bs-btn-font-weight:400;--bs-btn-color:var(--bs-link-color);--bs-btn-bg:transparent;--bs-btn-border-color:transparent;--bs-btn-hover-color:var(--bs-link-hover-color);--bs-btn-hover-border-color:transparent;--bs-btn-active-color:var(--bs-link-hover-color);--bs-btn-active-border-color:transparent;--bs-btn-disabled-color:#6c757d;--bs-btn-disabled-border-color:transparent;--bs-btn-box-shadow:0 0 0 #000;--bs-btn-focus-shadow-rgb:49,132,253;text-decoration:underline}.btn-link:focus-visible{color:var(--bs-btn-color)}.btn-link:hover{color:var(--bs-btn-hover-color)}.btn-group-lg>.btn,.btn-lg{--bs-btn-padding-y:0.5rem;--bs-btn-padding-x:1rem;--bs-btn-font-size:1.25rem;--bs-btn-border-radius:var(--bs-border-radius-lg)}.btn-group-sm>.btn,.btn-sm{--bs-btn-padding-y:0.25rem;--bs-btn-padding-x:0.5rem;--bs-btn-font-size:0.875rem;--bs-btn-border-radius:var(--bs-border-radius-sm)}.fade{transition:opacity .15s linear}@media (prefers-reduced-motion:reduce){.fade{transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{height:0;overflow:hidden;transition:height .35s ease}@media (prefers-reduced-motion:reduce){.collapsing{transition:none}}.collapsing.collapse-horizontal{width:0;height:auto;transition:width .35s ease}@media (prefers-reduced-motion:reduce){.collapsing.collapse-horizontal{transition:none}}.dropdown,.dropdown-center,.dropend,.dropstart,.dropup,.dropup-center{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropdown-menu{--bs-dropdown-zindex:1000;--bs-dropdown-min-width:10rem;--bs-dropdown-padding-x:0;--bs-dropdown-padding-y:0.5rem;--bs-dropdown-spacer:0.125rem;--bs-dropdown-font-size:1rem;--bs-dropdown-color:var(--bs-body-color);--bs-dropdown-bg:var(--bs-body-bg);--bs-dropdown-border-color:var(--bs-border-color-translucent);--bs-dropdown-border-radius:var(--bs-border-radius);--bs-dropdown-border-width:var(--bs-border-width);--bs-dropdown-inner-border-radius:calc(var(--bs-border-radius) - var(--bs-border-width));--bs-dropdown-divider-bg:var(--bs-border-color-translucent);--bs-dropdown-divider-margin-y:0.5rem;--bs-dropdown-box-shadow:var(--bs-box-shadow);--bs-dropdown-link-color:var(--bs-body-color);--bs-dropdown-link-hover-color:var(--bs-body-color);--bs-dropdown-link-hover-bg:var(--bs-tertiary-bg);--bs-dropdown-link-active-color:#fff;--bs-dropdown-link-active-bg:#0d6efd;--bs-dropdown-link-disabled-color:var(--bs-tertiary-color);--bs-dropdown-item-padding-x:1rem;--bs-dropdown-item-padding-y:0.25rem;--bs-dropdown-header-color:#6c757d;--bs-dropdown-header-padding-x:1rem;--bs-dropdown-header-padding-y:0.5rem;position:absolute;z-index:var(--bs-dropdown-zindex);display:none;min-width:var(--bs-dropdown-min-width);padding:var(--bs-dropdown-padding-y) var(--bs-dropdown-padding-x);margin:0;font-size:var(--bs-dropdown-font-size);color:var(--bs-dropdown-color);text-align:left;list-style:none;background-color:var(--bs-dropdown-bg);background-clip:padding-box;border:var(--bs-dropdown-border-width) solid var(--bs-dropdown-border-color);border-radius:var(--bs-dropdown-border-radius)}.dropdown-menu[data-bs-popper]{top:100%;left:0;margin-top:var(--bs-dropdown-spacer)}.dropdown-menu-start{--bs-position:start}.dropdown-menu-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-end{--bs-position:end}.dropdown-menu-end[data-bs-popper]{right:0;left:auto}@media (min-width:576px){.dropdown-menu-sm-start{--bs-position:start}.dropdown-menu-sm-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-sm-end{--bs-position:end}.dropdown-menu-sm-end[data-bs-popper]{right:0;left:auto}}@media (min-width:768px){.dropdown-menu-md-start{--bs-position:start}.dropdown-menu-md-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-md-end{--bs-position:end}.dropdown-menu-md-end[data-bs-popper]{right:0;left:auto}}@media (min-width:992px){.dropdown-menu-lg-start{--bs-position:start}.dropdown-menu-lg-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-lg-end{--bs-position:end}.dropdown-menu-lg-end[data-bs-popper]{right:0;left:auto}}@media (min-width:1200px){.dropdown-menu-xl-start{--bs-position:start}.dropdown-menu-xl-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-xl-end{--bs-position:end}.dropdown-menu-xl-end[data-bs-popper]{right:0;left:auto}}@media (min-width:1400px){.dropdown-menu-xxl-start{--bs-position:start}.dropdown-menu-xxl-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-xxl-end{--bs-position:end}.dropdown-menu-xxl-end[data-bs-popper]{right:0;left:auto}}.dropup .dropdown-menu[data-bs-popper]{top:auto;bottom:100%;margin-top:0;margin-bottom:var(--bs-dropdown-spacer)}.dropup .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty::after{margin-left:0}.dropend .dropdown-menu[data-bs-popper]{top:0;right:auto;left:100%;margin-top:0;margin-left:var(--bs-dropdown-spacer)}.dropend .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropend .dropdown-toggle:empty::after{margin-left:0}.dropend .dropdown-toggle::after{vertical-align:0}.dropstart .dropdown-menu[data-bs-popper]{top:0;right:100%;left:auto;margin-top:0;margin-right:var(--bs-dropdown-spacer)}.dropstart .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\"}.dropstart .dropdown-toggle::after{display:none}.dropstart .dropdown-toggle::before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropstart .dropdown-toggle:empty::after{margin-left:0}.dropstart .dropdown-toggle::before{vertical-align:0}.dropdown-divider{height:0;margin:var(--bs-dropdown-divider-margin-y) 0;overflow:hidden;border-top:1px solid var(--bs-dropdown-divider-bg);opacity:1}.dropdown-item{display:block;width:100%;padding:var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x);clear:both;font-weight:400;color:var(--bs-dropdown-link-color);text-align:inherit;text-decoration:none;white-space:nowrap;background-color:transparent;border:0;border-radius:var(--bs-dropdown-item-border-radius,0)}.dropdown-item:focus,.dropdown-item:hover{color:var(--bs-dropdown-link-hover-color);background-color:var(--bs-dropdown-link-hover-bg)}.dropdown-item.active,.dropdown-item:active{color:var(--bs-dropdown-link-active-color);text-decoration:none;background-color:var(--bs-dropdown-link-active-bg)}.dropdown-item.disabled,.dropdown-item:disabled{color:var(--bs-dropdown-link-disabled-color);pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:var(--bs-dropdown-header-padding-y) var(--bs-dropdown-header-padding-x);margin-bottom:0;font-size:.875rem;color:var(--bs-dropdown-header-color);white-space:nowrap}.dropdown-item-text{display:block;padding:var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x);color:var(--bs-dropdown-link-color)}.dropdown-menu-dark{--bs-dropdown-color:#dee2e6;--bs-dropdown-bg:#343a40;--bs-dropdown-border-color:var(--bs-border-color-translucent);--bs-dropdown-box-shadow: ;--bs-dropdown-link-color:#dee2e6;--bs-dropdown-link-hover-color:#fff;--bs-dropdown-divider-bg:var(--bs-border-color-translucent);--bs-dropdown-link-hover-bg:rgba(255, 255, 255, 0.15);--bs-dropdown-link-active-color:#fff;--bs-dropdown-link-active-bg:#0d6efd;--bs-dropdown-link-disabled-color:#adb5bd;--bs-dropdown-header-color:#adb5bd}.btn-group,.btn-group-vertical{position:relative;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;flex:1 1 auto}.btn-group-vertical>.btn-check:checked+.btn,.btn-group-vertical>.btn-check:focus+.btn,.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn-check:checked+.btn,.btn-group>.btn-check:focus+.btn,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:1}.btn-toolbar{display:flex;flex-wrap:wrap;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group{border-radius:var(--bs-border-radius)}.btn-group>.btn-group:not(:first-child),.btn-group>:not(.btn-check:first-child)+.btn{margin-left:calc(var(--bs-border-width) * -1)}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn.dropdown-toggle-split:first-child,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:nth-child(n+3),.btn-group>:not(.btn-check)+.btn{border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.dropdown-toggle-split::after,.dropend .dropdown-toggle-split::after,.dropup .dropdown-toggle-split::after{margin-left:0}.dropstart .dropdown-toggle-split::before{margin-right:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{flex-direction:column;align-items:flex-start;justify-content:center}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group{width:100%}.btn-group-vertical>.btn-group:not(:first-child),.btn-group-vertical>.btn:not(:first-child){margin-top:calc(var(--bs-border-width) * -1)}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn~.btn{border-top-left-radius:0;border-top-right-radius:0}.nav{--bs-nav-link-padding-x:1rem;--bs-nav-link-padding-y:0.5rem;--bs-nav-link-font-weight: ;--bs-nav-link-color:var(--bs-link-color);--bs-nav-link-hover-color:var(--bs-link-hover-color);--bs-nav-link-disabled-color:var(--bs-secondary-color);display:flex;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:var(--bs-nav-link-padding-y) var(--bs-nav-link-padding-x);font-size:var(--bs-nav-link-font-size);font-weight:var(--bs-nav-link-font-weight);color:var(--bs-nav-link-color);text-decoration:none;background:0 0;border:0;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out}@media (prefers-reduced-motion:reduce){.nav-link{transition:none}}.nav-link:focus,.nav-link:hover{color:var(--bs-nav-link-hover-color)}.nav-link:focus-visible{outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.nav-link.disabled,.nav-link:disabled{color:var(--bs-nav-link-disabled-color);pointer-events:none;cursor:default}.nav-tabs{--bs-nav-tabs-border-width:var(--bs-border-width);--bs-nav-tabs-border-color:var(--bs-border-color);--bs-nav-tabs-border-radius:var(--bs-border-radius);--bs-nav-tabs-link-hover-border-color:var(--bs-secondary-bg) var(--bs-secondary-bg) var(--bs-border-color);--bs-nav-tabs-link-active-color:var(--bs-emphasis-color);--bs-nav-tabs-link-active-bg:var(--bs-body-bg);--bs-nav-tabs-link-active-border-color:var(--bs-border-color) var(--bs-border-color) var(--bs-body-bg);border-bottom:var(--bs-nav-tabs-border-width) solid var(--bs-nav-tabs-border-color)}.nav-tabs .nav-link{margin-bottom:calc(-1 * var(--bs-nav-tabs-border-width));border:var(--bs-nav-tabs-border-width) solid transparent;border-top-left-radius:var(--bs-nav-tabs-border-radius);border-top-right-radius:var(--bs-nav-tabs-border-radius)}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{isolation:isolate;border-color:var(--bs-nav-tabs-link-hover-border-color)}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:var(--bs-nav-tabs-link-active-color);background-color:var(--bs-nav-tabs-link-active-bg);border-color:var(--bs-nav-tabs-link-active-border-color)}.nav-tabs .dropdown-menu{margin-top:calc(-1 * var(--bs-nav-tabs-border-width));border-top-left-radius:0;border-top-right-radius:0}.nav-pills{--bs-nav-pills-border-radius:var(--bs-border-radius);--bs-nav-pills-link-active-color:#fff;--bs-nav-pills-link-active-bg:#0d6efd}.nav-pills .nav-link{border-radius:var(--bs-nav-pills-border-radius)}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:var(--bs-nav-pills-link-active-color);background-color:var(--bs-nav-pills-link-active-bg)}.nav-underline{--bs-nav-underline-gap:1rem;--bs-nav-underline-border-width:0.125rem;--bs-nav-underline-link-active-color:var(--bs-emphasis-color);gap:var(--bs-nav-underline-gap)}.nav-underline .nav-link{padding-right:0;padding-left:0;border-bottom:var(--bs-nav-underline-border-width) solid transparent}.nav-underline .nav-link:focus,.nav-underline .nav-link:hover{border-bottom-color:currentcolor}.nav-underline .nav-link.active,.nav-underline .show>.nav-link{font-weight:700;color:var(--bs-nav-underline-link-active-color);border-bottom-color:currentcolor}.nav-fill .nav-item,.nav-fill>.nav-link{flex:1 1 auto;text-align:center}.nav-justified .nav-item,.nav-justified>.nav-link{flex-basis:0;flex-grow:1;text-align:center}.nav-fill .nav-item .nav-link,.nav-justified .nav-item .nav-link{width:100%}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{--bs-navbar-padding-x:0;--bs-navbar-padding-y:0.5rem;--bs-navbar-color:rgba(var(--bs-emphasis-color-rgb), 0.65);--bs-navbar-hover-color:rgba(var(--bs-emphasis-color-rgb), 0.8);--bs-navbar-disabled-color:rgba(var(--bs-emphasis-color-rgb), 0.3);--bs-navbar-active-color:rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-brand-padding-y:0.3125rem;--bs-navbar-brand-margin-end:1rem;--bs-navbar-brand-font-size:1.25rem;--bs-navbar-brand-color:rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-brand-hover-color:rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-nav-link-padding-x:0.5rem;--bs-navbar-toggler-padding-y:0.25rem;--bs-navbar-toggler-padding-x:0.75rem;--bs-navbar-toggler-font-size:1.25rem;--bs-navbar-toggler-icon-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%2833, 37, 41, 0.75%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\");--bs-navbar-toggler-border-color:rgba(var(--bs-emphasis-color-rgb), 0.15);--bs-navbar-toggler-border-radius:var(--bs-border-radius);--bs-navbar-toggler-focus-width:0.25rem;--bs-navbar-toggler-transition:box-shadow 0.15s ease-in-out;position:relative;display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;padding:var(--bs-navbar-padding-y) var(--bs-navbar-padding-x)}.navbar>.container,.navbar>.container-fluid,.navbar>.container-lg,.navbar>.container-md,.navbar>.container-sm,.navbar>.container-xl,.navbar>.container-xxl{display:flex;flex-wrap:inherit;align-items:center;justify-content:space-between}.navbar-brand{padding-top:var(--bs-navbar-brand-padding-y);padding-bottom:var(--bs-navbar-brand-padding-y);margin-right:var(--bs-navbar-brand-margin-end);font-size:var(--bs-navbar-brand-font-size);color:var(--bs-navbar-brand-color);text-decoration:none;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{color:var(--bs-navbar-brand-hover-color)}.navbar-nav{--bs-nav-link-padding-x:0;--bs-nav-link-padding-y:0.5rem;--bs-nav-link-font-weight: ;--bs-nav-link-color:var(--bs-navbar-color);--bs-nav-link-hover-color:var(--bs-navbar-hover-color);--bs-nav-link-disabled-color:var(--bs-navbar-disabled-color);display:flex;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link.active,.navbar-nav .nav-link.show{color:var(--bs-navbar-active-color)}.navbar-nav .dropdown-menu{position:static}.navbar-text{padding-top:.5rem;padding-bottom:.5rem;color:var(--bs-navbar-color)}.navbar-text a,.navbar-text a:focus,.navbar-text a:hover{color:var(--bs-navbar-active-color)}.navbar-collapse{flex-basis:100%;flex-grow:1;align-items:center}.navbar-toggler{padding:var(--bs-navbar-toggler-padding-y) var(--bs-navbar-toggler-padding-x);font-size:var(--bs-navbar-toggler-font-size);line-height:1;color:var(--bs-navbar-color);background-color:transparent;border:var(--bs-border-width) solid var(--bs-navbar-toggler-border-color);border-radius:var(--bs-navbar-toggler-border-radius);transition:var(--bs-navbar-toggler-transition)}@media (prefers-reduced-motion:reduce){.navbar-toggler{transition:none}}.navbar-toggler:hover{text-decoration:none}.navbar-toggler:focus{text-decoration:none;outline:0;box-shadow:0 0 0 var(--bs-navbar-toggler-focus-width)}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;background-image:var(--bs-navbar-toggler-icon-bg);background-repeat:no-repeat;background-position:center;background-size:100%}.navbar-nav-scroll{max-height:var(--bs-scroll-height,75vh);overflow-y:auto}@media (min-width:576px){.navbar-expand-sm{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-sm .navbar-nav{flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-sm .navbar-nav-scroll{overflow:visible}.navbar-expand-sm .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}.navbar-expand-sm .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-sm .offcanvas .offcanvas-header{display:none}.navbar-expand-sm .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:768px){.navbar-expand-md{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-md .navbar-nav{flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-md .navbar-nav-scroll{overflow:visible}.navbar-expand-md .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}.navbar-expand-md .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-md .offcanvas .offcanvas-header{display:none}.navbar-expand-md .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:992px){.navbar-expand-lg{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-lg .navbar-nav{flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-lg .navbar-nav-scroll{overflow:visible}.navbar-expand-lg .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}.navbar-expand-lg .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-lg .offcanvas .offcanvas-header{display:none}.navbar-expand-lg .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:1200px){.navbar-expand-xl{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-xl .navbar-nav{flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-xl .navbar-nav-scroll{overflow:visible}.navbar-expand-xl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}.navbar-expand-xl .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-xl .offcanvas .offcanvas-header{display:none}.navbar-expand-xl .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:1400px){.navbar-expand-xxl{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-xxl .navbar-nav{flex-direction:row}.navbar-expand-xxl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xxl .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-xxl .navbar-nav-scroll{overflow:visible}.navbar-expand-xxl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xxl .navbar-toggler{display:none}.navbar-expand-xxl .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-xxl .offcanvas .offcanvas-header{display:none}.navbar-expand-xxl .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}.navbar-expand{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand .navbar-nav{flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand .navbar-nav-scroll{overflow:visible}.navbar-expand .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-expand .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand .offcanvas .offcanvas-header{display:none}.navbar-expand .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}.navbar-dark,.navbar[data-bs-theme=dark]{--bs-navbar-color:rgba(255, 255, 255, 0.55);--bs-navbar-hover-color:rgba(255, 255, 255, 0.75);--bs-navbar-disabled-color:rgba(255, 255, 255, 0.25);--bs-navbar-active-color:#fff;--bs-navbar-brand-color:#fff;--bs-navbar-brand-hover-color:#fff;--bs-navbar-toggler-border-color:rgba(255, 255, 255, 0.1);--bs-navbar-toggler-icon-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\")}[data-bs-theme=dark] .navbar-toggler-icon{--bs-navbar-toggler-icon-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\")}.card{--bs-card-spacer-y:1rem;--bs-card-spacer-x:1rem;--bs-card-title-spacer-y:0.5rem;--bs-card-title-color: ;--bs-card-subtitle-color: ;--bs-card-border-width:var(--bs-border-width);--bs-card-border-color:var(--bs-border-color-translucent);--bs-card-border-radius:var(--bs-border-radius);--bs-card-box-shadow: ;--bs-card-inner-border-radius:calc(var(--bs-border-radius) - (var(--bs-border-width)));--bs-card-cap-padding-y:0.5rem;--bs-card-cap-padding-x:1rem;--bs-card-cap-bg:rgba(var(--bs-body-color-rgb), 0.03);--bs-card-cap-color: ;--bs-card-height: ;--bs-card-color: ;--bs-card-bg:var(--bs-body-bg);--bs-card-img-overlay-padding:1rem;--bs-card-group-margin:0.75rem;position:relative;display:flex;flex-direction:column;min-width:0;height:var(--bs-card-height);color:var(--bs-body-color);word-wrap:break-word;background-color:var(--bs-card-bg);background-clip:border-box;border:var(--bs-card-border-width) solid var(--bs-card-border-color);border-radius:var(--bs-card-border-radius)}.card>hr{margin-right:0;margin-left:0}.card>.list-group{border-top:inherit;border-bottom:inherit}.card>.list-group:first-child{border-top-width:0;border-top-left-radius:var(--bs-card-inner-border-radius);border-top-right-radius:var(--bs-card-inner-border-radius)}.card>.list-group:last-child{border-bottom-width:0;border-bottom-right-radius:var(--bs-card-inner-border-radius);border-bottom-left-radius:var(--bs-card-inner-border-radius)}.card>.card-header+.list-group,.card>.list-group+.card-footer{border-top:0}.card-body{flex:1 1 auto;padding:var(--bs-card-spacer-y) var(--bs-card-spacer-x);color:var(--bs-card-color)}.card-title{margin-bottom:var(--bs-card-title-spacer-y);color:var(--bs-card-title-color)}.card-subtitle{margin-top:calc(-.5 * var(--bs-card-title-spacer-y));margin-bottom:0;color:var(--bs-card-subtitle-color)}.card-text:last-child{margin-bottom:0}.card-link+.card-link{margin-left:var(--bs-card-spacer-x)}.card-header{padding:var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);margin-bottom:0;color:var(--bs-card-cap-color);background-color:var(--bs-card-cap-bg);border-bottom:var(--bs-card-border-width) solid var(--bs-card-border-color)}.card-header:first-child{border-radius:var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius) 0 0}.card-footer{padding:var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);color:var(--bs-card-cap-color);background-color:var(--bs-card-cap-bg);border-top:var(--bs-card-border-width) solid var(--bs-card-border-color)}.card-footer:last-child{border-radius:0 0 var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius)}.card-header-tabs{margin-right:calc(-.5 * var(--bs-card-cap-padding-x));margin-bottom:calc(-1 * var(--bs-card-cap-padding-y));margin-left:calc(-.5 * var(--bs-card-cap-padding-x));border-bottom:0}.card-header-tabs .nav-link.active{background-color:var(--bs-card-bg);border-bottom-color:var(--bs-card-bg)}.card-header-pills{margin-right:calc(-.5 * var(--bs-card-cap-padding-x));margin-left:calc(-.5 * var(--bs-card-cap-padding-x))}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:var(--bs-card-img-overlay-padding);border-radius:var(--bs-card-inner-border-radius)}.card-img,.card-img-bottom,.card-img-top{width:100%}.card-img,.card-img-top{border-top-left-radius:var(--bs-card-inner-border-radius);border-top-right-radius:var(--bs-card-inner-border-radius)}.card-img,.card-img-bottom{border-bottom-right-radius:var(--bs-card-inner-border-radius);border-bottom-left-radius:var(--bs-card-inner-border-radius)}.card-group>.card{margin-bottom:var(--bs-card-group-margin)}@media (min-width:576px){.card-group{display:flex;flex-flow:row wrap}.card-group>.card{flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:not(:last-child) .card-header,.card-group>.card:not(:last-child) .card-img-top{border-top-right-radius:0}.card-group>.card:not(:last-child) .card-footer,.card-group>.card:not(:last-child) .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:not(:first-child) .card-header,.card-group>.card:not(:first-child) .card-img-top{border-top-left-radius:0}.card-group>.card:not(:first-child) .card-footer,.card-group>.card:not(:first-child) .card-img-bottom{border-bottom-left-radius:0}}.accordion{--bs-accordion-color:var(--bs-body-color);--bs-accordion-bg:var(--bs-body-bg);--bs-accordion-transition:color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out,border-radius 0.15s ease;--bs-accordion-border-color:var(--bs-border-color);--bs-accordion-border-width:var(--bs-border-width);--bs-accordion-border-radius:var(--bs-border-radius);--bs-accordion-inner-border-radius:calc(var(--bs-border-radius) - (var(--bs-border-width)));--bs-accordion-btn-padding-x:1.25rem;--bs-accordion-btn-padding-y:1rem;--bs-accordion-btn-color:var(--bs-body-color);--bs-accordion-btn-bg:var(--bs-accordion-bg);--bs-accordion-btn-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='none' stroke='%23212529' stroke-linecap='round' stroke-linejoin='round'%3e%3cpath d='M2 5L8 11L14 5'/%3e%3c/svg%3e\");--bs-accordion-btn-icon-width:1.25rem;--bs-accordion-btn-icon-transform:rotate(-180deg);--bs-accordion-btn-icon-transition:transform 0.2s ease-in-out;--bs-accordion-btn-active-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='none' stroke='%23052c65' stroke-linecap='round' stroke-linejoin='round'%3e%3cpath d='M2 5L8 11L14 5'/%3e%3c/svg%3e\");--bs-accordion-btn-focus-box-shadow:0 0 0 0.25rem rgba(13, 110, 253, 0.25);--bs-accordion-body-padding-x:1.25rem;--bs-accordion-body-padding-y:1rem;--bs-accordion-active-color:var(--bs-primary-text-emphasis);--bs-accordion-active-bg:var(--bs-primary-bg-subtle)}.accordion-button{position:relative;display:flex;align-items:center;width:100%;padding:var(--bs-accordion-btn-padding-y) var(--bs-accordion-btn-padding-x);font-size:1rem;color:var(--bs-accordion-btn-color);text-align:left;background-color:var(--bs-accordion-btn-bg);border:0;border-radius:0;overflow-anchor:none;transition:var(--bs-accordion-transition)}@media (prefers-reduced-motion:reduce){.accordion-button{transition:none}}.accordion-button:not(.collapsed){color:var(--bs-accordion-active-color);background-color:var(--bs-accordion-active-bg);box-shadow:inset 0 calc(-1 * var(--bs-accordion-border-width)) 0 var(--bs-accordion-border-color)}.accordion-button:not(.collapsed)::after{background-image:var(--bs-accordion-btn-active-icon);transform:var(--bs-accordion-btn-icon-transform)}.accordion-button::after{flex-shrink:0;width:var(--bs-accordion-btn-icon-width);height:var(--bs-accordion-btn-icon-width);margin-left:auto;content:\"\";background-image:var(--bs-accordion-btn-icon);background-repeat:no-repeat;background-size:var(--bs-accordion-btn-icon-width);transition:var(--bs-accordion-btn-icon-transition)}@media (prefers-reduced-motion:reduce){.accordion-button::after{transition:none}}.accordion-button:hover{z-index:2}.accordion-button:focus{z-index:3;outline:0;box-shadow:var(--bs-accordion-btn-focus-box-shadow)}.accordion-header{margin-bottom:0}.accordion-item{color:var(--bs-accordion-color);background-color:var(--bs-accordion-bg);border:var(--bs-accordion-border-width) solid var(--bs-accordion-border-color)}.accordion-item:first-of-type{border-top-left-radius:var(--bs-accordion-border-radius);border-top-right-radius:var(--bs-accordion-border-radius)}.accordion-item:first-of-type>.accordion-header .accordion-button{border-top-left-radius:var(--bs-accordion-inner-border-radius);border-top-right-radius:var(--bs-accordion-inner-border-radius)}.accordion-item:not(:first-of-type){border-top:0}.accordion-item:last-of-type{border-bottom-right-radius:var(--bs-accordion-border-radius);border-bottom-left-radius:var(--bs-accordion-border-radius)}.accordion-item:last-of-type>.accordion-header .accordion-button.collapsed{border-bottom-right-radius:var(--bs-accordion-inner-border-radius);border-bottom-left-radius:var(--bs-accordion-inner-border-radius)}.accordion-item:last-of-type>.accordion-collapse{border-bottom-right-radius:var(--bs-accordion-border-radius);border-bottom-left-radius:var(--bs-accordion-border-radius)}.accordion-body{padding:var(--bs-accordion-body-padding-y) var(--bs-accordion-body-padding-x)}.accordion-flush>.accordion-item{border-right:0;border-left:0;border-radius:0}.accordion-flush>.accordion-item:first-child{border-top:0}.accordion-flush>.accordion-item:last-child{border-bottom:0}.accordion-flush>.accordion-item>.accordion-header .accordion-button,.accordion-flush>.accordion-item>.accordion-header .accordion-button.collapsed{border-radius:0}.accordion-flush>.accordion-item>.accordion-collapse{border-radius:0}[data-bs-theme=dark] .accordion-button::after{--bs-accordion-btn-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%236ea8fe'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");--bs-accordion-btn-active-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%236ea8fe'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\")}.breadcrumb{--bs-breadcrumb-padding-x:0;--bs-breadcrumb-padding-y:0;--bs-breadcrumb-margin-bottom:1rem;--bs-breadcrumb-bg: ;--bs-breadcrumb-border-radius: ;--bs-breadcrumb-divider-color:var(--bs-secondary-color);--bs-breadcrumb-item-padding-x:0.5rem;--bs-breadcrumb-item-active-color:var(--bs-secondary-color);display:flex;flex-wrap:wrap;padding:var(--bs-breadcrumb-padding-y) var(--bs-breadcrumb-padding-x);margin-bottom:var(--bs-breadcrumb-margin-bottom);font-size:var(--bs-breadcrumb-font-size);list-style:none;background-color:var(--bs-breadcrumb-bg);border-radius:var(--bs-breadcrumb-border-radius)}.breadcrumb-item+.breadcrumb-item{padding-left:var(--bs-breadcrumb-item-padding-x)}.breadcrumb-item+.breadcrumb-item::before{float:left;padding-right:var(--bs-breadcrumb-item-padding-x);color:var(--bs-breadcrumb-divider-color);content:var(--bs-breadcrumb-divider, \"/\")}.breadcrumb-item.active{color:var(--bs-breadcrumb-item-active-color)}.pagination{--bs-pagination-padding-x:0.75rem;--bs-pagination-padding-y:0.375rem;--bs-pagination-font-size:1rem;--bs-pagination-color:var(--bs-link-color);--bs-pagination-bg:var(--bs-body-bg);--bs-pagination-border-width:var(--bs-border-width);--bs-pagination-border-color:var(--bs-border-color);--bs-pagination-border-radius:var(--bs-border-radius);--bs-pagination-hover-color:var(--bs-link-hover-color);--bs-pagination-hover-bg:var(--bs-tertiary-bg);--bs-pagination-hover-border-color:var(--bs-border-color);--bs-pagination-focus-color:var(--bs-link-hover-color);--bs-pagination-focus-bg:var(--bs-secondary-bg);--bs-pagination-focus-box-shadow:0 0 0 0.25rem rgba(13, 110, 253, 0.25);--bs-pagination-active-color:#fff;--bs-pagination-active-bg:#0d6efd;--bs-pagination-active-border-color:#0d6efd;--bs-pagination-disabled-color:var(--bs-secondary-color);--bs-pagination-disabled-bg:var(--bs-secondary-bg);--bs-pagination-disabled-border-color:var(--bs-border-color);display:flex;padding-left:0;list-style:none}.page-link{position:relative;display:block;padding:var(--bs-pagination-padding-y) var(--bs-pagination-padding-x);font-size:var(--bs-pagination-font-size);color:var(--bs-pagination-color);text-decoration:none;background-color:var(--bs-pagination-bg);border:var(--bs-pagination-border-width) solid var(--bs-pagination-border-color);transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.page-link{transition:none}}.page-link:hover{z-index:2;color:var(--bs-pagination-hover-color);background-color:var(--bs-pagination-hover-bg);border-color:var(--bs-pagination-hover-border-color)}.page-link:focus{z-index:3;color:var(--bs-pagination-focus-color);background-color:var(--bs-pagination-focus-bg);outline:0;box-shadow:var(--bs-pagination-focus-box-shadow)}.active>.page-link,.page-link.active{z-index:3;color:var(--bs-pagination-active-color);background-color:var(--bs-pagination-active-bg);border-color:var(--bs-pagination-active-border-color)}.disabled>.page-link,.page-link.disabled{color:var(--bs-pagination-disabled-color);pointer-events:none;background-color:var(--bs-pagination-disabled-bg);border-color:var(--bs-pagination-disabled-border-color)}.page-item:not(:first-child) .page-link{margin-left:calc(var(--bs-border-width) * -1)}.page-item:first-child .page-link{border-top-left-radius:var(--bs-pagination-border-radius);border-bottom-left-radius:var(--bs-pagination-border-radius)}.page-item:last-child .page-link{border-top-right-radius:var(--bs-pagination-border-radius);border-bottom-right-radius:var(--bs-pagination-border-radius)}.pagination-lg{--bs-pagination-padding-x:1.5rem;--bs-pagination-padding-y:0.75rem;--bs-pagination-font-size:1.25rem;--bs-pagination-border-radius:var(--bs-border-radius-lg)}.pagination-sm{--bs-pagination-padding-x:0.5rem;--bs-pagination-padding-y:0.25rem;--bs-pagination-font-size:0.875rem;--bs-pagination-border-radius:var(--bs-border-radius-sm)}.badge{--bs-badge-padding-x:0.65em;--bs-badge-padding-y:0.35em;--bs-badge-font-size:0.75em;--bs-badge-font-weight:700;--bs-badge-color:#fff;--bs-badge-border-radius:var(--bs-border-radius);display:inline-block;padding:var(--bs-badge-padding-y) var(--bs-badge-padding-x);font-size:var(--bs-badge-font-size);font-weight:var(--bs-badge-font-weight);line-height:1;color:var(--bs-badge-color);text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:var(--bs-badge-border-radius)}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.alert{--bs-alert-bg:transparent;--bs-alert-padding-x:1rem;--bs-alert-padding-y:1rem;--bs-alert-margin-bottom:1rem;--bs-alert-color:inherit;--bs-alert-border-color:transparent;--bs-alert-border:var(--bs-border-width) solid var(--bs-alert-border-color);--bs-alert-border-radius:var(--bs-border-radius);--bs-alert-link-color:inherit;position:relative;padding:var(--bs-alert-padding-y) var(--bs-alert-padding-x);margin-bottom:var(--bs-alert-margin-bottom);color:var(--bs-alert-color);background-color:var(--bs-alert-bg);border:var(--bs-alert-border);border-radius:var(--bs-alert-border-radius)}.alert-heading{color:inherit}.alert-link{font-weight:700;color:var(--bs-alert-link-color)}.alert-dismissible{padding-right:3rem}.alert-dismissible .btn-close{position:absolute;top:0;right:0;z-index:2;padding:1.25rem 1rem}.alert-primary{--bs-alert-color:var(--bs-primary-text-emphasis);--bs-alert-bg:var(--bs-primary-bg-subtle);--bs-alert-border-color:var(--bs-primary-border-subtle);--bs-alert-link-color:var(--bs-primary-text-emphasis)}.alert-secondary{--bs-alert-color:var(--bs-secondary-text-emphasis);--bs-alert-bg:var(--bs-secondary-bg-subtle);--bs-alert-border-color:var(--bs-secondary-border-subtle);--bs-alert-link-color:var(--bs-secondary-text-emphasis)}.alert-success{--bs-alert-color:var(--bs-success-text-emphasis);--bs-alert-bg:var(--bs-success-bg-subtle);--bs-alert-border-color:var(--bs-success-border-subtle);--bs-alert-link-color:var(--bs-success-text-emphasis)}.alert-info{--bs-alert-color:var(--bs-info-text-emphasis);--bs-alert-bg:var(--bs-info-bg-subtle);--bs-alert-border-color:var(--bs-info-border-subtle);--bs-alert-link-color:var(--bs-info-text-emphasis)}.alert-warning{--bs-alert-color:var(--bs-warning-text-emphasis);--bs-alert-bg:var(--bs-warning-bg-subtle);--bs-alert-border-color:var(--bs-warning-border-subtle);--bs-alert-link-color:var(--bs-warning-text-emphasis)}.alert-danger{--bs-alert-color:var(--bs-danger-text-emphasis);--bs-alert-bg:var(--bs-danger-bg-subtle);--bs-alert-border-color:var(--bs-danger-border-subtle);--bs-alert-link-color:var(--bs-danger-text-emphasis)}.alert-light{--bs-alert-color:var(--bs-light-text-emphasis);--bs-alert-bg:var(--bs-light-bg-subtle);--bs-alert-border-color:var(--bs-light-border-subtle);--bs-alert-link-color:var(--bs-light-text-emphasis)}.alert-dark{--bs-alert-color:var(--bs-dark-text-emphasis);--bs-alert-bg:var(--bs-dark-bg-subtle);--bs-alert-border-color:var(--bs-dark-border-subtle);--bs-alert-link-color:var(--bs-dark-text-emphasis)}@keyframes progress-bar-stripes{0%{background-position-x:1rem}}.progress,.progress-stacked{--bs-progress-height:1rem;--bs-progress-font-size:0.75rem;--bs-progress-bg:var(--bs-secondary-bg);--bs-progress-border-radius:var(--bs-border-radius);--bs-progress-box-shadow:var(--bs-box-shadow-inset);--bs-progress-bar-color:#fff;--bs-progress-bar-bg:#0d6efd;--bs-progress-bar-transition:width 0.6s ease;display:flex;height:var(--bs-progress-height);overflow:hidden;font-size:var(--bs-progress-font-size);background-color:var(--bs-progress-bg);border-radius:var(--bs-progress-border-radius)}.progress-bar{display:flex;flex-direction:column;justify-content:center;overflow:hidden;color:var(--bs-progress-bar-color);text-align:center;white-space:nowrap;background-color:var(--bs-progress-bar-bg);transition:var(--bs-progress-bar-transition)}@media (prefers-reduced-motion:reduce){.progress-bar{transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-size:var(--bs-progress-height) var(--bs-progress-height)}.progress-stacked>.progress{overflow:visible}.progress-stacked>.progress>.progress-bar{width:100%}.progress-bar-animated{animation:1s linear infinite progress-bar-stripes}@media (prefers-reduced-motion:reduce){.progress-bar-animated{animation:none}}.list-group{--bs-list-group-color:var(--bs-body-color);--bs-list-group-bg:var(--bs-body-bg);--bs-list-group-border-color:var(--bs-border-color);--bs-list-group-border-width:var(--bs-border-width);--bs-list-group-border-radius:var(--bs-border-radius);--bs-list-group-item-padding-x:1rem;--bs-list-group-item-padding-y:0.5rem;--bs-list-group-action-color:var(--bs-secondary-color);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-tertiary-bg);--bs-list-group-action-active-color:var(--bs-body-color);--bs-list-group-action-active-bg:var(--bs-secondary-bg);--bs-list-group-disabled-color:var(--bs-secondary-color);--bs-list-group-disabled-bg:var(--bs-body-bg);--bs-list-group-active-color:#fff;--bs-list-group-active-bg:#0d6efd;--bs-list-group-active-border-color:#0d6efd;display:flex;flex-direction:column;padding-left:0;margin-bottom:0;border-radius:var(--bs-list-group-border-radius)}.list-group-numbered{list-style-type:none;counter-reset:section}.list-group-numbered>.list-group-item::before{content:counters(section, \".\") \". \";counter-increment:section}.list-group-item-action{width:100%;color:var(--bs-list-group-action-color);text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{z-index:1;color:var(--bs-list-group-action-hover-color);text-decoration:none;background-color:var(--bs-list-group-action-hover-bg)}.list-group-item-action:active{color:var(--bs-list-group-action-active-color);background-color:var(--bs-list-group-action-active-bg)}.list-group-item{position:relative;display:block;padding:var(--bs-list-group-item-padding-y) var(--bs-list-group-item-padding-x);color:var(--bs-list-group-color);text-decoration:none;background-color:var(--bs-list-group-bg);border:var(--bs-list-group-border-width) solid var(--bs-list-group-border-color)}.list-group-item:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.list-group-item:last-child{border-bottom-right-radius:inherit;border-bottom-left-radius:inherit}.list-group-item.disabled,.list-group-item:disabled{color:var(--bs-list-group-disabled-color);pointer-events:none;background-color:var(--bs-list-group-disabled-bg)}.list-group-item.active{z-index:2;color:var(--bs-list-group-active-color);background-color:var(--bs-list-group-active-bg);border-color:var(--bs-list-group-active-border-color)}.list-group-item+.list-group-item{border-top-width:0}.list-group-item+.list-group-item.active{margin-top:calc(-1 * var(--bs-list-group-border-width));border-top-width:var(--bs-list-group-border-width)}.list-group-horizontal{flex-direction:row}.list-group-horizontal>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal>.list-group-item.active{margin-top:0}.list-group-horizontal>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}@media (min-width:576px){.list-group-horizontal-sm{flex-direction:row}.list-group-horizontal-sm>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-sm>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-sm>.list-group-item.active{margin-top:0}.list-group-horizontal-sm>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-sm>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:768px){.list-group-horizontal-md{flex-direction:row}.list-group-horizontal-md>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-md>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-md>.list-group-item.active{margin-top:0}.list-group-horizontal-md>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-md>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:992px){.list-group-horizontal-lg{flex-direction:row}.list-group-horizontal-lg>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-lg>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-lg>.list-group-item.active{margin-top:0}.list-group-horizontal-lg>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-lg>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:1200px){.list-group-horizontal-xl{flex-direction:row}.list-group-horizontal-xl>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-xl>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-xl>.list-group-item.active{margin-top:0}.list-group-horizontal-xl>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-xl>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:1400px){.list-group-horizontal-xxl{flex-direction:row}.list-group-horizontal-xxl>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-xxl>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-xxl>.list-group-item.active{margin-top:0}.list-group-horizontal-xxl>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-xxl>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}.list-group-flush{border-radius:0}.list-group-flush>.list-group-item{border-width:0 0 var(--bs-list-group-border-width)}.list-group-flush>.list-group-item:last-child{border-bottom-width:0}.list-group-item-primary{--bs-list-group-color:var(--bs-primary-text-emphasis);--bs-list-group-bg:var(--bs-primary-bg-subtle);--bs-list-group-border-color:var(--bs-primary-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-primary-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-primary-border-subtle);--bs-list-group-active-color:var(--bs-primary-bg-subtle);--bs-list-group-active-bg:var(--bs-primary-text-emphasis);--bs-list-group-active-border-color:var(--bs-primary-text-emphasis)}.list-group-item-secondary{--bs-list-group-color:var(--bs-secondary-text-emphasis);--bs-list-group-bg:var(--bs-secondary-bg-subtle);--bs-list-group-border-color:var(--bs-secondary-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-secondary-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-secondary-border-subtle);--bs-list-group-active-color:var(--bs-secondary-bg-subtle);--bs-list-group-active-bg:var(--bs-secondary-text-emphasis);--bs-list-group-active-border-color:var(--bs-secondary-text-emphasis)}.list-group-item-success{--bs-list-group-color:var(--bs-success-text-emphasis);--bs-list-group-bg:var(--bs-success-bg-subtle);--bs-list-group-border-color:var(--bs-success-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-success-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-success-border-subtle);--bs-list-group-active-color:var(--bs-success-bg-subtle);--bs-list-group-active-bg:var(--bs-success-text-emphasis);--bs-list-group-active-border-color:var(--bs-success-text-emphasis)}.list-group-item-info{--bs-list-group-color:var(--bs-info-text-emphasis);--bs-list-group-bg:var(--bs-info-bg-subtle);--bs-list-group-border-color:var(--bs-info-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-info-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-info-border-subtle);--bs-list-group-active-color:var(--bs-info-bg-subtle);--bs-list-group-active-bg:var(--bs-info-text-emphasis);--bs-list-group-active-border-color:var(--bs-info-text-emphasis)}.list-group-item-warning{--bs-list-group-color:var(--bs-warning-text-emphasis);--bs-list-group-bg:var(--bs-warning-bg-subtle);--bs-list-group-border-color:var(--bs-warning-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-warning-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-warning-border-subtle);--bs-list-group-active-color:var(--bs-warning-bg-subtle);--bs-list-group-active-bg:var(--bs-warning-text-emphasis);--bs-list-group-active-border-color:var(--bs-warning-text-emphasis)}.list-group-item-danger{--bs-list-group-color:var(--bs-danger-text-emphasis);--bs-list-group-bg:var(--bs-danger-bg-subtle);--bs-list-group-border-color:var(--bs-danger-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-danger-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-danger-border-subtle);--bs-list-group-active-color:var(--bs-danger-bg-subtle);--bs-list-group-active-bg:var(--bs-danger-text-emphasis);--bs-list-group-active-border-color:var(--bs-danger-text-emphasis)}.list-group-item-light{--bs-list-group-color:var(--bs-light-text-emphasis);--bs-list-group-bg:var(--bs-light-bg-subtle);--bs-list-group-border-color:var(--bs-light-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-light-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-light-border-subtle);--bs-list-group-active-color:var(--bs-light-bg-subtle);--bs-list-group-active-bg:var(--bs-light-text-emphasis);--bs-list-group-active-border-color:var(--bs-light-text-emphasis)}.list-group-item-dark{--bs-list-group-color:var(--bs-dark-text-emphasis);--bs-list-group-bg:var(--bs-dark-bg-subtle);--bs-list-group-border-color:var(--bs-dark-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-dark-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-dark-border-subtle);--bs-list-group-active-color:var(--bs-dark-bg-subtle);--bs-list-group-active-bg:var(--bs-dark-text-emphasis);--bs-list-group-active-border-color:var(--bs-dark-text-emphasis)}.btn-close{--bs-btn-close-color:#000;--bs-btn-close-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z'/%3e%3c/svg%3e\");--bs-btn-close-opacity:0.5;--bs-btn-close-hover-opacity:0.75;--bs-btn-close-focus-shadow:0 0 0 0.25rem rgba(13, 110, 253, 0.25);--bs-btn-close-focus-opacity:1;--bs-btn-close-disabled-opacity:0.25;--bs-btn-close-white-filter:invert(1) grayscale(100%) brightness(200%);box-sizing:content-box;width:1em;height:1em;padding:.25em .25em;color:var(--bs-btn-close-color);background:transparent var(--bs-btn-close-bg) center/1em auto no-repeat;border:0;border-radius:.375rem;opacity:var(--bs-btn-close-opacity)}.btn-close:hover{color:var(--bs-btn-close-color);text-decoration:none;opacity:var(--bs-btn-close-hover-opacity)}.btn-close:focus{outline:0;box-shadow:var(--bs-btn-close-focus-shadow);opacity:var(--bs-btn-close-focus-opacity)}.btn-close.disabled,.btn-close:disabled{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;opacity:var(--bs-btn-close-disabled-opacity)}.btn-close-white{filter:var(--bs-btn-close-white-filter)}[data-bs-theme=dark] .btn-close{filter:var(--bs-btn-close-white-filter)}.toast{--bs-toast-zindex:1090;--bs-toast-padding-x:0.75rem;--bs-toast-padding-y:0.5rem;--bs-toast-spacing:1.5rem;--bs-toast-max-width:350px;--bs-toast-font-size:0.875rem;--bs-toast-color: ;--bs-toast-bg:rgba(var(--bs-body-bg-rgb), 0.85);--bs-toast-border-width:var(--bs-border-width);--bs-toast-border-color:var(--bs-border-color-translucent);--bs-toast-border-radius:var(--bs-border-radius);--bs-toast-box-shadow:var(--bs-box-shadow);--bs-toast-header-color:var(--bs-secondary-color);--bs-toast-header-bg:rgba(var(--bs-body-bg-rgb), 0.85);--bs-toast-header-border-color:var(--bs-border-color-translucent);width:var(--bs-toast-max-width);max-width:100%;font-size:var(--bs-toast-font-size);color:var(--bs-toast-color);pointer-events:auto;background-color:var(--bs-toast-bg);background-clip:padding-box;border:var(--bs-toast-border-width) solid var(--bs-toast-border-color);box-shadow:var(--bs-toast-box-shadow);border-radius:var(--bs-toast-border-radius)}.toast.showing{opacity:0}.toast:not(.show){display:none}.toast-container{--bs-toast-zindex:1090;position:absolute;z-index:var(--bs-toast-zindex);width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:100%;pointer-events:none}.toast-container>:not(:last-child){margin-bottom:var(--bs-toast-spacing)}.toast-header{display:flex;align-items:center;padding:var(--bs-toast-padding-y) var(--bs-toast-padding-x);color:var(--bs-toast-header-color);background-color:var(--bs-toast-header-bg);background-clip:padding-box;border-bottom:var(--bs-toast-border-width) solid var(--bs-toast-header-border-color);border-top-left-radius:calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width));border-top-right-radius:calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width))}.toast-header .btn-close{margin-right:calc(-.5 * var(--bs-toast-padding-x));margin-left:var(--bs-toast-padding-x)}.toast-body{padding:var(--bs-toast-padding-x);word-wrap:break-word}.modal{--bs-modal-zindex:1055;--bs-modal-width:500px;--bs-modal-padding:1rem;--bs-modal-margin:0.5rem;--bs-modal-color: ;--bs-modal-bg:var(--bs-body-bg);--bs-modal-border-color:var(--bs-border-color-translucent);--bs-modal-border-width:var(--bs-border-width);--bs-modal-border-radius:var(--bs-border-radius-lg);--bs-modal-box-shadow:var(--bs-box-shadow-sm);--bs-modal-inner-border-radius:calc(var(--bs-border-radius-lg) - (var(--bs-border-width)));--bs-modal-header-padding-x:1rem;--bs-modal-header-padding-y:1rem;--bs-modal-header-padding:1rem 1rem;--bs-modal-header-border-color:var(--bs-border-color);--bs-modal-header-border-width:var(--bs-border-width);--bs-modal-title-line-height:1.5;--bs-modal-footer-gap:0.5rem;--bs-modal-footer-bg: ;--bs-modal-footer-border-color:var(--bs-border-color);--bs-modal-footer-border-width:var(--bs-border-width);position:fixed;top:0;left:0;z-index:var(--bs-modal-zindex);display:none;width:100%;height:100%;overflow-x:hidden;overflow-y:auto;outline:0}.modal-dialog{position:relative;width:auto;margin:var(--bs-modal-margin);pointer-events:none}.modal.fade .modal-dialog{transition:transform .3s ease-out;transform:translate(0,-50px)}@media (prefers-reduced-motion:reduce){.modal.fade .modal-dialog{transition:none}}.modal.show .modal-dialog{transform:none}.modal.modal-static .modal-dialog{transform:scale(1.02)}.modal-dialog-scrollable{height:calc(100% - var(--bs-modal-margin) * 2)}.modal-dialog-scrollable .modal-content{max-height:100%;overflow:hidden}.modal-dialog-scrollable .modal-body{overflow-y:auto}.modal-dialog-centered{display:flex;align-items:center;min-height:calc(100% - var(--bs-modal-margin) * 2)}.modal-content{position:relative;display:flex;flex-direction:column;width:100%;color:var(--bs-modal-color);pointer-events:auto;background-color:var(--bs-modal-bg);background-clip:padding-box;border:var(--bs-modal-border-width) solid var(--bs-modal-border-color);border-radius:var(--bs-modal-border-radius);outline:0}.modal-backdrop{--bs-backdrop-zindex:1050;--bs-backdrop-bg:#000;--bs-backdrop-opacity:0.5;position:fixed;top:0;left:0;z-index:var(--bs-backdrop-zindex);width:100vw;height:100vh;background-color:var(--bs-backdrop-bg)}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:var(--bs-backdrop-opacity)}.modal-header{display:flex;flex-shrink:0;align-items:center;padding:var(--bs-modal-header-padding);border-bottom:var(--bs-modal-header-border-width) solid var(--bs-modal-header-border-color);border-top-left-radius:var(--bs-modal-inner-border-radius);border-top-right-radius:var(--bs-modal-inner-border-radius)}.modal-header .btn-close{padding:calc(var(--bs-modal-header-padding-y) * .5) calc(var(--bs-modal-header-padding-x) * .5);margin:calc(-.5 * var(--bs-modal-header-padding-y)) calc(-.5 * var(--bs-modal-header-padding-x)) calc(-.5 * var(--bs-modal-header-padding-y)) auto}.modal-title{margin-bottom:0;line-height:var(--bs-modal-title-line-height)}.modal-body{position:relative;flex:1 1 auto;padding:var(--bs-modal-padding)}.modal-footer{display:flex;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;padding:calc(var(--bs-modal-padding) - var(--bs-modal-footer-gap) * .5);background-color:var(--bs-modal-footer-bg);border-top:var(--bs-modal-footer-border-width) solid var(--bs-modal-footer-border-color);border-bottom-right-radius:var(--bs-modal-inner-border-radius);border-bottom-left-radius:var(--bs-modal-inner-border-radius)}.modal-footer>*{margin:calc(var(--bs-modal-footer-gap) * .5)}@media (min-width:576px){.modal{--bs-modal-margin:1.75rem;--bs-modal-box-shadow:var(--bs-box-shadow)}.modal-dialog{max-width:var(--bs-modal-width);margin-right:auto;margin-left:auto}.modal-sm{--bs-modal-width:300px}}@media (min-width:992px){.modal-lg,.modal-xl{--bs-modal-width:800px}}@media (min-width:1200px){.modal-xl{--bs-modal-width:1140px}}.modal-fullscreen{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen .modal-footer,.modal-fullscreen .modal-header{border-radius:0}.modal-fullscreen .modal-body{overflow-y:auto}@media (max-width:575.98px){.modal-fullscreen-sm-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-sm-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-sm-down .modal-footer,.modal-fullscreen-sm-down .modal-header{border-radius:0}.modal-fullscreen-sm-down .modal-body{overflow-y:auto}}@media (max-width:767.98px){.modal-fullscreen-md-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-md-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-md-down .modal-footer,.modal-fullscreen-md-down .modal-header{border-radius:0}.modal-fullscreen-md-down .modal-body{overflow-y:auto}}@media (max-width:991.98px){.modal-fullscreen-lg-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-lg-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-lg-down .modal-footer,.modal-fullscreen-lg-down .modal-header{border-radius:0}.modal-fullscreen-lg-down .modal-body{overflow-y:auto}}@media (max-width:1199.98px){.modal-fullscreen-xl-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-xl-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-xl-down .modal-footer,.modal-fullscreen-xl-down .modal-header{border-radius:0}.modal-fullscreen-xl-down .modal-body{overflow-y:auto}}@media (max-width:1399.98px){.modal-fullscreen-xxl-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-xxl-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-xxl-down .modal-footer,.modal-fullscreen-xxl-down .modal-header{border-radius:0}.modal-fullscreen-xxl-down .modal-body{overflow-y:auto}}.tooltip{--bs-tooltip-zindex:1080;--bs-tooltip-max-width:200px;--bs-tooltip-padding-x:0.5rem;--bs-tooltip-padding-y:0.25rem;--bs-tooltip-margin: ;--bs-tooltip-font-size:0.875rem;--bs-tooltip-color:var(--bs-body-bg);--bs-tooltip-bg:var(--bs-emphasis-color);--bs-tooltip-border-radius:var(--bs-border-radius);--bs-tooltip-opacity:0.9;--bs-tooltip-arrow-width:0.8rem;--bs-tooltip-arrow-height:0.4rem;z-index:var(--bs-tooltip-zindex);display:block;margin:var(--bs-tooltip-margin);font-family:var(--bs-font-sans-serif);font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;white-space:normal;word-spacing:normal;line-break:auto;font-size:var(--bs-tooltip-font-size);word-wrap:break-word;opacity:0}.tooltip.show{opacity:var(--bs-tooltip-opacity)}.tooltip .tooltip-arrow{display:block;width:var(--bs-tooltip-arrow-width);height:var(--bs-tooltip-arrow-height)}.tooltip .tooltip-arrow::before{position:absolute;content:\"\";border-color:transparent;border-style:solid}.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow,.bs-tooltip-top .tooltip-arrow{bottom:calc(-1 * var(--bs-tooltip-arrow-height))}.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow::before,.bs-tooltip-top .tooltip-arrow::before{top:-1px;border-width:var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * .5) 0;border-top-color:var(--bs-tooltip-bg)}.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow,.bs-tooltip-end .tooltip-arrow{left:calc(-1 * var(--bs-tooltip-arrow-height));width:var(--bs-tooltip-arrow-height);height:var(--bs-tooltip-arrow-width)}.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow::before,.bs-tooltip-end .tooltip-arrow::before{right:-1px;border-width:calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * .5) 0;border-right-color:var(--bs-tooltip-bg)}.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow,.bs-tooltip-bottom .tooltip-arrow{top:calc(-1 * var(--bs-tooltip-arrow-height))}.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow::before,.bs-tooltip-bottom .tooltip-arrow::before{bottom:-1px;border-width:0 calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height);border-bottom-color:var(--bs-tooltip-bg)}.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow,.bs-tooltip-start .tooltip-arrow{right:calc(-1 * var(--bs-tooltip-arrow-height));width:var(--bs-tooltip-arrow-height);height:var(--bs-tooltip-arrow-width)}.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow::before,.bs-tooltip-start .tooltip-arrow::before{left:-1px;border-width:calc(var(--bs-tooltip-arrow-width) * .5) 0 calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height);border-left-color:var(--bs-tooltip-bg)}.tooltip-inner{max-width:var(--bs-tooltip-max-width);padding:var(--bs-tooltip-padding-y) var(--bs-tooltip-padding-x);color:var(--bs-tooltip-color);text-align:center;background-color:var(--bs-tooltip-bg);border-radius:var(--bs-tooltip-border-radius)}.popover{--bs-popover-zindex:1070;--bs-popover-max-width:276px;--bs-popover-font-size:0.875rem;--bs-popover-bg:var(--bs-body-bg);--bs-popover-border-width:var(--bs-border-width);--bs-popover-border-color:var(--bs-border-color-translucent);--bs-popover-border-radius:var(--bs-border-radius-lg);--bs-popover-inner-border-radius:calc(var(--bs-border-radius-lg) - var(--bs-border-width));--bs-popover-box-shadow:var(--bs-box-shadow);--bs-popover-header-padding-x:1rem;--bs-popover-header-padding-y:0.5rem;--bs-popover-header-font-size:1rem;--bs-popover-header-color:inherit;--bs-popover-header-bg:var(--bs-secondary-bg);--bs-popover-body-padding-x:1rem;--bs-popover-body-padding-y:1rem;--bs-popover-body-color:var(--bs-body-color);--bs-popover-arrow-width:1rem;--bs-popover-arrow-height:0.5rem;--bs-popover-arrow-border:var(--bs-popover-border-color);z-index:var(--bs-popover-zindex);display:block;max-width:var(--bs-popover-max-width);font-family:var(--bs-font-sans-serif);font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;white-space:normal;word-spacing:normal;line-break:auto;font-size:var(--bs-popover-font-size);word-wrap:break-word;background-color:var(--bs-popover-bg);background-clip:padding-box;border:var(--bs-popover-border-width) solid var(--bs-popover-border-color);border-radius:var(--bs-popover-border-radius)}.popover .popover-arrow{display:block;width:var(--bs-popover-arrow-width);height:var(--bs-popover-arrow-height)}.popover .popover-arrow::after,.popover .popover-arrow::before{position:absolute;display:block;content:\"\";border-color:transparent;border-style:solid;border-width:0}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow,.bs-popover-top>.popover-arrow{bottom:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width))}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before,.bs-popover-top>.popover-arrow::after,.bs-popover-top>.popover-arrow::before{border-width:var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * .5) 0}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before,.bs-popover-top>.popover-arrow::before{bottom:0;border-top-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after,.bs-popover-top>.popover-arrow::after{bottom:var(--bs-popover-border-width);border-top-color:var(--bs-popover-bg)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow,.bs-popover-end>.popover-arrow{left:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));width:var(--bs-popover-arrow-height);height:var(--bs-popover-arrow-width)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before,.bs-popover-end>.popover-arrow::after,.bs-popover-end>.popover-arrow::before{border-width:calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * .5) 0}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before,.bs-popover-end>.popover-arrow::before{left:0;border-right-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after,.bs-popover-end>.popover-arrow::after{left:var(--bs-popover-border-width);border-right-color:var(--bs-popover-bg)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow,.bs-popover-bottom>.popover-arrow{top:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width))}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before,.bs-popover-bottom>.popover-arrow::after,.bs-popover-bottom>.popover-arrow::before{border-width:0 calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before,.bs-popover-bottom>.popover-arrow::before{top:0;border-bottom-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after,.bs-popover-bottom>.popover-arrow::after{top:var(--bs-popover-border-width);border-bottom-color:var(--bs-popover-bg)}.bs-popover-auto[data-popper-placement^=bottom] .popover-header::before,.bs-popover-bottom .popover-header::before{position:absolute;top:0;left:50%;display:block;width:var(--bs-popover-arrow-width);margin-left:calc(-.5 * var(--bs-popover-arrow-width));content:\"\";border-bottom:var(--bs-popover-border-width) solid var(--bs-popover-header-bg)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow,.bs-popover-start>.popover-arrow{right:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));width:var(--bs-popover-arrow-height);height:var(--bs-popover-arrow-width)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before,.bs-popover-start>.popover-arrow::after,.bs-popover-start>.popover-arrow::before{border-width:calc(var(--bs-popover-arrow-width) * .5) 0 calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before,.bs-popover-start>.popover-arrow::before{right:0;border-left-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after,.bs-popover-start>.popover-arrow::after{right:var(--bs-popover-border-width);border-left-color:var(--bs-popover-bg)}.popover-header{padding:var(--bs-popover-header-padding-y) var(--bs-popover-header-padding-x);margin-bottom:0;font-size:var(--bs-popover-header-font-size);color:var(--bs-popover-header-color);background-color:var(--bs-popover-header-bg);border-bottom:var(--bs-popover-border-width) solid var(--bs-popover-border-color);border-top-left-radius:var(--bs-popover-inner-border-radius);border-top-right-radius:var(--bs-popover-inner-border-radius)}.popover-header:empty{display:none}.popover-body{padding:var(--bs-popover-body-padding-y) var(--bs-popover-body-padding-x);color:var(--bs-popover-body-color)}.carousel{position:relative}.carousel.pointer-event{touch-action:pan-y}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner::after{display:block;clear:both;content:\"\"}.carousel-item{position:relative;display:none;float:left;width:100%;margin-right:-100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition:transform .6s ease-in-out}@media (prefers-reduced-motion:reduce){.carousel-item{transition:none}}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.active.carousel-item-end,.carousel-item-next:not(.carousel-item-start){transform:translateX(100%)}.active.carousel-item-start,.carousel-item-prev:not(.carousel-item-end){transform:translateX(-100%)}.carousel-fade .carousel-item{opacity:0;transition-property:opacity;transform:none}.carousel-fade .carousel-item-next.carousel-item-start,.carousel-fade .carousel-item-prev.carousel-item-end,.carousel-fade .carousel-item.active{z-index:1;opacity:1}.carousel-fade .active.carousel-item-end,.carousel-fade .active.carousel-item-start{z-index:0;opacity:0;transition:opacity 0s .6s}@media (prefers-reduced-motion:reduce){.carousel-fade .active.carousel-item-end,.carousel-fade .active.carousel-item-start{transition:none}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;z-index:1;display:flex;align-items:center;justify-content:center;width:15%;padding:0;color:#fff;text-align:center;background:0 0;border:0;opacity:.5;transition:opacity .15s ease}@media (prefers-reduced-motion:reduce){.carousel-control-next,.carousel-control-prev{transition:none}}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:2rem;height:2rem;background-repeat:no-repeat;background-position:50%;background-size:100% 100%}.carousel-control-prev-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z'/%3e%3c/svg%3e\")}.carousel-control-next-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\")}.carousel-indicators{position:absolute;right:0;bottom:0;left:0;z-index:2;display:flex;justify-content:center;padding:0;margin-right:15%;margin-bottom:1rem;margin-left:15%}.carousel-indicators [data-bs-target]{box-sizing:content-box;flex:0 1 auto;width:30px;height:3px;padding:0;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:#fff;background-clip:padding-box;border:0;border-top:10px solid transparent;border-bottom:10px solid transparent;opacity:.5;transition:opacity .6s ease}@media (prefers-reduced-motion:reduce){.carousel-indicators [data-bs-target]{transition:none}}.carousel-indicators .active{opacity:1}.carousel-caption{position:absolute;right:15%;bottom:1.25rem;left:15%;padding-top:1.25rem;padding-bottom:1.25rem;color:#fff;text-align:center}.carousel-dark .carousel-control-next-icon,.carousel-dark .carousel-control-prev-icon{filter:invert(1) grayscale(100)}.carousel-dark .carousel-indicators [data-bs-target]{background-color:#000}.carousel-dark .carousel-caption{color:#000}[data-bs-theme=dark] .carousel .carousel-control-next-icon,[data-bs-theme=dark] .carousel .carousel-control-prev-icon,[data-bs-theme=dark].carousel .carousel-control-next-icon,[data-bs-theme=dark].carousel .carousel-control-prev-icon{filter:invert(1) grayscale(100)}[data-bs-theme=dark] .carousel .carousel-indicators [data-bs-target],[data-bs-theme=dark].carousel .carousel-indicators [data-bs-target]{background-color:#000}[data-bs-theme=dark] .carousel .carousel-caption,[data-bs-theme=dark].carousel .carousel-caption{color:#000}.spinner-border,.spinner-grow{display:inline-block;width:var(--bs-spinner-width);height:var(--bs-spinner-height);vertical-align:var(--bs-spinner-vertical-align);border-radius:50%;animation:var(--bs-spinner-animation-speed) linear infinite var(--bs-spinner-animation-name)}@keyframes spinner-border{to{transform:rotate(360deg)}}.spinner-border{--bs-spinner-width:2rem;--bs-spinner-height:2rem;--bs-spinner-vertical-align:-0.125em;--bs-spinner-border-width:0.25em;--bs-spinner-animation-speed:0.75s;--bs-spinner-animation-name:spinner-border;border:var(--bs-spinner-border-width) solid currentcolor;border-right-color:transparent}.spinner-border-sm{--bs-spinner-width:1rem;--bs-spinner-height:1rem;--bs-spinner-border-width:0.2em}@keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1;transform:none}}.spinner-grow{--bs-spinner-width:2rem;--bs-spinner-height:2rem;--bs-spinner-vertical-align:-0.125em;--bs-spinner-animation-speed:0.75s;--bs-spinner-animation-name:spinner-grow;background-color:currentcolor;opacity:0}.spinner-grow-sm{--bs-spinner-width:1rem;--bs-spinner-height:1rem}@media (prefers-reduced-motion:reduce){.spinner-border,.spinner-grow{--bs-spinner-animation-speed:1.5s}}.offcanvas,.offcanvas-lg,.offcanvas-md,.offcanvas-sm,.offcanvas-xl,.offcanvas-xxl{--bs-offcanvas-zindex:1045;--bs-offcanvas-width:400px;--bs-offcanvas-height:30vh;--bs-offcanvas-padding-x:1rem;--bs-offcanvas-padding-y:1rem;--bs-offcanvas-color:var(--bs-body-color);--bs-offcanvas-bg:var(--bs-body-bg);--bs-offcanvas-border-width:var(--bs-border-width);--bs-offcanvas-border-color:var(--bs-border-color-translucent);--bs-offcanvas-box-shadow:var(--bs-box-shadow-sm);--bs-offcanvas-transition:transform 0.3s ease-in-out;--bs-offcanvas-title-line-height:1.5}@media (max-width:575.98px){.offcanvas-sm{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:575.98px) and (prefers-reduced-motion:reduce){.offcanvas-sm{transition:none}}@media (max-width:575.98px){.offcanvas-sm.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-sm.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-sm.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-sm.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-sm.show:not(.hiding),.offcanvas-sm.showing{transform:none}.offcanvas-sm.hiding,.offcanvas-sm.show,.offcanvas-sm.showing{visibility:visible}}@media (min-width:576px){.offcanvas-sm{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-sm .offcanvas-header{display:none}.offcanvas-sm .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:767.98px){.offcanvas-md{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:767.98px) and (prefers-reduced-motion:reduce){.offcanvas-md{transition:none}}@media (max-width:767.98px){.offcanvas-md.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-md.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-md.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-md.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-md.show:not(.hiding),.offcanvas-md.showing{transform:none}.offcanvas-md.hiding,.offcanvas-md.show,.offcanvas-md.showing{visibility:visible}}@media (min-width:768px){.offcanvas-md{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-md .offcanvas-header{display:none}.offcanvas-md .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:991.98px){.offcanvas-lg{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:991.98px) and (prefers-reduced-motion:reduce){.offcanvas-lg{transition:none}}@media (max-width:991.98px){.offcanvas-lg.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-lg.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-lg.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-lg.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-lg.show:not(.hiding),.offcanvas-lg.showing{transform:none}.offcanvas-lg.hiding,.offcanvas-lg.show,.offcanvas-lg.showing{visibility:visible}}@media (min-width:992px){.offcanvas-lg{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-lg .offcanvas-header{display:none}.offcanvas-lg .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:1199.98px){.offcanvas-xl{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:1199.98px) and (prefers-reduced-motion:reduce){.offcanvas-xl{transition:none}}@media (max-width:1199.98px){.offcanvas-xl.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-xl.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-xl.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-xl.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-xl.show:not(.hiding),.offcanvas-xl.showing{transform:none}.offcanvas-xl.hiding,.offcanvas-xl.show,.offcanvas-xl.showing{visibility:visible}}@media (min-width:1200px){.offcanvas-xl{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-xl .offcanvas-header{display:none}.offcanvas-xl .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:1399.98px){.offcanvas-xxl{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:1399.98px) and (prefers-reduced-motion:reduce){.offcanvas-xxl{transition:none}}@media (max-width:1399.98px){.offcanvas-xxl.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-xxl.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-xxl.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-xxl.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-xxl.show:not(.hiding),.offcanvas-xxl.showing{transform:none}.offcanvas-xxl.hiding,.offcanvas-xxl.show,.offcanvas-xxl.showing{visibility:visible}}@media (min-width:1400px){.offcanvas-xxl{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-xxl .offcanvas-header{display:none}.offcanvas-xxl .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}.offcanvas{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}@media (prefers-reduced-motion:reduce){.offcanvas{transition:none}}.offcanvas.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas.show:not(.hiding),.offcanvas.showing{transform:none}.offcanvas.hiding,.offcanvas.show,.offcanvas.showing{visibility:visible}.offcanvas-backdrop{position:fixed;top:0;left:0;z-index:1040;width:100vw;height:100vh;background-color:#000}.offcanvas-backdrop.fade{opacity:0}.offcanvas-backdrop.show{opacity:.5}.offcanvas-header{display:flex;align-items:center;padding:var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x)}.offcanvas-header .btn-close{padding:calc(var(--bs-offcanvas-padding-y) * .5) calc(var(--bs-offcanvas-padding-x) * .5);margin:calc(-.5 * var(--bs-offcanvas-padding-y)) calc(-.5 * var(--bs-offcanvas-padding-x)) calc(-.5 * var(--bs-offcanvas-padding-y)) auto}.offcanvas-title{margin-bottom:0;line-height:var(--bs-offcanvas-title-line-height)}.offcanvas-body{flex-grow:1;padding:var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x);overflow-y:auto}.placeholder{display:inline-block;min-height:1em;vertical-align:middle;cursor:wait;background-color:currentcolor;opacity:.5}.placeholder.btn::before{display:inline-block;content:\"\"}.placeholder-xs{min-height:.6em}.placeholder-sm{min-height:.8em}.placeholder-lg{min-height:1.2em}.placeholder-glow .placeholder{animation:placeholder-glow 2s ease-in-out infinite}@keyframes placeholder-glow{50%{opacity:.2}}.placeholder-wave{-webkit-mask-image:linear-gradient(130deg,#000 55%,rgba(0,0,0,0.8) 75%,#000 95%);mask-image:linear-gradient(130deg,#000 55%,rgba(0,0,0,0.8) 75%,#000 95%);-webkit-mask-size:200% 100%;mask-size:200% 100%;animation:placeholder-wave 2s linear infinite}@keyframes placeholder-wave{100%{-webkit-mask-position:-200% 0%;mask-position:-200% 0%}}.clearfix::after{display:block;clear:both;content:\"\"}.text-bg-primary{color:#fff!important;background-color:RGBA(var(--bs-primary-rgb),var(--bs-bg-opacity,1))!important}.text-bg-secondary{color:#fff!important;background-color:RGBA(var(--bs-secondary-rgb),var(--bs-bg-opacity,1))!important}.text-bg-success{color:#fff!important;background-color:RGBA(var(--bs-success-rgb),var(--bs-bg-opacity,1))!important}.text-bg-info{color:#000!important;background-color:RGBA(var(--bs-info-rgb),var(--bs-bg-opacity,1))!important}.text-bg-warning{color:#000!important;background-color:RGBA(var(--bs-warning-rgb),var(--bs-bg-opacity,1))!important}.text-bg-danger{color:#fff!important;background-color:RGBA(var(--bs-danger-rgb),var(--bs-bg-opacity,1))!important}.text-bg-light{color:#000!important;background-color:RGBA(var(--bs-light-rgb),var(--bs-bg-opacity,1))!important}.text-bg-dark{color:#fff!important;background-color:RGBA(var(--bs-dark-rgb),var(--bs-bg-opacity,1))!important}.link-primary{color:RGBA(var(--bs-primary-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-primary-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-primary-rgb),var(--bs-link-underline-opacity,1))!important}.link-primary:focus,.link-primary:hover{color:RGBA(10,88,202,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(10,88,202,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(10,88,202,var(--bs-link-underline-opacity,1))!important}.link-secondary{color:RGBA(var(--bs-secondary-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-secondary-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-secondary-rgb),var(--bs-link-underline-opacity,1))!important}.link-secondary:focus,.link-secondary:hover{color:RGBA(86,94,100,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(86,94,100,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(86,94,100,var(--bs-link-underline-opacity,1))!important}.link-success{color:RGBA(var(--bs-success-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-success-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-success-rgb),var(--bs-link-underline-opacity,1))!important}.link-success:focus,.link-success:hover{color:RGBA(20,108,67,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(20,108,67,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(20,108,67,var(--bs-link-underline-opacity,1))!important}.link-info{color:RGBA(var(--bs-info-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-info-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-info-rgb),var(--bs-link-underline-opacity,1))!important}.link-info:focus,.link-info:hover{color:RGBA(61,213,243,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(61,213,243,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(61,213,243,var(--bs-link-underline-opacity,1))!important}.link-warning{color:RGBA(var(--bs-warning-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-warning-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-warning-rgb),var(--bs-link-underline-opacity,1))!important}.link-warning:focus,.link-warning:hover{color:RGBA(255,205,57,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(255,205,57,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(255,205,57,var(--bs-link-underline-opacity,1))!important}.link-danger{color:RGBA(var(--bs-danger-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-danger-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-danger-rgb),var(--bs-link-underline-opacity,1))!important}.link-danger:focus,.link-danger:hover{color:RGBA(176,42,55,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(176,42,55,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(176,42,55,var(--bs-link-underline-opacity,1))!important}.link-light{color:RGBA(var(--bs-light-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-light-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-light-rgb),var(--bs-link-underline-opacity,1))!important}.link-light:focus,.link-light:hover{color:RGBA(249,250,251,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(249,250,251,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(249,250,251,var(--bs-link-underline-opacity,1))!important}.link-dark{color:RGBA(var(--bs-dark-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-dark-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-dark-rgb),var(--bs-link-underline-opacity,1))!important}.link-dark:focus,.link-dark:hover{color:RGBA(26,30,33,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(26,30,33,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(26,30,33,var(--bs-link-underline-opacity,1))!important}.link-body-emphasis{color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,1))!important}.link-body-emphasis:focus,.link-body-emphasis:hover{color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-opacity,.75))!important;-webkit-text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,0.75))!important;text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,0.75))!important}.focus-ring:focus{outline:0;box-shadow:var(--bs-focus-ring-x,0) var(--bs-focus-ring-y,0) var(--bs-focus-ring-blur,0) var(--bs-focus-ring-width) var(--bs-focus-ring-color)}.icon-link{display:inline-flex;gap:.375rem;align-items:center;-webkit-text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-opacity,0.5));text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-opacity,0.5));text-underline-offset:0.25em;-webkit-backface-visibility:hidden;backface-visibility:hidden}.icon-link>.bi{flex-shrink:0;width:1em;height:1em;fill:currentcolor;transition:.2s ease-in-out transform}@media (prefers-reduced-motion:reduce){.icon-link>.bi{transition:none}}.icon-link-hover:focus-visible>.bi,.icon-link-hover:hover>.bi{transform:var(--bs-icon-link-transform,translate3d(.25em,0,0))}.ratio{position:relative;width:100%}.ratio::before{display:block;padding-top:var(--bs-aspect-ratio);content:\"\"}.ratio>*{position:absolute;top:0;left:0;width:100%;height:100%}.ratio-1x1{--bs-aspect-ratio:100%}.ratio-4x3{--bs-aspect-ratio:75%}.ratio-16x9{--bs-aspect-ratio:56.25%}.ratio-21x9{--bs-aspect-ratio:42.8571428571%}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}@media (min-width:576px){.sticky-sm-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-sm-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:768px){.sticky-md-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-md-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:992px){.sticky-lg-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-lg-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:1200px){.sticky-xl-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-xl-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:1400px){.sticky-xxl-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-xxl-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}.hstack{display:flex;flex-direction:row;align-items:center;align-self:stretch}.vstack{display:flex;flex:1 1 auto;flex-direction:column;align-self:stretch}.visually-hidden,.visually-hidden-focusable:not(:focus):not(:focus-within){width:1px!important;height:1px!important;padding:0!important;margin:-1px!important;overflow:hidden!important;clip:rect(0,0,0,0)!important;white-space:nowrap!important;border:0!important}.visually-hidden-focusable:not(:focus):not(:focus-within):not(caption),.visually-hidden:not(caption){position:absolute!important}.stretched-link::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;content:\"\"}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.vr{display:inline-block;align-self:stretch;width:var(--bs-border-width);min-height:1em;background-color:currentcolor;opacity:.25}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.float-start{float:left!important}.float-end{float:right!important}.float-none{float:none!important}.object-fit-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-none{-o-object-fit:none!important;object-fit:none!important}.opacity-0{opacity:0!important}.opacity-25{opacity:.25!important}.opacity-50{opacity:.5!important}.opacity-75{opacity:.75!important}.opacity-100{opacity:1!important}.overflow-auto{overflow:auto!important}.overflow-hidden{overflow:hidden!important}.overflow-visible{overflow:visible!important}.overflow-scroll{overflow:scroll!important}.overflow-x-auto{overflow-x:auto!important}.overflow-x-hidden{overflow-x:hidden!important}.overflow-x-visible{overflow-x:visible!important}.overflow-x-scroll{overflow-x:scroll!important}.overflow-y-auto{overflow-y:auto!important}.overflow-y-hidden{overflow-y:hidden!important}.overflow-y-visible{overflow-y:visible!important}.overflow-y-scroll{overflow-y:scroll!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-grid{display:grid!important}.d-inline-grid{display:inline-grid!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:flex!important}.d-inline-flex{display:inline-flex!important}.d-none{display:none!important}.shadow{box-shadow:var(--bs-box-shadow)!important}.shadow-sm{box-shadow:var(--bs-box-shadow-sm)!important}.shadow-lg{box-shadow:var(--bs-box-shadow-lg)!important}.shadow-none{box-shadow:none!important}.focus-ring-primary{--bs-focus-ring-color:rgba(var(--bs-primary-rgb), var(--bs-focus-ring-opacity))}.focus-ring-secondary{--bs-focus-ring-color:rgba(var(--bs-secondary-rgb), var(--bs-focus-ring-opacity))}.focus-ring-success{--bs-focus-ring-color:rgba(var(--bs-success-rgb), var(--bs-focus-ring-opacity))}.focus-ring-info{--bs-focus-ring-color:rgba(var(--bs-info-rgb), var(--bs-focus-ring-opacity))}.focus-ring-warning{--bs-focus-ring-color:rgba(var(--bs-warning-rgb), var(--bs-focus-ring-opacity))}.focus-ring-danger{--bs-focus-ring-color:rgba(var(--bs-danger-rgb), var(--bs-focus-ring-opacity))}.focus-ring-light{--bs-focus-ring-color:rgba(var(--bs-light-rgb), var(--bs-focus-ring-opacity))}.focus-ring-dark{--bs-focus-ring-color:rgba(var(--bs-dark-rgb), var(--bs-focus-ring-opacity))}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:-webkit-sticky!important;position:sticky!important}.top-0{top:0!important}.top-50{top:50%!important}.top-100{top:100%!important}.bottom-0{bottom:0!important}.bottom-50{bottom:50%!important}.bottom-100{bottom:100%!important}.start-0{left:0!important}.start-50{left:50%!important}.start-100{left:100%!important}.end-0{right:0!important}.end-50{right:50%!important}.end-100{right:100%!important}.translate-middle{transform:translate(-50%,-50%)!important}.translate-middle-x{transform:translateX(-50%)!important}.translate-middle-y{transform:translateY(-50%)!important}.border{border:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-0{border:0!important}.border-top{border-top:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-top-0{border-top:0!important}.border-end{border-right:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-end-0{border-right:0!important}.border-bottom{border-bottom:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-bottom-0{border-bottom:0!important}.border-start{border-left:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-start-0{border-left:0!important}.border-primary{--bs-border-opacity:1;border-color:rgba(var(--bs-primary-rgb),var(--bs-border-opacity))!important}.border-secondary{--bs-border-opacity:1;border-color:rgba(var(--bs-secondary-rgb),var(--bs-border-opacity))!important}.border-success{--bs-border-opacity:1;border-color:rgba(var(--bs-success-rgb),var(--bs-border-opacity))!important}.border-info{--bs-border-opacity:1;border-color:rgba(var(--bs-info-rgb),var(--bs-border-opacity))!important}.border-warning{--bs-border-opacity:1;border-color:rgba(var(--bs-warning-rgb),var(--bs-border-opacity))!important}.border-danger{--bs-border-opacity:1;border-color:rgba(var(--bs-danger-rgb),var(--bs-border-opacity))!important}.border-light{--bs-border-opacity:1;border-color:rgba(var(--bs-light-rgb),var(--bs-border-opacity))!important}.border-dark{--bs-border-opacity:1;border-color:rgba(var(--bs-dark-rgb),var(--bs-border-opacity))!important}.border-black{--bs-border-opacity:1;border-color:rgba(var(--bs-black-rgb),var(--bs-border-opacity))!important}.border-white{--bs-border-opacity:1;border-color:rgba(var(--bs-white-rgb),var(--bs-border-opacity))!important}.border-primary-subtle{border-color:var(--bs-primary-border-subtle)!important}.border-secondary-subtle{border-color:var(--bs-secondary-border-subtle)!important}.border-success-subtle{border-color:var(--bs-success-border-subtle)!important}.border-info-subtle{border-color:var(--bs-info-border-subtle)!important}.border-warning-subtle{border-color:var(--bs-warning-border-subtle)!important}.border-danger-subtle{border-color:var(--bs-danger-border-subtle)!important}.border-light-subtle{border-color:var(--bs-light-border-subtle)!important}.border-dark-subtle{border-color:var(--bs-dark-border-subtle)!important}.border-1{border-width:1px!important}.border-2{border-width:2px!important}.border-3{border-width:3px!important}.border-4{border-width:4px!important}.border-5{border-width:5px!important}.border-opacity-10{--bs-border-opacity:0.1}.border-opacity-25{--bs-border-opacity:0.25}.border-opacity-50{--bs-border-opacity:0.5}.border-opacity-75{--bs-border-opacity:0.75}.border-opacity-100{--bs-border-opacity:1}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.w-auto{width:auto!important}.mw-100{max-width:100%!important}.vw-100{width:100vw!important}.min-vw-100{min-width:100vw!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.h-auto{height:auto!important}.mh-100{max-height:100%!important}.vh-100{height:100vh!important}.min-vh-100{min-height:100vh!important}.flex-fill{flex:1 1 auto!important}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-grow-0{flex-grow:0!important}.flex-grow-1{flex-grow:1!important}.flex-shrink-0{flex-shrink:0!important}.flex-shrink-1{flex-shrink:1!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.justify-content-evenly{justify-content:space-evenly!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{align-self:stretch!important}.order-first{order:-1!important}.order-0{order:0!important}.order-1{order:1!important}.order-2{order:2!important}.order-3{order:3!important}.order-4{order:4!important}.order-5{order:5!important}.order-last{order:6!important}.m-0{margin:0!important}.m-1{margin:.25rem!important}.m-2{margin:.5rem!important}.m-3{margin:1rem!important}.m-4{margin:1.5rem!important}.m-5{margin:3rem!important}.m-auto{margin:auto!important}.mx-0{margin-right:0!important;margin-left:0!important}.mx-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-3{margin-right:1rem!important;margin-left:1rem!important}.mx-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-5{margin-right:3rem!important;margin-left:3rem!important}.mx-auto{margin-right:auto!important;margin-left:auto!important}.my-0{margin-top:0!important;margin-bottom:0!important}.my-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-0{margin-top:0!important}.mt-1{margin-top:.25rem!important}.mt-2{margin-top:.5rem!important}.mt-3{margin-top:1rem!important}.mt-4{margin-top:1.5rem!important}.mt-5{margin-top:3rem!important}.mt-auto{margin-top:auto!important}.me-0{margin-right:0!important}.me-1{margin-right:.25rem!important}.me-2{margin-right:.5rem!important}.me-3{margin-right:1rem!important}.me-4{margin-right:1.5rem!important}.me-5{margin-right:3rem!important}.me-auto{margin-right:auto!important}.mb-0{margin-bottom:0!important}.mb-1{margin-bottom:.25rem!important}.mb-2{margin-bottom:.5rem!important}.mb-3{margin-bottom:1rem!important}.mb-4{margin-bottom:1.5rem!important}.mb-5{margin-bottom:3rem!important}.mb-auto{margin-bottom:auto!important}.ms-0{margin-left:0!important}.ms-1{margin-left:.25rem!important}.ms-2{margin-left:.5rem!important}.ms-3{margin-left:1rem!important}.ms-4{margin-left:1.5rem!important}.ms-5{margin-left:3rem!important}.ms-auto{margin-left:auto!important}.p-0{padding:0!important}.p-1{padding:.25rem!important}.p-2{padding:.5rem!important}.p-3{padding:1rem!important}.p-4{padding:1.5rem!important}.p-5{padding:3rem!important}.px-0{padding-right:0!important;padding-left:0!important}.px-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-3{padding-right:1rem!important;padding-left:1rem!important}.px-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-5{padding-right:3rem!important;padding-left:3rem!important}.py-0{padding-top:0!important;padding-bottom:0!important}.py-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-0{padding-top:0!important}.pt-1{padding-top:.25rem!important}.pt-2{padding-top:.5rem!important}.pt-3{padding-top:1rem!important}.pt-4{padding-top:1.5rem!important}.pt-5{padding-top:3rem!important}.pe-0{padding-right:0!important}.pe-1{padding-right:.25rem!important}.pe-2{padding-right:.5rem!important}.pe-3{padding-right:1rem!important}.pe-4{padding-right:1.5rem!important}.pe-5{padding-right:3rem!important}.pb-0{padding-bottom:0!important}.pb-1{padding-bottom:.25rem!important}.pb-2{padding-bottom:.5rem!important}.pb-3{padding-bottom:1rem!important}.pb-4{padding-bottom:1.5rem!important}.pb-5{padding-bottom:3rem!important}.ps-0{padding-left:0!important}.ps-1{padding-left:.25rem!important}.ps-2{padding-left:.5rem!important}.ps-3{padding-left:1rem!important}.ps-4{padding-left:1.5rem!important}.ps-5{padding-left:3rem!important}.gap-0{gap:0!important}.gap-1{gap:.25rem!important}.gap-2{gap:.5rem!important}.gap-3{gap:1rem!important}.gap-4{gap:1.5rem!important}.gap-5{gap:3rem!important}.row-gap-0{row-gap:0!important}.row-gap-1{row-gap:.25rem!important}.row-gap-2{row-gap:.5rem!important}.row-gap-3{row-gap:1rem!important}.row-gap-4{row-gap:1.5rem!important}.row-gap-5{row-gap:3rem!important}.column-gap-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.font-monospace{font-family:var(--bs-font-monospace)!important}.fs-1{font-size:calc(1.375rem + 1.5vw)!important}.fs-2{font-size:calc(1.325rem + .9vw)!important}.fs-3{font-size:calc(1.3rem + .6vw)!important}.fs-4{font-size:calc(1.275rem + .3vw)!important}.fs-5{font-size:1.25rem!important}.fs-6{font-size:1rem!important}.fst-italic{font-style:italic!important}.fst-normal{font-style:normal!important}.fw-lighter{font-weight:lighter!important}.fw-light{font-weight:300!important}.fw-normal{font-weight:400!important}.fw-medium{font-weight:500!important}.fw-semibold{font-weight:600!important}.fw-bold{font-weight:700!important}.fw-bolder{font-weight:bolder!important}.lh-1{line-height:1!important}.lh-sm{line-height:1.25!important}.lh-base{line-height:1.5!important}.lh-lg{line-height:2!important}.text-start{text-align:left!important}.text-end{text-align:right!important}.text-center{text-align:center!important}.text-decoration-none{text-decoration:none!important}.text-decoration-underline{text-decoration:underline!important}.text-decoration-line-through{text-decoration:line-through!important}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.text-wrap{white-space:normal!important}.text-nowrap{white-space:nowrap!important}.text-break{word-wrap:break-word!important;word-break:break-word!important}.text-primary{--bs-text-opacity:1;color:rgba(var(--bs-primary-rgb),var(--bs-text-opacity))!important}.text-secondary{--bs-text-opacity:1;color:rgba(var(--bs-secondary-rgb),var(--bs-text-opacity))!important}.text-success{--bs-text-opacity:1;color:rgba(var(--bs-success-rgb),var(--bs-text-opacity))!important}.text-info{--bs-text-opacity:1;color:rgba(var(--bs-info-rgb),var(--bs-text-opacity))!important}.text-warning{--bs-text-opacity:1;color:rgba(var(--bs-warning-rgb),var(--bs-text-opacity))!important}.text-danger{--bs-text-opacity:1;color:rgba(var(--bs-danger-rgb),var(--bs-text-opacity))!important}.text-light{--bs-text-opacity:1;color:rgba(var(--bs-light-rgb),var(--bs-text-opacity))!important}.text-dark{--bs-text-opacity:1;color:rgba(var(--bs-dark-rgb),var(--bs-text-opacity))!important}.text-black{--bs-text-opacity:1;color:rgba(var(--bs-black-rgb),var(--bs-text-opacity))!important}.text-white{--bs-text-opacity:1;color:rgba(var(--bs-white-rgb),var(--bs-text-opacity))!important}.text-body{--bs-text-opacity:1;color:rgba(var(--bs-body-color-rgb),var(--bs-text-opacity))!important}.text-muted{--bs-text-opacity:1;color:var(--bs-secondary-color)!important}.text-black-50{--bs-text-opacity:1;color:rgba(0,0,0,.5)!important}.text-white-50{--bs-text-opacity:1;color:rgba(255,255,255,.5)!important}.text-body-secondary{--bs-text-opacity:1;color:var(--bs-secondary-color)!important}.text-body-tertiary{--bs-text-opacity:1;color:var(--bs-tertiary-color)!important}.text-body-emphasis{--bs-text-opacity:1;color:var(--bs-emphasis-color)!important}.text-reset{--bs-text-opacity:1;color:inherit!important}.text-opacity-25{--bs-text-opacity:0.25}.text-opacity-50{--bs-text-opacity:0.5}.text-opacity-75{--bs-text-opacity:0.75}.text-opacity-100{--bs-text-opacity:1}.text-primary-emphasis{color:var(--bs-primary-text-emphasis)!important}.text-secondary-emphasis{color:var(--bs-secondary-text-emphasis)!important}.text-success-emphasis{color:var(--bs-success-text-emphasis)!important}.text-info-emphasis{color:var(--bs-info-text-emphasis)!important}.text-warning-emphasis{color:var(--bs-warning-text-emphasis)!important}.text-danger-emphasis{color:var(--bs-danger-text-emphasis)!important}.text-light-emphasis{color:var(--bs-light-text-emphasis)!important}.text-dark-emphasis{color:var(--bs-dark-text-emphasis)!important}.link-opacity-10{--bs-link-opacity:0.1}.link-opacity-10-hover:hover{--bs-link-opacity:0.1}.link-opacity-25{--bs-link-opacity:0.25}.link-opacity-25-hover:hover{--bs-link-opacity:0.25}.link-opacity-50{--bs-link-opacity:0.5}.link-opacity-50-hover:hover{--bs-link-opacity:0.5}.link-opacity-75{--bs-link-opacity:0.75}.link-opacity-75-hover:hover{--bs-link-opacity:0.75}.link-opacity-100{--bs-link-opacity:1}.link-opacity-100-hover:hover{--bs-link-opacity:1}.link-offset-1{text-underline-offset:0.125em!important}.link-offset-1-hover:hover{text-underline-offset:0.125em!important}.link-offset-2{text-underline-offset:0.25em!important}.link-offset-2-hover:hover{text-underline-offset:0.25em!important}.link-offset-3{text-underline-offset:0.375em!important}.link-offset-3-hover:hover{text-underline-offset:0.375em!important}.link-underline-primary{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-primary-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-primary-rgb),var(--bs-link-underline-opacity))!important}.link-underline-secondary{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-secondary-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-secondary-rgb),var(--bs-link-underline-opacity))!important}.link-underline-success{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-success-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-success-rgb),var(--bs-link-underline-opacity))!important}.link-underline-info{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-info-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-info-rgb),var(--bs-link-underline-opacity))!important}.link-underline-warning{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-warning-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-warning-rgb),var(--bs-link-underline-opacity))!important}.link-underline-danger{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-danger-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-danger-rgb),var(--bs-link-underline-opacity))!important}.link-underline-light{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-light-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-light-rgb),var(--bs-link-underline-opacity))!important}.link-underline-dark{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-dark-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-dark-rgb),var(--bs-link-underline-opacity))!important}.link-underline{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-underline-opacity,1))!important}.link-underline-opacity-0{--bs-link-underline-opacity:0}.link-underline-opacity-0-hover:hover{--bs-link-underline-opacity:0}.link-underline-opacity-10{--bs-link-underline-opacity:0.1}.link-underline-opacity-10-hover:hover{--bs-link-underline-opacity:0.1}.link-underline-opacity-25{--bs-link-underline-opacity:0.25}.link-underline-opacity-25-hover:hover{--bs-link-underline-opacity:0.25}.link-underline-opacity-50{--bs-link-underline-opacity:0.5}.link-underline-opacity-50-hover:hover{--bs-link-underline-opacity:0.5}.link-underline-opacity-75{--bs-link-underline-opacity:0.75}.link-underline-opacity-75-hover:hover{--bs-link-underline-opacity:0.75}.link-underline-opacity-100{--bs-link-underline-opacity:1}.link-underline-opacity-100-hover:hover{--bs-link-underline-opacity:1}.bg-primary{--bs-bg-opacity:1;background-color:rgba(var(--bs-primary-rgb),var(--bs-bg-opacity))!important}.bg-secondary{--bs-bg-opacity:1;background-color:rgba(var(--bs-secondary-rgb),var(--bs-bg-opacity))!important}.bg-success{--bs-bg-opacity:1;background-color:rgba(var(--bs-success-rgb),var(--bs-bg-opacity))!important}.bg-info{--bs-bg-opacity:1;background-color:rgba(var(--bs-info-rgb),var(--bs-bg-opacity))!important}.bg-warning{--bs-bg-opacity:1;background-color:rgba(var(--bs-warning-rgb),var(--bs-bg-opacity))!important}.bg-danger{--bs-bg-opacity:1;background-color:rgba(var(--bs-danger-rgb),var(--bs-bg-opacity))!important}.bg-light{--bs-bg-opacity:1;background-color:rgba(var(--bs-light-rgb),var(--bs-bg-opacity))!important}.bg-dark{--bs-bg-opacity:1;background-color:rgba(var(--bs-dark-rgb),var(--bs-bg-opacity))!important}.bg-black{--bs-bg-opacity:1;background-color:rgba(var(--bs-black-rgb),var(--bs-bg-opacity))!important}.bg-white{--bs-bg-opacity:1;background-color:rgba(var(--bs-white-rgb),var(--bs-bg-opacity))!important}.bg-body{--bs-bg-opacity:1;background-color:rgba(var(--bs-body-bg-rgb),var(--bs-bg-opacity))!important}.bg-transparent{--bs-bg-opacity:1;background-color:transparent!important}.bg-body-secondary{--bs-bg-opacity:1;background-color:rgba(var(--bs-secondary-bg-rgb),var(--bs-bg-opacity))!important}.bg-body-tertiary{--bs-bg-opacity:1;background-color:rgba(var(--bs-tertiary-bg-rgb),var(--bs-bg-opacity))!important}.bg-opacity-10{--bs-bg-opacity:0.1}.bg-opacity-25{--bs-bg-opacity:0.25}.bg-opacity-50{--bs-bg-opacity:0.5}.bg-opacity-75{--bs-bg-opacity:0.75}.bg-opacity-100{--bs-bg-opacity:1}.bg-primary-subtle{background-color:var(--bs-primary-bg-subtle)!important}.bg-secondary-subtle{background-color:var(--bs-secondary-bg-subtle)!important}.bg-success-subtle{background-color:var(--bs-success-bg-subtle)!important}.bg-info-subtle{background-color:var(--bs-info-bg-subtle)!important}.bg-warning-subtle{background-color:var(--bs-warning-bg-subtle)!important}.bg-danger-subtle{background-color:var(--bs-danger-bg-subtle)!important}.bg-light-subtle{background-color:var(--bs-light-bg-subtle)!important}.bg-dark-subtle{background-color:var(--bs-dark-bg-subtle)!important}.bg-gradient{background-image:var(--bs-gradient)!important}.user-select-all{-webkit-user-select:all!important;-moz-user-select:all!important;user-select:all!important}.user-select-auto{-webkit-user-select:auto!important;-moz-user-select:auto!important;user-select:auto!important}.user-select-none{-webkit-user-select:none!important;-moz-user-select:none!important;user-select:none!important}.pe-none{pointer-events:none!important}.pe-auto{pointer-events:auto!important}.rounded{border-radius:var(--bs-border-radius)!important}.rounded-0{border-radius:0!important}.rounded-1{border-radius:var(--bs-border-radius-sm)!important}.rounded-2{border-radius:var(--bs-border-radius)!important}.rounded-3{border-radius:var(--bs-border-radius-lg)!important}.rounded-4{border-radius:var(--bs-border-radius-xl)!important}.rounded-5{border-radius:var(--bs-border-radius-xxl)!important}.rounded-circle{border-radius:50%!important}.rounded-pill{border-radius:var(--bs-border-radius-pill)!important}.rounded-top{border-top-left-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-top-0{border-top-left-radius:0!important;border-top-right-radius:0!important}.rounded-top-1{border-top-left-radius:var(--bs-border-radius-sm)!important;border-top-right-radius:var(--bs-border-radius-sm)!important}.rounded-top-2{border-top-left-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-top-3{border-top-left-radius:var(--bs-border-radius-lg)!important;border-top-right-radius:var(--bs-border-radius-lg)!important}.rounded-top-4{border-top-left-radius:var(--bs-border-radius-xl)!important;border-top-right-radius:var(--bs-border-radius-xl)!important}.rounded-top-5{border-top-left-radius:var(--bs-border-radius-xxl)!important;border-top-right-radius:var(--bs-border-radius-xxl)!important}.rounded-top-circle{border-top-left-radius:50%!important;border-top-right-radius:50%!important}.rounded-top-pill{border-top-left-radius:var(--bs-border-radius-pill)!important;border-top-right-radius:var(--bs-border-radius-pill)!important}.rounded-end{border-top-right-radius:var(--bs-border-radius)!important;border-bottom-right-radius:var(--bs-border-radius)!important}.rounded-end-0{border-top-right-radius:0!important;border-bottom-right-radius:0!important}.rounded-end-1{border-top-right-radius:var(--bs-border-radius-sm)!important;border-bottom-right-radius:var(--bs-border-radius-sm)!important}.rounded-end-2{border-top-right-radius:var(--bs-border-radius)!important;border-bottom-right-radius:var(--bs-border-radius)!important}.rounded-end-3{border-top-right-radius:var(--bs-border-radius-lg)!important;border-bottom-right-radius:var(--bs-border-radius-lg)!important}.rounded-end-4{border-top-right-radius:var(--bs-border-radius-xl)!important;border-bottom-right-radius:var(--bs-border-radius-xl)!important}.rounded-end-5{border-top-right-radius:var(--bs-border-radius-xxl)!important;border-bottom-right-radius:var(--bs-border-radius-xxl)!important}.rounded-end-circle{border-top-right-radius:50%!important;border-bottom-right-radius:50%!important}.rounded-end-pill{border-top-right-radius:var(--bs-border-radius-pill)!important;border-bottom-right-radius:var(--bs-border-radius-pill)!important}.rounded-bottom{border-bottom-right-radius:var(--bs-border-radius)!important;border-bottom-left-radius:var(--bs-border-radius)!important}.rounded-bottom-0{border-bottom-right-radius:0!important;border-bottom-left-radius:0!important}.rounded-bottom-1{border-bottom-right-radius:var(--bs-border-radius-sm)!important;border-bottom-left-radius:var(--bs-border-radius-sm)!important}.rounded-bottom-2{border-bottom-right-radius:var(--bs-border-radius)!important;border-bottom-left-radius:var(--bs-border-radius)!important}.rounded-bottom-3{border-bottom-right-radius:var(--bs-border-radius-lg)!important;border-bottom-left-radius:var(--bs-border-radius-lg)!important}.rounded-bottom-4{border-bottom-right-radius:var(--bs-border-radius-xl)!important;border-bottom-left-radius:var(--bs-border-radius-xl)!important}.rounded-bottom-5{border-bottom-right-radius:var(--bs-border-radius-xxl)!important;border-bottom-left-radius:var(--bs-border-radius-xxl)!important}.rounded-bottom-circle{border-bottom-right-radius:50%!important;border-bottom-left-radius:50%!important}.rounded-bottom-pill{border-bottom-right-radius:var(--bs-border-radius-pill)!important;border-bottom-left-radius:var(--bs-border-radius-pill)!important}.rounded-start{border-bottom-left-radius:var(--bs-border-radius)!important;border-top-left-radius:var(--bs-border-radius)!important}.rounded-start-0{border-bottom-left-radius:0!important;border-top-left-radius:0!important}.rounded-start-1{border-bottom-left-radius:var(--bs-border-radius-sm)!important;border-top-left-radius:var(--bs-border-radius-sm)!important}.rounded-start-2{border-bottom-left-radius:var(--bs-border-radius)!important;border-top-left-radius:var(--bs-border-radius)!important}.rounded-start-3{border-bottom-left-radius:var(--bs-border-radius-lg)!important;border-top-left-radius:var(--bs-border-radius-lg)!important}.rounded-start-4{border-bottom-left-radius:var(--bs-border-radius-xl)!important;border-top-left-radius:var(--bs-border-radius-xl)!important}.rounded-start-5{border-bottom-left-radius:var(--bs-border-radius-xxl)!important;border-top-left-radius:var(--bs-border-radius-xxl)!important}.rounded-start-circle{border-bottom-left-radius:50%!important;border-top-left-radius:50%!important}.rounded-start-pill{border-bottom-left-radius:var(--bs-border-radius-pill)!important;border-top-left-radius:var(--bs-border-radius-pill)!important}.visible{visibility:visible!important}.invisible{visibility:hidden!important}.z-n1{z-index:-1!important}.z-0{z-index:0!important}.z-1{z-index:1!important}.z-2{z-index:2!important}.z-3{z-index:3!important}@media (min-width:576px){.float-sm-start{float:left!important}.float-sm-end{float:right!important}.float-sm-none{float:none!important}.object-fit-sm-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-sm-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-sm-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-sm-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-sm-none{-o-object-fit:none!important;object-fit:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-grid{display:grid!important}.d-sm-inline-grid{display:inline-grid!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:flex!important}.d-sm-inline-flex{display:inline-flex!important}.d-sm-none{display:none!important}.flex-sm-fill{flex:1 1 auto!important}.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-grow-0{flex-grow:0!important}.flex-sm-grow-1{flex-grow:1!important}.flex-sm-shrink-0{flex-shrink:0!important}.flex-sm-shrink-1{flex-shrink:1!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.justify-content-sm-evenly{justify-content:space-evenly!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{align-self:stretch!important}.order-sm-first{order:-1!important}.order-sm-0{order:0!important}.order-sm-1{order:1!important}.order-sm-2{order:2!important}.order-sm-3{order:3!important}.order-sm-4{order:4!important}.order-sm-5{order:5!important}.order-sm-last{order:6!important}.m-sm-0{margin:0!important}.m-sm-1{margin:.25rem!important}.m-sm-2{margin:.5rem!important}.m-sm-3{margin:1rem!important}.m-sm-4{margin:1.5rem!important}.m-sm-5{margin:3rem!important}.m-sm-auto{margin:auto!important}.mx-sm-0{margin-right:0!important;margin-left:0!important}.mx-sm-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-sm-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-sm-3{margin-right:1rem!important;margin-left:1rem!important}.mx-sm-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-sm-5{margin-right:3rem!important;margin-left:3rem!important}.mx-sm-auto{margin-right:auto!important;margin-left:auto!important}.my-sm-0{margin-top:0!important;margin-bottom:0!important}.my-sm-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-sm-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-sm-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-sm-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-sm-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-sm-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-sm-0{margin-top:0!important}.mt-sm-1{margin-top:.25rem!important}.mt-sm-2{margin-top:.5rem!important}.mt-sm-3{margin-top:1rem!important}.mt-sm-4{margin-top:1.5rem!important}.mt-sm-5{margin-top:3rem!important}.mt-sm-auto{margin-top:auto!important}.me-sm-0{margin-right:0!important}.me-sm-1{margin-right:.25rem!important}.me-sm-2{margin-right:.5rem!important}.me-sm-3{margin-right:1rem!important}.me-sm-4{margin-right:1.5rem!important}.me-sm-5{margin-right:3rem!important}.me-sm-auto{margin-right:auto!important}.mb-sm-0{margin-bottom:0!important}.mb-sm-1{margin-bottom:.25rem!important}.mb-sm-2{margin-bottom:.5rem!important}.mb-sm-3{margin-bottom:1rem!important}.mb-sm-4{margin-bottom:1.5rem!important}.mb-sm-5{margin-bottom:3rem!important}.mb-sm-auto{margin-bottom:auto!important}.ms-sm-0{margin-left:0!important}.ms-sm-1{margin-left:.25rem!important}.ms-sm-2{margin-left:.5rem!important}.ms-sm-3{margin-left:1rem!important}.ms-sm-4{margin-left:1.5rem!important}.ms-sm-5{margin-left:3rem!important}.ms-sm-auto{margin-left:auto!important}.p-sm-0{padding:0!important}.p-sm-1{padding:.25rem!important}.p-sm-2{padding:.5rem!important}.p-sm-3{padding:1rem!important}.p-sm-4{padding:1.5rem!important}.p-sm-5{padding:3rem!important}.px-sm-0{padding-right:0!important;padding-left:0!important}.px-sm-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-sm-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-sm-3{padding-right:1rem!important;padding-left:1rem!important}.px-sm-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-sm-5{padding-right:3rem!important;padding-left:3rem!important}.py-sm-0{padding-top:0!important;padding-bottom:0!important}.py-sm-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-sm-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-sm-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-sm-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-sm-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-sm-0{padding-top:0!important}.pt-sm-1{padding-top:.25rem!important}.pt-sm-2{padding-top:.5rem!important}.pt-sm-3{padding-top:1rem!important}.pt-sm-4{padding-top:1.5rem!important}.pt-sm-5{padding-top:3rem!important}.pe-sm-0{padding-right:0!important}.pe-sm-1{padding-right:.25rem!important}.pe-sm-2{padding-right:.5rem!important}.pe-sm-3{padding-right:1rem!important}.pe-sm-4{padding-right:1.5rem!important}.pe-sm-5{padding-right:3rem!important}.pb-sm-0{padding-bottom:0!important}.pb-sm-1{padding-bottom:.25rem!important}.pb-sm-2{padding-bottom:.5rem!important}.pb-sm-3{padding-bottom:1rem!important}.pb-sm-4{padding-bottom:1.5rem!important}.pb-sm-5{padding-bottom:3rem!important}.ps-sm-0{padding-left:0!important}.ps-sm-1{padding-left:.25rem!important}.ps-sm-2{padding-left:.5rem!important}.ps-sm-3{padding-left:1rem!important}.ps-sm-4{padding-left:1.5rem!important}.ps-sm-5{padding-left:3rem!important}.gap-sm-0{gap:0!important}.gap-sm-1{gap:.25rem!important}.gap-sm-2{gap:.5rem!important}.gap-sm-3{gap:1rem!important}.gap-sm-4{gap:1.5rem!important}.gap-sm-5{gap:3rem!important}.row-gap-sm-0{row-gap:0!important}.row-gap-sm-1{row-gap:.25rem!important}.row-gap-sm-2{row-gap:.5rem!important}.row-gap-sm-3{row-gap:1rem!important}.row-gap-sm-4{row-gap:1.5rem!important}.row-gap-sm-5{row-gap:3rem!important}.column-gap-sm-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-sm-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-sm-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-sm-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-sm-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-sm-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-sm-start{text-align:left!important}.text-sm-end{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.float-md-start{float:left!important}.float-md-end{float:right!important}.float-md-none{float:none!important}.object-fit-md-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-md-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-md-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-md-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-md-none{-o-object-fit:none!important;object-fit:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-grid{display:grid!important}.d-md-inline-grid{display:inline-grid!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:flex!important}.d-md-inline-flex{display:inline-flex!important}.d-md-none{display:none!important}.flex-md-fill{flex:1 1 auto!important}.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-grow-0{flex-grow:0!important}.flex-md-grow-1{flex-grow:1!important}.flex-md-shrink-0{flex-shrink:0!important}.flex-md-shrink-1{flex-shrink:1!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.justify-content-md-evenly{justify-content:space-evenly!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{align-self:stretch!important}.order-md-first{order:-1!important}.order-md-0{order:0!important}.order-md-1{order:1!important}.order-md-2{order:2!important}.order-md-3{order:3!important}.order-md-4{order:4!important}.order-md-5{order:5!important}.order-md-last{order:6!important}.m-md-0{margin:0!important}.m-md-1{margin:.25rem!important}.m-md-2{margin:.5rem!important}.m-md-3{margin:1rem!important}.m-md-4{margin:1.5rem!important}.m-md-5{margin:3rem!important}.m-md-auto{margin:auto!important}.mx-md-0{margin-right:0!important;margin-left:0!important}.mx-md-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-md-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-md-3{margin-right:1rem!important;margin-left:1rem!important}.mx-md-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-md-5{margin-right:3rem!important;margin-left:3rem!important}.mx-md-auto{margin-right:auto!important;margin-left:auto!important}.my-md-0{margin-top:0!important;margin-bottom:0!important}.my-md-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-md-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-md-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-md-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-md-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-md-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-md-0{margin-top:0!important}.mt-md-1{margin-top:.25rem!important}.mt-md-2{margin-top:.5rem!important}.mt-md-3{margin-top:1rem!important}.mt-md-4{margin-top:1.5rem!important}.mt-md-5{margin-top:3rem!important}.mt-md-auto{margin-top:auto!important}.me-md-0{margin-right:0!important}.me-md-1{margin-right:.25rem!important}.me-md-2{margin-right:.5rem!important}.me-md-3{margin-right:1rem!important}.me-md-4{margin-right:1.5rem!important}.me-md-5{margin-right:3rem!important}.me-md-auto{margin-right:auto!important}.mb-md-0{margin-bottom:0!important}.mb-md-1{margin-bottom:.25rem!important}.mb-md-2{margin-bottom:.5rem!important}.mb-md-3{margin-bottom:1rem!important}.mb-md-4{margin-bottom:1.5rem!important}.mb-md-5{margin-bottom:3rem!important}.mb-md-auto{margin-bottom:auto!important}.ms-md-0{margin-left:0!important}.ms-md-1{margin-left:.25rem!important}.ms-md-2{margin-left:.5rem!important}.ms-md-3{margin-left:1rem!important}.ms-md-4{margin-left:1.5rem!important}.ms-md-5{margin-left:3rem!important}.ms-md-auto{margin-left:auto!important}.p-md-0{padding:0!important}.p-md-1{padding:.25rem!important}.p-md-2{padding:.5rem!important}.p-md-3{padding:1rem!important}.p-md-4{padding:1.5rem!important}.p-md-5{padding:3rem!important}.px-md-0{padding-right:0!important;padding-left:0!important}.px-md-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-md-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-md-3{padding-right:1rem!important;padding-left:1rem!important}.px-md-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-md-5{padding-right:3rem!important;padding-left:3rem!important}.py-md-0{padding-top:0!important;padding-bottom:0!important}.py-md-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-md-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-md-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-md-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-md-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-md-0{padding-top:0!important}.pt-md-1{padding-top:.25rem!important}.pt-md-2{padding-top:.5rem!important}.pt-md-3{padding-top:1rem!important}.pt-md-4{padding-top:1.5rem!important}.pt-md-5{padding-top:3rem!important}.pe-md-0{padding-right:0!important}.pe-md-1{padding-right:.25rem!important}.pe-md-2{padding-right:.5rem!important}.pe-md-3{padding-right:1rem!important}.pe-md-4{padding-right:1.5rem!important}.pe-md-5{padding-right:3rem!important}.pb-md-0{padding-bottom:0!important}.pb-md-1{padding-bottom:.25rem!important}.pb-md-2{padding-bottom:.5rem!important}.pb-md-3{padding-bottom:1rem!important}.pb-md-4{padding-bottom:1.5rem!important}.pb-md-5{padding-bottom:3rem!important}.ps-md-0{padding-left:0!important}.ps-md-1{padding-left:.25rem!important}.ps-md-2{padding-left:.5rem!important}.ps-md-3{padding-left:1rem!important}.ps-md-4{padding-left:1.5rem!important}.ps-md-5{padding-left:3rem!important}.gap-md-0{gap:0!important}.gap-md-1{gap:.25rem!important}.gap-md-2{gap:.5rem!important}.gap-md-3{gap:1rem!important}.gap-md-4{gap:1.5rem!important}.gap-md-5{gap:3rem!important}.row-gap-md-0{row-gap:0!important}.row-gap-md-1{row-gap:.25rem!important}.row-gap-md-2{row-gap:.5rem!important}.row-gap-md-3{row-gap:1rem!important}.row-gap-md-4{row-gap:1.5rem!important}.row-gap-md-5{row-gap:3rem!important}.column-gap-md-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-md-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-md-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-md-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-md-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-md-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-md-start{text-align:left!important}.text-md-end{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.float-lg-start{float:left!important}.float-lg-end{float:right!important}.float-lg-none{float:none!important}.object-fit-lg-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-lg-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-lg-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-lg-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-lg-none{-o-object-fit:none!important;object-fit:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-grid{display:grid!important}.d-lg-inline-grid{display:inline-grid!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:flex!important}.d-lg-inline-flex{display:inline-flex!important}.d-lg-none{display:none!important}.flex-lg-fill{flex:1 1 auto!important}.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-grow-0{flex-grow:0!important}.flex-lg-grow-1{flex-grow:1!important}.flex-lg-shrink-0{flex-shrink:0!important}.flex-lg-shrink-1{flex-shrink:1!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.justify-content-lg-evenly{justify-content:space-evenly!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{align-self:stretch!important}.order-lg-first{order:-1!important}.order-lg-0{order:0!important}.order-lg-1{order:1!important}.order-lg-2{order:2!important}.order-lg-3{order:3!important}.order-lg-4{order:4!important}.order-lg-5{order:5!important}.order-lg-last{order:6!important}.m-lg-0{margin:0!important}.m-lg-1{margin:.25rem!important}.m-lg-2{margin:.5rem!important}.m-lg-3{margin:1rem!important}.m-lg-4{margin:1.5rem!important}.m-lg-5{margin:3rem!important}.m-lg-auto{margin:auto!important}.mx-lg-0{margin-right:0!important;margin-left:0!important}.mx-lg-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-lg-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-lg-3{margin-right:1rem!important;margin-left:1rem!important}.mx-lg-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-lg-5{margin-right:3rem!important;margin-left:3rem!important}.mx-lg-auto{margin-right:auto!important;margin-left:auto!important}.my-lg-0{margin-top:0!important;margin-bottom:0!important}.my-lg-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-lg-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-lg-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-lg-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-lg-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-lg-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-lg-0{margin-top:0!important}.mt-lg-1{margin-top:.25rem!important}.mt-lg-2{margin-top:.5rem!important}.mt-lg-3{margin-top:1rem!important}.mt-lg-4{margin-top:1.5rem!important}.mt-lg-5{margin-top:3rem!important}.mt-lg-auto{margin-top:auto!important}.me-lg-0{margin-right:0!important}.me-lg-1{margin-right:.25rem!important}.me-lg-2{margin-right:.5rem!important}.me-lg-3{margin-right:1rem!important}.me-lg-4{margin-right:1.5rem!important}.me-lg-5{margin-right:3rem!important}.me-lg-auto{margin-right:auto!important}.mb-lg-0{margin-bottom:0!important}.mb-lg-1{margin-bottom:.25rem!important}.mb-lg-2{margin-bottom:.5rem!important}.mb-lg-3{margin-bottom:1rem!important}.mb-lg-4{margin-bottom:1.5rem!important}.mb-lg-5{margin-bottom:3rem!important}.mb-lg-auto{margin-bottom:auto!important}.ms-lg-0{margin-left:0!important}.ms-lg-1{margin-left:.25rem!important}.ms-lg-2{margin-left:.5rem!important}.ms-lg-3{margin-left:1rem!important}.ms-lg-4{margin-left:1.5rem!important}.ms-lg-5{margin-left:3rem!important}.ms-lg-auto{margin-left:auto!important}.p-lg-0{padding:0!important}.p-lg-1{padding:.25rem!important}.p-lg-2{padding:.5rem!important}.p-lg-3{padding:1rem!important}.p-lg-4{padding:1.5rem!important}.p-lg-5{padding:3rem!important}.px-lg-0{padding-right:0!important;padding-left:0!important}.px-lg-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-lg-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-lg-3{padding-right:1rem!important;padding-left:1rem!important}.px-lg-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-lg-5{padding-right:3rem!important;padding-left:3rem!important}.py-lg-0{padding-top:0!important;padding-bottom:0!important}.py-lg-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-lg-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-lg-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-lg-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-lg-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-lg-0{padding-top:0!important}.pt-lg-1{padding-top:.25rem!important}.pt-lg-2{padding-top:.5rem!important}.pt-lg-3{padding-top:1rem!important}.pt-lg-4{padding-top:1.5rem!important}.pt-lg-5{padding-top:3rem!important}.pe-lg-0{padding-right:0!important}.pe-lg-1{padding-right:.25rem!important}.pe-lg-2{padding-right:.5rem!important}.pe-lg-3{padding-right:1rem!important}.pe-lg-4{padding-right:1.5rem!important}.pe-lg-5{padding-right:3rem!important}.pb-lg-0{padding-bottom:0!important}.pb-lg-1{padding-bottom:.25rem!important}.pb-lg-2{padding-bottom:.5rem!important}.pb-lg-3{padding-bottom:1rem!important}.pb-lg-4{padding-bottom:1.5rem!important}.pb-lg-5{padding-bottom:3rem!important}.ps-lg-0{padding-left:0!important}.ps-lg-1{padding-left:.25rem!important}.ps-lg-2{padding-left:.5rem!important}.ps-lg-3{padding-left:1rem!important}.ps-lg-4{padding-left:1.5rem!important}.ps-lg-5{padding-left:3rem!important}.gap-lg-0{gap:0!important}.gap-lg-1{gap:.25rem!important}.gap-lg-2{gap:.5rem!important}.gap-lg-3{gap:1rem!important}.gap-lg-4{gap:1.5rem!important}.gap-lg-5{gap:3rem!important}.row-gap-lg-0{row-gap:0!important}.row-gap-lg-1{row-gap:.25rem!important}.row-gap-lg-2{row-gap:.5rem!important}.row-gap-lg-3{row-gap:1rem!important}.row-gap-lg-4{row-gap:1.5rem!important}.row-gap-lg-5{row-gap:3rem!important}.column-gap-lg-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-lg-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-lg-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-lg-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-lg-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-lg-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-lg-start{text-align:left!important}.text-lg-end{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.float-xl-start{float:left!important}.float-xl-end{float:right!important}.float-xl-none{float:none!important}.object-fit-xl-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-xl-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-xl-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-xl-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-xl-none{-o-object-fit:none!important;object-fit:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-grid{display:grid!important}.d-xl-inline-grid{display:inline-grid!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:flex!important}.d-xl-inline-flex{display:inline-flex!important}.d-xl-none{display:none!important}.flex-xl-fill{flex:1 1 auto!important}.flex-xl-row{flex-direction:row!important}.flex-xl-column{flex-direction:column!important}.flex-xl-row-reverse{flex-direction:row-reverse!important}.flex-xl-column-reverse{flex-direction:column-reverse!important}.flex-xl-grow-0{flex-grow:0!important}.flex-xl-grow-1{flex-grow:1!important}.flex-xl-shrink-0{flex-shrink:0!important}.flex-xl-shrink-1{flex-shrink:1!important}.flex-xl-wrap{flex-wrap:wrap!important}.flex-xl-nowrap{flex-wrap:nowrap!important}.flex-xl-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xl-start{justify-content:flex-start!important}.justify-content-xl-end{justify-content:flex-end!important}.justify-content-xl-center{justify-content:center!important}.justify-content-xl-between{justify-content:space-between!important}.justify-content-xl-around{justify-content:space-around!important}.justify-content-xl-evenly{justify-content:space-evenly!important}.align-items-xl-start{align-items:flex-start!important}.align-items-xl-end{align-items:flex-end!important}.align-items-xl-center{align-items:center!important}.align-items-xl-baseline{align-items:baseline!important}.align-items-xl-stretch{align-items:stretch!important}.align-content-xl-start{align-content:flex-start!important}.align-content-xl-end{align-content:flex-end!important}.align-content-xl-center{align-content:center!important}.align-content-xl-between{align-content:space-between!important}.align-content-xl-around{align-content:space-around!important}.align-content-xl-stretch{align-content:stretch!important}.align-self-xl-auto{align-self:auto!important}.align-self-xl-start{align-self:flex-start!important}.align-self-xl-end{align-self:flex-end!important}.align-self-xl-center{align-self:center!important}.align-self-xl-baseline{align-self:baseline!important}.align-self-xl-stretch{align-self:stretch!important}.order-xl-first{order:-1!important}.order-xl-0{order:0!important}.order-xl-1{order:1!important}.order-xl-2{order:2!important}.order-xl-3{order:3!important}.order-xl-4{order:4!important}.order-xl-5{order:5!important}.order-xl-last{order:6!important}.m-xl-0{margin:0!important}.m-xl-1{margin:.25rem!important}.m-xl-2{margin:.5rem!important}.m-xl-3{margin:1rem!important}.m-xl-4{margin:1.5rem!important}.m-xl-5{margin:3rem!important}.m-xl-auto{margin:auto!important}.mx-xl-0{margin-right:0!important;margin-left:0!important}.mx-xl-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-xl-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-xl-3{margin-right:1rem!important;margin-left:1rem!important}.mx-xl-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-xl-5{margin-right:3rem!important;margin-left:3rem!important}.mx-xl-auto{margin-right:auto!important;margin-left:auto!important}.my-xl-0{margin-top:0!important;margin-bottom:0!important}.my-xl-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-xl-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-xl-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-xl-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-xl-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-xl-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-xl-0{margin-top:0!important}.mt-xl-1{margin-top:.25rem!important}.mt-xl-2{margin-top:.5rem!important}.mt-xl-3{margin-top:1rem!important}.mt-xl-4{margin-top:1.5rem!important}.mt-xl-5{margin-top:3rem!important}.mt-xl-auto{margin-top:auto!important}.me-xl-0{margin-right:0!important}.me-xl-1{margin-right:.25rem!important}.me-xl-2{margin-right:.5rem!important}.me-xl-3{margin-right:1rem!important}.me-xl-4{margin-right:1.5rem!important}.me-xl-5{margin-right:3rem!important}.me-xl-auto{margin-right:auto!important}.mb-xl-0{margin-bottom:0!important}.mb-xl-1{margin-bottom:.25rem!important}.mb-xl-2{margin-bottom:.5rem!important}.mb-xl-3{margin-bottom:1rem!important}.mb-xl-4{margin-bottom:1.5rem!important}.mb-xl-5{margin-bottom:3rem!important}.mb-xl-auto{margin-bottom:auto!important}.ms-xl-0{margin-left:0!important}.ms-xl-1{margin-left:.25rem!important}.ms-xl-2{margin-left:.5rem!important}.ms-xl-3{margin-left:1rem!important}.ms-xl-4{margin-left:1.5rem!important}.ms-xl-5{margin-left:3rem!important}.ms-xl-auto{margin-left:auto!important}.p-xl-0{padding:0!important}.p-xl-1{padding:.25rem!important}.p-xl-2{padding:.5rem!important}.p-xl-3{padding:1rem!important}.p-xl-4{padding:1.5rem!important}.p-xl-5{padding:3rem!important}.px-xl-0{padding-right:0!important;padding-left:0!important}.px-xl-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-xl-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-xl-3{padding-right:1rem!important;padding-left:1rem!important}.px-xl-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-xl-5{padding-right:3rem!important;padding-left:3rem!important}.py-xl-0{padding-top:0!important;padding-bottom:0!important}.py-xl-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-xl-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-xl-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-xl-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-xl-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-xl-0{padding-top:0!important}.pt-xl-1{padding-top:.25rem!important}.pt-xl-2{padding-top:.5rem!important}.pt-xl-3{padding-top:1rem!important}.pt-xl-4{padding-top:1.5rem!important}.pt-xl-5{padding-top:3rem!important}.pe-xl-0{padding-right:0!important}.pe-xl-1{padding-right:.25rem!important}.pe-xl-2{padding-right:.5rem!important}.pe-xl-3{padding-right:1rem!important}.pe-xl-4{padding-right:1.5rem!important}.pe-xl-5{padding-right:3rem!important}.pb-xl-0{padding-bottom:0!important}.pb-xl-1{padding-bottom:.25rem!important}.pb-xl-2{padding-bottom:.5rem!important}.pb-xl-3{padding-bottom:1rem!important}.pb-xl-4{padding-bottom:1.5rem!important}.pb-xl-5{padding-bottom:3rem!important}.ps-xl-0{padding-left:0!important}.ps-xl-1{padding-left:.25rem!important}.ps-xl-2{padding-left:.5rem!important}.ps-xl-3{padding-left:1rem!important}.ps-xl-4{padding-left:1.5rem!important}.ps-xl-5{padding-left:3rem!important}.gap-xl-0{gap:0!important}.gap-xl-1{gap:.25rem!important}.gap-xl-2{gap:.5rem!important}.gap-xl-3{gap:1rem!important}.gap-xl-4{gap:1.5rem!important}.gap-xl-5{gap:3rem!important}.row-gap-xl-0{row-gap:0!important}.row-gap-xl-1{row-gap:.25rem!important}.row-gap-xl-2{row-gap:.5rem!important}.row-gap-xl-3{row-gap:1rem!important}.row-gap-xl-4{row-gap:1.5rem!important}.row-gap-xl-5{row-gap:3rem!important}.column-gap-xl-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-xl-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-xl-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-xl-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-xl-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-xl-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-xl-start{text-align:left!important}.text-xl-end{text-align:right!important}.text-xl-center{text-align:center!important}}@media (min-width:1400px){.float-xxl-start{float:left!important}.float-xxl-end{float:right!important}.float-xxl-none{float:none!important}.object-fit-xxl-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-xxl-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-xxl-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-xxl-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-xxl-none{-o-object-fit:none!important;object-fit:none!important}.d-xxl-inline{display:inline!important}.d-xxl-inline-block{display:inline-block!important}.d-xxl-block{display:block!important}.d-xxl-grid{display:grid!important}.d-xxl-inline-grid{display:inline-grid!important}.d-xxl-table{display:table!important}.d-xxl-table-row{display:table-row!important}.d-xxl-table-cell{display:table-cell!important}.d-xxl-flex{display:flex!important}.d-xxl-inline-flex{display:inline-flex!important}.d-xxl-none{display:none!important}.flex-xxl-fill{flex:1 1 auto!important}.flex-xxl-row{flex-direction:row!important}.flex-xxl-column{flex-direction:column!important}.flex-xxl-row-reverse{flex-direction:row-reverse!important}.flex-xxl-column-reverse{flex-direction:column-reverse!important}.flex-xxl-grow-0{flex-grow:0!important}.flex-xxl-grow-1{flex-grow:1!important}.flex-xxl-shrink-0{flex-shrink:0!important}.flex-xxl-shrink-1{flex-shrink:1!important}.flex-xxl-wrap{flex-wrap:wrap!important}.flex-xxl-nowrap{flex-wrap:nowrap!important}.flex-xxl-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xxl-start{justify-content:flex-start!important}.justify-content-xxl-end{justify-content:flex-end!important}.justify-content-xxl-center{justify-content:center!important}.justify-content-xxl-between{justify-content:space-between!important}.justify-content-xxl-around{justify-content:space-around!important}.justify-content-xxl-evenly{justify-content:space-evenly!important}.align-items-xxl-start{align-items:flex-start!important}.align-items-xxl-end{align-items:flex-end!important}.align-items-xxl-center{align-items:center!important}.align-items-xxl-baseline{align-items:baseline!important}.align-items-xxl-stretch{align-items:stretch!important}.align-content-xxl-start{align-content:flex-start!important}.align-content-xxl-end{align-content:flex-end!important}.align-content-xxl-center{align-content:center!important}.align-content-xxl-between{align-content:space-between!important}.align-content-xxl-around{align-content:space-around!important}.align-content-xxl-stretch{align-content:stretch!important}.align-self-xxl-auto{align-self:auto!important}.align-self-xxl-start{align-self:flex-start!important}.align-self-xxl-end{align-self:flex-end!important}.align-self-xxl-center{align-self:center!important}.align-self-xxl-baseline{align-self:baseline!important}.align-self-xxl-stretch{align-self:stretch!important}.order-xxl-first{order:-1!important}.order-xxl-0{order:0!important}.order-xxl-1{order:1!important}.order-xxl-2{order:2!important}.order-xxl-3{order:3!important}.order-xxl-4{order:4!important}.order-xxl-5{order:5!important}.order-xxl-last{order:6!important}.m-xxl-0{margin:0!important}.m-xxl-1{margin:.25rem!important}.m-xxl-2{margin:.5rem!important}.m-xxl-3{margin:1rem!important}.m-xxl-4{margin:1.5rem!important}.m-xxl-5{margin:3rem!important}.m-xxl-auto{margin:auto!important}.mx-xxl-0{margin-right:0!important;margin-left:0!important}.mx-xxl-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-xxl-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-xxl-3{margin-right:1rem!important;margin-left:1rem!important}.mx-xxl-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-xxl-5{margin-right:3rem!important;margin-left:3rem!important}.mx-xxl-auto{margin-right:auto!important;margin-left:auto!important}.my-xxl-0{margin-top:0!important;margin-bottom:0!important}.my-xxl-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-xxl-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-xxl-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-xxl-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-xxl-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-xxl-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-xxl-0{margin-top:0!important}.mt-xxl-1{margin-top:.25rem!important}.mt-xxl-2{margin-top:.5rem!important}.mt-xxl-3{margin-top:1rem!important}.mt-xxl-4{margin-top:1.5rem!important}.mt-xxl-5{margin-top:3rem!important}.mt-xxl-auto{margin-top:auto!important}.me-xxl-0{margin-right:0!important}.me-xxl-1{margin-right:.25rem!important}.me-xxl-2{margin-right:.5rem!important}.me-xxl-3{margin-right:1rem!important}.me-xxl-4{margin-right:1.5rem!important}.me-xxl-5{margin-right:3rem!important}.me-xxl-auto{margin-right:auto!important}.mb-xxl-0{margin-bottom:0!important}.mb-xxl-1{margin-bottom:.25rem!important}.mb-xxl-2{margin-bottom:.5rem!important}.mb-xxl-3{margin-bottom:1rem!important}.mb-xxl-4{margin-bottom:1.5rem!important}.mb-xxl-5{margin-bottom:3rem!important}.mb-xxl-auto{margin-bottom:auto!important}.ms-xxl-0{margin-left:0!important}.ms-xxl-1{margin-left:.25rem!important}.ms-xxl-2{margin-left:.5rem!important}.ms-xxl-3{margin-left:1rem!important}.ms-xxl-4{margin-left:1.5rem!important}.ms-xxl-5{margin-left:3rem!important}.ms-xxl-auto{margin-left:auto!important}.p-xxl-0{padding:0!important}.p-xxl-1{padding:.25rem!important}.p-xxl-2{padding:.5rem!important}.p-xxl-3{padding:1rem!important}.p-xxl-4{padding:1.5rem!important}.p-xxl-5{padding:3rem!important}.px-xxl-0{padding-right:0!important;padding-left:0!important}.px-xxl-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-xxl-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-xxl-3{padding-right:1rem!important;padding-left:1rem!important}.px-xxl-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-xxl-5{padding-right:3rem!important;padding-left:3rem!important}.py-xxl-0{padding-top:0!important;padding-bottom:0!important}.py-xxl-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-xxl-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-xxl-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-xxl-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-xxl-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-xxl-0{padding-top:0!important}.pt-xxl-1{padding-top:.25rem!important}.pt-xxl-2{padding-top:.5rem!important}.pt-xxl-3{padding-top:1rem!important}.pt-xxl-4{padding-top:1.5rem!important}.pt-xxl-5{padding-top:3rem!important}.pe-xxl-0{padding-right:0!important}.pe-xxl-1{padding-right:.25rem!important}.pe-xxl-2{padding-right:.5rem!important}.pe-xxl-3{padding-right:1rem!important}.pe-xxl-4{padding-right:1.5rem!important}.pe-xxl-5{padding-right:3rem!important}.pb-xxl-0{padding-bottom:0!important}.pb-xxl-1{padding-bottom:.25rem!important}.pb-xxl-2{padding-bottom:.5rem!important}.pb-xxl-3{padding-bottom:1rem!important}.pb-xxl-4{padding-bottom:1.5rem!important}.pb-xxl-5{padding-bottom:3rem!important}.ps-xxl-0{padding-left:0!important}.ps-xxl-1{padding-left:.25rem!important}.ps-xxl-2{padding-left:.5rem!important}.ps-xxl-3{padding-left:1rem!important}.ps-xxl-4{padding-left:1.5rem!important}.ps-xxl-5{padding-left:3rem!important}.gap-xxl-0{gap:0!important}.gap-xxl-1{gap:.25rem!important}.gap-xxl-2{gap:.5rem!important}.gap-xxl-3{gap:1rem!important}.gap-xxl-4{gap:1.5rem!important}.gap-xxl-5{gap:3rem!important}.row-gap-xxl-0{row-gap:0!important}.row-gap-xxl-1{row-gap:.25rem!important}.row-gap-xxl-2{row-gap:.5rem!important}.row-gap-xxl-3{row-gap:1rem!important}.row-gap-xxl-4{row-gap:1.5rem!important}.row-gap-xxl-5{row-gap:3rem!important}.column-gap-xxl-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-xxl-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-xxl-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-xxl-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-xxl-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-xxl-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-xxl-start{text-align:left!important}.text-xxl-end{text-align:right!important}.text-xxl-center{text-align:center!important}}@media (min-width:1200px){.fs-1{font-size:2.5rem!important}.fs-2{font-size:2rem!important}.fs-3{font-size:1.75rem!important}.fs-4{font-size:1.5rem!important}}@media print{.d-print-inline{display:inline!important}.d-print-inline-block{display:inline-block!important}.d-print-block{display:block!important}.d-print-grid{display:grid!important}.d-print-inline-grid{display:inline-grid!important}.d-print-table{display:table!important}.d-print-table-row{display:table-row!important}.d-print-table-cell{display:table-cell!important}.d-print-flex{display:flex!important}.d-print-inline-flex{display:inline-flex!important}.d-print-none{display:none!important}}\n/*# sourceMappingURL=bootstrap.min.css.map */"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:04.497Z",
        "time": 49.49299996951595,
        "timings": {
          "blocked": 40.09599997357279,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.5339999713674186,
          "receive": 8.86300002457574,
          "_blocked_queueing": 36.67399997357279,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
          "lineNumber": 13
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo"
            },
            {
              "name": "v",
              "value": "_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "cache-control",
              "value": "public,max-age=604800"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "etag",
              "value": "\"1dad33bfce063ed\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 13:19:44 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript"
            },
            {
              "name": "last-modified",
              "value": "Thu, 11 Jul 2024 02:42:36 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 87533,
            "mimeType": "text/javascript",
            "text": "/*! jQuery v3.7.1 | (c) OpenJS Foundation and other contributors | jquery.org/license */\n!function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(ie,e){\"use strict\";var oe=[],r=Object.getPrototypeOf,ae=oe.slice,g=oe.flat?function(e){return oe.flat.call(e)}:function(e){return oe.concat.apply([],e)},s=oe.push,se=oe.indexOf,n={},i=n.toString,ue=n.hasOwnProperty,o=ue.toString,a=o.call(Object),le={},v=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},y=function(e){return null!=e&&e===e.window},C=ie.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function m(e,t,n){var r,i,o=(n=n||C).createElement(\"script\");if(o.text=e,t)for(r in u)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[i.call(e)]||\"object\":typeof e}var t=\"3.7.1\",l=/HTML$/i,ce=function(e,t){return new ce.fn.init(e,t)};function c(e){var t=!!e&&\"length\"in e&&e.length,n=x(e);return!v(e)&&!y(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0<t&&t-1 in e)}function fe(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}ce.fn=ce.prototype={jquery:t,constructor:ce,length:0,toArray:function(){return ae.call(this)},get:function(e){return null==e?ae.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=ce.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ce.each(this,e)},map:function(n){return this.pushStack(ce.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(ae.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(ce.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(ce.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:oe.sort,splice:oe.splice},ce.extend=ce.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\"boolean\"==typeof a&&(l=a,a=arguments[s]||{},s++),\"object\"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(l&&r&&(ce.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||ce.isPlainObject(n)?n:{},i=!1,a[t]=ce.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},ce.extend({expando:\"jQuery\"+(t+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==i.call(e))&&(!(t=r(e))||\"function\"==typeof(n=ue.call(t,\"constructor\")&&t.constructor)&&o.call(n)===a)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){m(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(c(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},text:function(e){var t,n=\"\",r=0,i=e.nodeType;if(!i)while(t=e[r++])n+=ce.text(t);return 1===i||11===i?e.textContent:9===i?e.documentElement.textContent:3===i||4===i?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(c(Object(e))?ce.merge(n,\"string\"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!l.test(t||n&&n.nodeName||\"HTML\")},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(c(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g(a)},guid:1,support:le}),\"function\"==typeof Symbol&&(ce.fn[Symbol.iterator]=oe[Symbol.iterator]),ce.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){n[\"[object \"+t+\"]\"]=t.toLowerCase()});var pe=oe.pop,de=oe.sort,he=oe.splice,ge=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",ve=new RegExp(\"^\"+ge+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+ge+\"+$\",\"g\");ce.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var f=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;function p(e,t){return t?\"\\0\"===e?\"\\ufffd\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e}ce.escapeSelector=function(e){return(e+\"\").replace(f,p)};var ye=C,me=s;!function(){var e,b,w,o,a,T,r,C,d,i,k=me,S=ce.expando,E=0,n=0,s=W(),c=W(),u=W(),h=W(),l=function(e,t){return e===t&&(a=!0),0},f=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",t=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+ge+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",p=\"\\\\[\"+ge+\"*(\"+t+\")(?:\"+ge+\"*([*^$|!~]?=)\"+ge+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+t+\"))|)\"+ge+\"*\\\\]\",g=\":(\"+t+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+p+\")*)|.*)\\\\)|)\",v=new RegExp(ge+\"+\",\"g\"),y=new RegExp(\"^\"+ge+\"*,\"+ge+\"*\"),m=new RegExp(\"^\"+ge+\"*([>+~]|\"+ge+\")\"+ge+\"*\"),x=new RegExp(ge+\"|>\"),j=new RegExp(g),A=new RegExp(\"^\"+t+\"$\"),D={ID:new RegExp(\"^#(\"+t+\")\"),CLASS:new RegExp(\"^\\\\.(\"+t+\")\"),TAG:new RegExp(\"^(\"+t+\"|[*])\"),ATTR:new RegExp(\"^\"+p),PSEUDO:new RegExp(\"^\"+g),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+ge+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+ge+\"*(?:([+-]|)\"+ge+\"*(\\\\d+)|))\"+ge+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+f+\")$\",\"i\"),needsContext:new RegExp(\"^\"+ge+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+ge+\"*((?:-\\\\d)?\\\\d*)\"+ge+\"*\\\\)|)(?=[^-]|$)\",\"i\")},N=/^(?:input|select|textarea|button)$/i,q=/^h\\d$/i,L=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,H=/[+~]/,O=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+ge+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),P=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},M=function(){V()},R=J(function(e){return!0===e.disabled&&fe(e,\"fieldset\")},{dir:\"parentNode\",next:\"legend\"});try{k.apply(oe=ae.call(ye.childNodes),ye.childNodes),oe[ye.childNodes.length].nodeType}catch(e){k={apply:function(e,t){me.apply(e,ae.call(t))},call:function(e){me.apply(e,ae.call(arguments,1))}}}function I(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],\"string\"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&(V(e),e=e||T,C)){if(11!==p&&(u=L.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return k.call(n,a),n}else if(f&&(a=f.getElementById(i))&&I.contains(e,a)&&a.id===i)return k.call(n,a),n}else{if(u[2])return k.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&e.getElementsByClassName)return k.apply(n,e.getElementsByClassName(i)),n}if(!(h[t+\" \"]||d&&d.test(t))){if(c=t,f=e,1===p&&(x.test(t)||m.test(t))){(f=H.test(t)&&U(e.parentNode)||e)==e&&le.scope||((s=e.getAttribute(\"id\"))?s=ce.escapeSelector(s):e.setAttribute(\"id\",s=S)),o=(l=Y(t)).length;while(o--)l[o]=(s?\"#\"+s:\":scope\")+\" \"+Q(l[o]);c=l.join(\",\")}try{return k.apply(n,f.querySelectorAll(c)),n}catch(e){h(t,!0)}finally{s===S&&e.removeAttribute(\"id\")}}}return re(t.replace(ve,\"$1\"),e,n,r)}function W(){var r=[];return function e(t,n){return r.push(t+\" \")>b.cacheLength&&delete e[r.shift()],e[t+\" \"]=n}}function F(e){return e[S]=!0,e}function $(e){var t=T.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function B(t){return function(e){return fe(e,\"input\")&&e.type===t}}function _(t){return function(e){return(fe(e,\"input\")||fe(e,\"button\"))&&e.type===t}}function z(t){return function(e){return\"form\"in e?e.parentNode&&!1===e.disabled?\"label\"in e?\"label\"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&R(e)===t:e.disabled===t:\"label\"in e&&e.disabled===t}}function X(a){return F(function(o){return o=+o,F(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function U(e){return e&&\"undefined\"!=typeof e.getElementsByTagName&&e}function V(e){var t,n=e?e.ownerDocument||e:ye;return n!=T&&9===n.nodeType&&n.documentElement&&(r=(T=n).documentElement,C=!ce.isXMLDoc(T),i=r.matches||r.webkitMatchesSelector||r.msMatchesSelector,r.msMatchesSelector&&ye!=T&&(t=T.defaultView)&&t.top!==t&&t.addEventListener(\"unload\",M),le.getById=$(function(e){return r.appendChild(e).id=ce.expando,!T.getElementsByName||!T.getElementsByName(ce.expando).length}),le.disconnectedMatch=$(function(e){return i.call(e,\"*\")}),le.scope=$(function(){return T.querySelectorAll(\":scope\")}),le.cssHas=$(function(){try{return T.querySelector(\":has(*,:jqfake)\"),!1}catch(e){return!0}}),le.getById?(b.filter.ID=function(e){var t=e.replace(O,P);return function(e){return e.getAttribute(\"id\")===t}},b.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&C){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(O,P);return function(e){var t=\"undefined\"!=typeof e.getAttributeNode&&e.getAttributeNode(\"id\");return t&&t.value===n}},b.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&C){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o]}return[]}}),b.find.TAG=function(e,t){return\"undefined\"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},b.find.CLASS=function(e,t){if(\"undefined\"!=typeof t.getElementsByClassName&&C)return t.getElementsByClassName(e)},d=[],$(function(e){var t;r.appendChild(e).innerHTML=\"<a id='\"+S+\"' href='' disabled='disabled'></a><select id='\"+S+\"-\\r\\\\' disabled='disabled'><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||d.push(\"\\\\[\"+ge+\"*(?:value|\"+f+\")\"),e.querySelectorAll(\"[id~=\"+S+\"-]\").length||d.push(\"~=\"),e.querySelectorAll(\"a#\"+S+\"+*\").length||d.push(\".#.+[+~]\"),e.querySelectorAll(\":checked\").length||d.push(\":checked\"),(t=T.createElement(\"input\")).setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),r.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&d.push(\":enabled\",\":disabled\"),(t=T.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||d.push(\"\\\\[\"+ge+\"*name\"+ge+\"*=\"+ge+\"*(?:''|\\\"\\\")\")}),le.cssHas||d.push(\":has\"),d=d.length&&new RegExp(d.join(\"|\")),l=function(e,t){if(e===t)return a=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!le.sortDetached&&t.compareDocumentPosition(e)===n?e===T||e.ownerDocument==ye&&I.contains(ye,e)?-1:t===T||t.ownerDocument==ye&&I.contains(ye,t)?1:o?se.call(o,e)-se.call(o,t):0:4&n?-1:1)}),T}for(e in I.matches=function(e,t){return I(e,null,null,t)},I.matchesSelector=function(e,t){if(V(e),C&&!h[t+\" \"]&&(!d||!d.test(t)))try{var n=i.call(e,t);if(n||le.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){h(t,!0)}return 0<I(t,T,null,[e]).length},I.contains=function(e,t){return(e.ownerDocument||e)!=T&&V(e),ce.contains(e,t)},I.attr=function(e,t){(e.ownerDocument||e)!=T&&V(e);var n=b.attrHandle[t.toLowerCase()],r=n&&ue.call(b.attrHandle,t.toLowerCase())?n(e,t,!C):void 0;return void 0!==r?r:e.getAttribute(t)},I.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},ce.uniqueSort=function(e){var t,n=[],r=0,i=0;if(a=!le.sortStable,o=!le.sortStable&&ae.call(e,0),de.call(e,l),a){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)he.call(e,n[r],1)}return o=null,e},ce.fn.uniqueSort=function(){return this.pushStack(ce.uniqueSort(ae.apply(this)))},(b=ce.expr={cacheLength:50,createPseudo:F,match:D,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(O,P),e[3]=(e[3]||e[4]||e[5]||\"\").replace(O,P),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||I.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&I.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return D.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&j.test(n)&&(t=Y(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(O,P).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return fe(e,t)}},CLASS:function(e){var t=s[e+\" \"];return t||(t=new RegExp(\"(^|\"+ge+\")\"+e+\"(\"+ge+\"|$)\"))&&s(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||\"undefined\"!=typeof e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(n,r,i){return function(e){var t=I.attr(e,n);return null==t?\"!=\"===r:!r||(t+=\"\",\"=\"===r?t===i:\"!=\"===r?t!==i:\"^=\"===r?i&&0===t.indexOf(i):\"*=\"===r?i&&-1<t.indexOf(i):\"$=\"===r?i&&t.slice(-i.length)===i:\"~=\"===r?-1<(\" \"+t.replace(v,\" \")+\" \").indexOf(i):\"|=\"===r&&(t===i||t.slice(0,i.length+1)===i+\"-\"))}},CHILD:function(d,e,t,h,g){var v=\"nth\"!==d.slice(0,3),y=\"last\"!==d.slice(-4),m=\"of-type\"===e;return 1===h&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u=v!==y?\"nextSibling\":\"previousSibling\",l=e.parentNode,c=m&&e.nodeName.toLowerCase(),f=!n&&!m,p=!1;if(l){if(v){while(u){o=e;while(o=o[u])if(m?fe(o,c):1===o.nodeType)return!1;s=u=\"only\"===d&&!s&&\"nextSibling\"}return!0}if(s=[y?l.firstChild:l.lastChild],y&&f){p=(a=(r=(i=l[S]||(l[S]={}))[d]||[])[0]===E&&r[1])&&r[2],o=a&&l.childNodes[a];while(o=++a&&o&&o[u]||(p=a=0)||s.pop())if(1===o.nodeType&&++p&&o===e){i[d]=[E,a,p];break}}else if(f&&(p=a=(r=(i=e[S]||(e[S]={}))[d]||[])[0]===E&&r[1]),!1===p)while(o=++a&&o&&o[u]||(p=a=0)||s.pop())if((m?fe(o,c):1===o.nodeType)&&++p&&(f&&((i=o[S]||(o[S]={}))[d]=[E,p]),o===e))break;return(p-=g)===h||p%h==0&&0<=p/h}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||I.error(\"unsupported pseudo: \"+e);return a[S]?a(o):1<a.length?(t=[e,e,\"\",o],b.setFilters.hasOwnProperty(e.toLowerCase())?F(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=se.call(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:F(function(e){var r=[],i=[],s=ne(e.replace(ve,\"$1\"));return s[S]?F(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:F(function(t){return function(e){return 0<I(t,e).length}}),contains:F(function(t){return t=t.replace(O,P),function(e){return-1<(e.textContent||ce.text(e)).indexOf(t)}}),lang:F(function(n){return A.test(n||\"\")||I.error(\"unsupported lang: \"+n),n=n.replace(O,P).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute(\"xml:lang\")||e.getAttribute(\"lang\"))return(t=t.toLowerCase())===n||0===t.indexOf(n+\"-\")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=ie.location&&ie.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===r},focus:function(e){return e===function(){try{return T.activeElement}catch(e){}}()&&T.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:z(!1),disabled:z(!0),checked:function(e){return fe(e,\"input\")&&!!e.checked||fe(e,\"option\")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return q.test(e.nodeName)},input:function(e){return N.test(e.nodeName)},button:function(e){return fe(e,\"input\")&&\"button\"===e.type||fe(e,\"button\")},text:function(e){var t;return fe(e,\"input\")&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:X(function(){return[0]}),last:X(function(e,t){return[t-1]}),eq:X(function(e,t,n){return[n<0?n+t:n]}),even:X(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:X(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:X(function(e,t,n){var r;for(r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:X(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=B(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=_(e);function G(){}function Y(e,t){var n,r,i,o,a,s,u,l=c[e+\" \"];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=y.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=m.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(ve,\" \")}),a=a.slice(n.length)),b.filter)!(r=D[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?I.error(e):c(e,s).slice(0)}function Q(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function J(a,e,t){var s=e.dir,u=e.next,l=u||s,c=t&&\"parentNode\"===l,f=n++;return e.first?function(e,t,n){while(e=e[s])if(1===e.nodeType||c)return a(e,t,n);return!1}:function(e,t,n){var r,i,o=[E,f];if(n){while(e=e[s])if((1===e.nodeType||c)&&a(e,t,n))return!0}else while(e=e[s])if(1===e.nodeType||c)if(i=e[S]||(e[S]={}),u&&fe(e,u))e=e[s]||e;else{if((r=i[l])&&r[0]===E&&r[1]===f)return o[2]=r[2];if((i[l]=o)[2]=a(e,t,n))return!0}return!1}}function K(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Z(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function ee(d,h,g,v,y,e){return v&&!v[S]&&(v=ee(v)),y&&!y[S]&&(y=ee(y,e)),F(function(e,t,n,r){var i,o,a,s,u=[],l=[],c=t.length,f=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)I(e,t[r],n);return n}(h||\"*\",n.nodeType?[n]:n,[]),p=!d||!e&&h?f:Z(f,u,d,n,r);if(g?g(p,s=y||(e?d:c||v)?[]:t,n,r):s=p,v){i=Z(s,l),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(s[l[o]]=!(p[l[o]]=a))}if(e){if(y||d){if(y){i=[],o=s.length;while(o--)(a=s[o])&&i.push(p[o]=a);y(null,s=[],i,r)}o=s.length;while(o--)(a=s[o])&&-1<(i=y?se.call(e,a):u[o])&&(e[i]=!(t[i]=a))}}else s=Z(s===t?s.splice(c,s.length):s),y?y(null,t,s,r):k.apply(t,s)})}function te(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[\" \"],s=o?1:0,u=J(function(e){return e===i},a,!0),l=J(function(e){return-1<se.call(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!=w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[J(K(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[S]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return ee(1<s&&K(c),1<s&&Q(e.slice(0,s-1).concat({value:\" \"===e[s-2].type?\"*\":\"\"})).replace(ve,\"$1\"),t,s<n&&te(e.slice(s,n)),n<r&&te(e=e.slice(n)),n<r&&Q(e))}c.push(t)}return K(c)}function ne(e,t){var n,v,y,m,x,r,i=[],o=[],a=u[e+\" \"];if(!a){t||(t=Y(e)),n=t.length;while(n--)(a=te(t[n]))[S]?i.push(a):o.push(a);(a=u(e,(v=o,m=0<(y=i).length,x=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l=\"0\",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG(\"*\",i),h=E+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument==T||(V(o),n=!C);while(s=v[a++])if(s(o,t||T,n)){k.call(r,o);break}i&&(E=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=pe.call(r));f=Z(f)}k.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&ce.uniqueSort(r)}return i&&(E=h,w=p),c},m?F(r):r))).selector=e}return a}function re(e,t,n,r){var i,o,a,s,u,l=\"function\"==typeof e&&e,c=!r&&Y(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&\"ID\"===(a=o[0]).type&&9===t.nodeType&&C&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(O,P),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=D.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(O,P),H.test(o[0].type)&&U(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&Q(o)))return k.apply(n,r),n;break}}}return(l||ne(e,c))(r,t,!C,n,!t||H.test(e)&&U(t.parentNode)||t),n}G.prototype=b.filters=b.pseudos,b.setFilters=new G,le.sortStable=S.split(\"\").sort(l).join(\"\")===S,V(),le.sortDetached=$(function(e){return 1&e.compareDocumentPosition(T.createElement(\"fieldset\"))}),ce.find=I,ce.expr[\":\"]=ce.expr.pseudos,ce.unique=ce.uniqueSort,I.compile=ne,I.select=re,I.setDocument=V,I.tokenize=Y,I.escape=ce.escapeSelector,I.getText=ce.text,I.isXML=ce.isXMLDoc,I.selectors=ce.expr,I.support=ce.support,I.uniqueSort=ce.uniqueSort}();var d=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&ce(e).is(n))break;r.push(e)}return r},h=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},b=ce.expr.match.needsContext,w=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function T(e,n,r){return v(n)?ce.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?ce.grep(e,function(e){return e===n!==r}):\"string\"!=typeof n?ce.grep(e,function(e){return-1<se.call(n,e)!==r}):ce.filter(n,e,r)}ce.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?ce.find.matchesSelector(r,e)?[r]:[]:ce.find.matches(e,ce.grep(t,function(e){return 1===e.nodeType}))},ce.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(\"string\"!=typeof e)return this.pushStack(ce(e).filter(function(){for(t=0;t<r;t++)if(ce.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)ce.find(e,i[t],n);return 1<r?ce.uniqueSort(n):n},filter:function(e){return this.pushStack(T(this,e||[],!1))},not:function(e){return this.pushStack(T(this,e||[],!0))},is:function(e){return!!T(this,\"string\"==typeof e&&b.test(e)?ce(e):e||[],!1).length}});var k,S=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(ce.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||k,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&3<=e.length?[null,e,null]:S.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof ce?t[0]:t,ce.merge(this,ce.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),w.test(r[1])&&ce.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=C.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(ce):ce.makeArray(e,this)}).prototype=ce.fn,k=ce(C);var E=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function A(e,t){while((e=e[t])&&1!==e.nodeType);return e}ce.fn.extend({has:function(e){var t=ce(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(ce.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=\"string\"!=typeof e&&ce(e);if(!b.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&ce.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?ce.uniqueSort(o):o)},index:function(e){return e?\"string\"==typeof e?se.call(ce(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ce.uniqueSort(ce.merge(this.get(),ce(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ce.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return d(e,\"parentNode\")},parentsUntil:function(e,t,n){return d(e,\"parentNode\",n)},next:function(e){return A(e,\"nextSibling\")},prev:function(e){return A(e,\"previousSibling\")},nextAll:function(e){return d(e,\"nextSibling\")},prevAll:function(e){return d(e,\"previousSibling\")},nextUntil:function(e,t,n){return d(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return d(e,\"previousSibling\",n)},siblings:function(e){return h((e.parentNode||{}).firstChild,e)},children:function(e){return h(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(fe(e,\"template\")&&(e=e.content||e),ce.merge([],e.childNodes))}},function(r,i){ce.fn[r]=function(e,t){var n=ce.map(this,i,e);return\"Until\"!==r.slice(-5)&&(t=e),t&&\"string\"==typeof t&&(n=ce.filter(t,n)),1<this.length&&(j[r]||ce.uniqueSort(n),E.test(r)&&n.reverse()),this.pushStack(n)}});var D=/[^\\x20\\t\\r\\n\\f]+/g;function N(e){return e}function q(e){throw e}function L(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}ce.Callbacks=function(r){var e,n;r=\"string\"==typeof r?(e=r,n={},ce.each(e.match(D)||[],function(e,t){n[t]=!0}),n):ce.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:\"\")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){ce.each(e,function(e,t){v(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&\"string\"!==x(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return ce.each(arguments,function(e,t){var n;while(-1<(n=ce.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<ce.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t=\"\",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=\"\"),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},ce.extend({Deferred:function(e){var o=[[\"notify\",\"progress\",ce.Callbacks(\"memory\"),ce.Callbacks(\"memory\"),2],[\"resolve\",\"done\",ce.Callbacks(\"once memory\"),ce.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",ce.Callbacks(\"once memory\"),ce.Callbacks(\"once memory\"),1,\"rejected\"]],i=\"pending\",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},\"catch\":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return ce.Deferred(function(r){ce.each(o,function(e,t){var n=v(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&v(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+\"With\"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError(\"Thenable self-resolution\");t=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,v(t)?s?t.call(e,l(u,o,N,s),l(u,o,q,s)):(u++,t.call(e,l(u,o,N,s),l(u,o,q,s),l(u,o,N,o.notifyWith))):(a!==N&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){ce.Deferred.exceptionHook&&ce.Deferred.exceptionHook(e,t.error),u<=i+1&&(a!==q&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(ce.Deferred.getErrorHook?t.error=ce.Deferred.getErrorHook():ce.Deferred.getStackHook&&(t.error=ce.Deferred.getStackHook()),ie.setTimeout(t))}}return ce.Deferred(function(e){o[0][3].add(l(0,e,v(r)?r:N,e.notifyWith)),o[1][3].add(l(0,e,v(t)?t:N)),o[2][3].add(l(0,e,v(n)?n:q))}).promise()},promise:function(e){return null!=e?ce.extend(e,a):a}},s={};return ce.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+\"With\"](this===s?void 0:this,arguments),this},s[t[0]+\"With\"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=ae.call(arguments),o=ce.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?ae.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(L(e,o.done(a(t)).resolve,o.reject,!n),\"pending\"===o.state()||v(i[t]&&i[t].then)))return o.then();while(t--)L(i[t],a(t),o.reject);return o.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ce.Deferred.exceptionHook=function(e,t){ie.console&&ie.console.warn&&e&&H.test(e.name)&&ie.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},ce.readyException=function(e){ie.setTimeout(function(){throw e})};var O=ce.Deferred();function P(){C.removeEventListener(\"DOMContentLoaded\",P),ie.removeEventListener(\"load\",P),ce.ready()}ce.fn.ready=function(e){return O.then(e)[\"catch\"](function(e){ce.readyException(e)}),this},ce.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--ce.readyWait:ce.isReady)||(ce.isReady=!0)!==e&&0<--ce.readyWait||O.resolveWith(C,[ce])}}),ce.ready.then=O.then,\"complete\"===C.readyState||\"loading\"!==C.readyState&&!C.documentElement.doScroll?ie.setTimeout(ce.ready):(C.addEventListener(\"DOMContentLoaded\",P),ie.addEventListener(\"load\",P));var M=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===x(n))for(s in i=!0,n)M(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(ce(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},R=/^-ms-/,I=/-([a-z])/g;function W(e,t){return t.toUpperCase()}function F(e){return e.replace(R,\"ms-\").replace(I,W)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function B(){this.expando=ce.expando+B.uid++}B.uid=1,B.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if(\"string\"==typeof t)i[F(t)]=n;else for(r in t)i[F(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][F(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(F):(t=F(t))in r?[t]:t.match(D)||[]).length;while(n--)delete r[t[n]]}(void 0===t||ce.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ce.isEmptyObject(t)}};var _=new B,z=new B,X=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,U=/[A-Z]/g;function V(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(U,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=\"true\"===(i=n)||\"false\"!==i&&(\"null\"===i?null:i===+i+\"\"?+i:X.test(i)?JSON.parse(i):i)}catch(e){}z.set(e,t,n)}else n=void 0;return n}ce.extend({hasData:function(e){return z.hasData(e)||_.hasData(e)},data:function(e,t,n){return z.access(e,t,n)},removeData:function(e,t){z.remove(e,t)},_data:function(e,t,n){return _.access(e,t,n)},_removeData:function(e,t){_.remove(e,t)}}),ce.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=z.get(o),1===o.nodeType&&!_.get(o,\"hasDataAttrs\"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf(\"data-\")&&(r=F(r.slice(5)),V(o,r,i[r]));_.set(o,\"hasDataAttrs\",!0)}return i}return\"object\"==typeof n?this.each(function(){z.set(this,n)}):M(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=z.get(o,n))?t:void 0!==(t=V(o,n))?t:void 0;this.each(function(){z.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){z.remove(this,e)})}}),ce.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=_.get(e,t),n&&(!r||Array.isArray(n)?r=_.access(e,t,ce.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=ce.queue(e,t),r=n.length,i=n.shift(),o=ce._queueHooks(e,t);\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,function(){ce.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return _.get(e,n)||_.access(e,n,{empty:ce.Callbacks(\"once memory\").add(function(){_.remove(e,[t+\"queue\",n])})})}}),ce.fn.extend({queue:function(t,n){var e=2;return\"string\"!=typeof t&&(n=t,t=\"fx\",e--),arguments.length<e?ce.queue(this[0],t):void 0===n?this:this.each(function(){var e=ce.queue(this,t,n);ce._queueHooks(this,t),\"fx\"===t&&\"inprogress\"!==e[0]&&ce.dequeue(this,t)})},dequeue:function(e){return this.each(function(){ce.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=ce.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";while(a--)(n=_.get(o[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var G=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,Y=new RegExp(\"^(?:([+-])=|)(\"+G+\")([a-z%]*)$\",\"i\"),Q=[\"Top\",\"Right\",\"Bottom\",\"Left\"],J=C.documentElement,K=function(e){return ce.contains(e.ownerDocument,e)},Z={composed:!0};J.getRootNode&&(K=function(e){return ce.contains(e.ownerDocument,e)||e.getRootNode(Z)===e.ownerDocument});var ee=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&K(e)&&\"none\"===ce.css(e,\"display\")};function te(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return ce.css(e,t,\"\")},u=s(),l=n&&n[3]||(ce.cssNumber[t]?\"\":\"px\"),c=e.nodeType&&(ce.cssNumber[t]||\"px\"!==l&&+u)&&Y.exec(ce.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)ce.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,ce.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ne={};function re(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?(\"none\"===n&&(l[c]=_.get(r,\"display\")||null,l[c]||(r.style.display=\"\")),\"\"===r.style.display&&ee(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ne[s])||(o=a.body.appendChild(a.createElement(s)),u=ce.css(o,\"display\"),o.parentNode.removeChild(o),\"none\"===u&&(u=\"block\"),ne[s]=u)))):\"none\"!==n&&(l[c]=\"none\",_.set(r,\"display\",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}ce.fn.extend({show:function(){return re(this,!0)},hide:function(){return re(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){ee(this)?ce(this).show():ce(this).hide()})}});var xe,be,we=/^(?:checkbox|radio)$/i,Te=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,Ce=/^$|^module$|\\/(?:java|ecma)script/i;xe=C.createDocumentFragment().appendChild(C.createElement(\"div\")),(be=C.createElement(\"input\")).setAttribute(\"type\",\"radio\"),be.setAttribute(\"checked\",\"checked\"),be.setAttribute(\"name\",\"t\"),xe.appendChild(be),le.checkClone=xe.cloneNode(!0).cloneNode(!0).lastChild.checked,xe.innerHTML=\"<textarea>x</textarea>\",le.noCloneChecked=!!xe.cloneNode(!0).lastChild.defaultValue,xe.innerHTML=\"<option></option>\",le.option=!!xe.lastChild;var ke={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function Se(e,t){var n;return n=\"undefined\"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):\"undefined\"!=typeof e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&fe(e,t)?ce.merge([e],n):n}function Ee(e,t){for(var n=0,r=e.length;n<r;n++)_.set(e[n],\"globalEval\",!t||_.get(t[n],\"globalEval\"))}ke.tbody=ke.tfoot=ke.colgroup=ke.caption=ke.thead,ke.th=ke.td,le.option||(ke.optgroup=ke.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var je=/<|&#?\\w+;/;function Ae(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if(\"object\"===x(o))ce.merge(p,o.nodeType?[o]:o);else if(je.test(o)){a=a||f.appendChild(t.createElement(\"div\")),s=(Te.exec(o)||[\"\",\"\"])[1].toLowerCase(),u=ke[s]||ke._default,a.innerHTML=u[1]+ce.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;ce.merge(p,a.childNodes),(a=f.firstChild).textContent=\"\"}else p.push(t.createTextNode(o));f.textContent=\"\",d=0;while(o=p[d++])if(r&&-1<ce.inArray(o,r))i&&i.push(o);else if(l=K(o),a=Se(f.appendChild(o),\"script\"),l&&Ee(a),n){c=0;while(o=a[c++])Ce.test(o.type||\"\")&&n.push(o)}return f}var De=/^([^.]*)(?:\\.(.+)|)/;function Ne(){return!0}function qe(){return!1}function Le(e,t,n,r,i,o){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Le(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&(\"string\"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=qe;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return ce().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=ce.guid++)),e.each(function(){ce.event.add(this,t,i,r,n)})}function He(e,r,t){t?(_.set(e,r,!1),ce.event.add(e,r,{namespace:!1,handler:function(e){var t,n=_.get(this,r);if(1&e.isTrigger&&this[r]){if(n)(ce.event.special[r]||{}).delegateType&&e.stopPropagation();else if(n=ae.call(arguments),_.set(this,r,n),this[r](),t=_.get(this,r),_.set(this,r,!1),n!==t)return e.stopImmediatePropagation(),e.preventDefault(),t}else n&&(_.set(this,r,ce.event.trigger(n[0],n.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=Ne)}})):void 0===_.get(e,r)&&ce.event.add(e,r,Ne)}ce.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=_.get(t);if($(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&ce.find.matchesSelector(J,i),n.guid||(n.guid=ce.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return\"undefined\"!=typeof ce&&ce.event.triggered!==e.type?ce.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||\"\").match(D)||[\"\"]).length;while(l--)d=g=(s=De.exec(e[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),d&&(f=ce.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=ce.event.special[d]||{},c=ce.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ce.expr.match.needsContext.test(i),namespace:h.join(\".\")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),ce.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=_.hasData(e)&&_.get(e);if(v&&(u=v.events)){l=(t=(t||\"\").match(D)||[\"\"]).length;while(l--)if(d=g=(s=De.exec(t[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),d){f=ce.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||ce.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)ce.event.remove(e,d+t[l],n,r,!0);ce.isEmptyObject(u)&&_.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=ce.event.fix(e),l=(_.get(this,\"events\")||Object.create(null))[u.type]||[],c=ce.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=ce.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((ce.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!(\"click\"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(\"click\"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+\" \"]&&(a[i]=r.needsContext?-1<ce(i,this).index(l):ce.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(ce.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[ce.expando]?e:new ce.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return we.test(t.type)&&t.click&&fe(t,\"input\")&&He(t,\"click\",!0),!1},trigger:function(e){var t=this||e;return we.test(t.type)&&t.click&&fe(t,\"input\")&&He(t,\"click\"),!0},_default:function(e){var t=e.target;return we.test(t.type)&&t.click&&fe(t,\"input\")&&_.get(t,\"click\")||fe(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ce.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ce.Event=function(e,t){if(!(this instanceof ce.Event))return new ce.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ne:qe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ce.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[ce.expando]=!0},ce.Event.prototype={constructor:ce.Event,isDefaultPrevented:qe,isPropagationStopped:qe,isImmediatePropagationStopped:qe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ne,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ne,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ne,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ce.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,\"char\":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},ce.event.addProp),ce.each({focus:\"focusin\",blur:\"focusout\"},function(r,i){function o(e){if(C.documentMode){var t=_.get(this,\"handle\"),n=ce.event.fix(e);n.type=\"focusin\"===e.type?\"focus\":\"blur\",n.isSimulated=!0,t(e),n.target===n.currentTarget&&t(n)}else ce.event.simulate(i,e.target,ce.event.fix(e))}ce.event.special[r]={setup:function(){var e;if(He(this,r,!0),!C.documentMode)return!1;(e=_.get(this,i))||this.addEventListener(i,o),_.set(this,i,(e||0)+1)},trigger:function(){return He(this,r),!0},teardown:function(){var e;if(!C.documentMode)return!1;(e=_.get(this,i)-1)?_.set(this,i,e):(this.removeEventListener(i,o),_.remove(this,i))},_default:function(e){return _.get(e.target,r)},delegateType:i},ce.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=C.documentMode?this:e,n=_.get(t,i);n||(C.documentMode?this.addEventListener(i,o):e.addEventListener(r,o,!0)),_.set(t,i,(n||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=C.documentMode?this:e,n=_.get(t,i)-1;n?_.set(t,i,n):(C.documentMode?this.removeEventListener(i,o):e.removeEventListener(r,o,!0),_.remove(t,i))}}}),ce.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,i){ce.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||ce.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),ce.fn.extend({on:function(e,t,n,r){return Le(this,e,t,n,r)},one:function(e,t,n,r){return Le(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ce(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=qe),this.each(function(){ce.event.remove(this,e,n,t)})}});var Oe=/<script|<style|<link/i,Pe=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Me=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function Re(e,t){return fe(e,\"table\")&&fe(11!==t.nodeType?t:t.firstChild,\"tr\")&&ce(e).children(\"tbody\")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function We(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function Fe(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(_.hasData(e)&&(s=_.get(e).events))for(i in _.remove(t,\"handle events\"),s)for(n=0,r=s[i].length;n<r;n++)ce.event.add(t,i,s[i][n]);z.hasData(e)&&(o=z.access(e),a=ce.extend({},o),z.set(t,a))}}function $e(n,r,i,o){r=g(r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=v(d);if(h||1<f&&\"string\"==typeof d&&!le.checkClone&&Pe.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),$e(t,r,i,o)});if(f&&(t=(e=Ae(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=ce.map(Se(e,\"script\"),Ie)).length;c<f;c++)u=e,c!==p&&(u=ce.clone(u,!0,!0),s&&ce.merge(a,Se(u,\"script\"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,ce.map(a,We),c=0;c<s;c++)u=a[c],Ce.test(u.type||\"\")&&!_.access(u,\"globalEval\")&&ce.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?ce._evalUrl&&!u.noModule&&ce._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):m(u.textContent.replace(Me,\"\"),u,l))}return n}function Be(e,t,n){for(var r,i=t?ce.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||ce.cleanData(Se(r)),r.parentNode&&(n&&K(r)&&Ee(Se(r,\"script\")),r.parentNode.removeChild(r));return e}ce.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=K(e);if(!(le.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ce.isXMLDoc(e)))for(a=Se(c),r=0,i=(o=Se(e)).length;r<i;r++)s=o[r],u=a[r],void 0,\"input\"===(l=u.nodeName.toLowerCase())&&we.test(s.type)?u.checked=s.checked:\"input\"!==l&&\"textarea\"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||Se(e),a=a||Se(c),r=0,i=o.length;r<i;r++)Fe(o[r],a[r]);else Fe(e,c);return 0<(a=Se(c,\"script\")).length&&Ee(a,!f&&Se(e,\"script\")),c},cleanData:function(e){for(var t,n,r,i=ce.event.special,o=0;void 0!==(n=e[o]);o++)if($(n)){if(t=n[_.expando]){if(t.events)for(r in t.events)i[r]?ce.event.remove(n,r):ce.removeEvent(n,r,t.handle);n[_.expando]=void 0}n[z.expando]&&(n[z.expando]=void 0)}}}),ce.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return M(this,function(e){return void 0===e?ce.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return $e(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Re(this,e).appendChild(e)})},prepend:function(){return $e(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Re(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return $e(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return $e(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ce.cleanData(Se(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ce.clone(this,e,t)})},html:function(e){return M(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Oe.test(e)&&!ke[(Te.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=ce.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(ce.cleanData(Se(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return $e(this,arguments,function(e){var t=this.parentNode;ce.inArray(this,n)<0&&(ce.cleanData(Se(this)),t&&t.replaceChild(e,this))},n)}}),ce.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,a){ce.fn[e]=function(e){for(var t,n=[],r=ce(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),ce(r[o])[a](t),s.apply(n,t.get());return this.pushStack(n)}});var _e=new RegExp(\"^(\"+G+\")(?!px)[a-z%]+$\",\"i\"),ze=/^--/,Xe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=ie),t.getComputedStyle(e)},Ue=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Ve=new RegExp(Q.join(\"|\"),\"i\");function Ge(e,t,n){var r,i,o,a,s=ze.test(t),u=e.style;return(n=n||Xe(e))&&(a=n.getPropertyValue(t)||n[t],s&&a&&(a=a.replace(ve,\"$1\")||void 0),\"\"!==a||K(e)||(a=ce.style(e,t)),!le.pixelBoxStyles()&&_e.test(a)&&Ve.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+\"\":a}function Ye(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",J.appendChild(u).appendChild(l);var e=ie.getComputedStyle(l);n=\"1%\"!==e.top,s=12===t(e.marginLeft),l.style.right=\"60%\",o=36===t(e.right),r=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),J.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=C.createElement(\"div\"),l=C.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",le.clearCloneStyle=\"content-box\"===l.style.backgroundClip,ce.extend(le,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=C.createElement(\"table\"),t=C.createElement(\"tr\"),n=C.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"box-sizing:content-box;border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",J.appendChild(e).appendChild(t).appendChild(n),r=ie.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,J.removeChild(e)),a}}))}();var Qe=[\"Webkit\",\"Moz\",\"ms\"],Je=C.createElement(\"div\").style,Ke={};function Ze(e){var t=ce.cssProps[e]||Ke[e];return t||(e in Je?e:Ke[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=Qe.length;while(n--)if((e=Qe[n]+t)in Je)return e}(e)||e)}var et=/^(none|table(?!-c[ea]).+)/,tt={position:\"absolute\",visibility:\"hidden\",display:\"block\"},nt={letterSpacing:\"0\",fontWeight:\"400\"};function rt(e,t,n){var r=Y.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function it(e,t,n,r,i,o){var a=\"width\"===t?1:0,s=0,u=0,l=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(l+=ce.css(e,n+Q[a],!0,i)),r?(\"content\"===n&&(u-=ce.css(e,\"padding\"+Q[a],!0,i)),\"margin\"!==n&&(u-=ce.css(e,\"border\"+Q[a]+\"Width\",!0,i))):(u+=ce.css(e,\"padding\"+Q[a],!0,i),\"padding\"!==n?u+=ce.css(e,\"border\"+Q[a]+\"Width\",!0,i):s+=ce.css(e,\"border\"+Q[a]+\"Width\",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u+l}function ot(e,t,n){var r=Xe(e),i=(!le.boxSizingReliable()||n)&&\"border-box\"===ce.css(e,\"boxSizing\",!1,r),o=i,a=Ge(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(_e.test(a)){if(!n)return a;a=\"auto\"}return(!le.boxSizingReliable()&&i||!le.reliableTrDimensions()&&fe(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===ce.css(e,\"display\",!1,r))&&e.getClientRects().length&&(i=\"border-box\"===ce.css(e,\"boxSizing\",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+it(e,t,n||(i?\"border\":\"content\"),o,r,a)+\"px\"}function at(e,t,n,r,i){return new at.prototype.init(e,t,n,r,i)}ce.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ge(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=F(t),u=ze.test(t),l=e.style;if(u||(t=Ze(s)),a=ce.cssHooks[t]||ce.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];\"string\"===(o=typeof n)&&(i=Y.exec(n))&&i[1]&&(n=te(e,t,i),o=\"number\"),null!=n&&n==n&&(\"number\"!==o||u||(n+=i&&i[3]||(ce.cssNumber[s]?\"\":\"px\")),le.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(l[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=F(t);return ze.test(t)||(t=Ze(s)),(a=ce.cssHooks[t]||ce.cssHooks[s])&&\"get\"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ge(e,t,r)),\"normal\"===i&&t in nt&&(i=nt[t]),\"\"===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),ce.each([\"height\",\"width\"],function(e,u){ce.cssHooks[u]={get:function(e,t,n){if(t)return!et.test(ce.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?ot(e,u,n):Ue(e,tt,function(){return ot(e,u,n)})},set:function(e,t,n){var r,i=Xe(e),o=!le.scrollboxSize()&&\"absolute\"===i.position,a=(o||n)&&\"border-box\"===ce.css(e,\"boxSizing\",!1,i),s=n?it(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e[\"offset\"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-it(e,u,\"border\",!1,i)-.5)),s&&(r=Y.exec(t))&&\"px\"!==(r[3]||\"px\")&&(e.style[u]=t,t=ce.css(e,u)),rt(0,t,s)}}}),ce.cssHooks.marginLeft=Ye(le.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ge(e,\"marginLeft\"))||e.getBoundingClientRect().left-Ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),ce.each({margin:\"\",padding:\"\",border:\"Width\"},function(i,o){ce.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r=\"string\"==typeof e?e.split(\" \"):[e];t<4;t++)n[i+Q[t]+o]=r[t]||r[t-2]||r[0];return n}},\"margin\"!==i&&(ce.cssHooks[i+o].set=rt)}),ce.fn.extend({css:function(e,t){return M(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Xe(e),i=t.length;a<i;a++)o[t[a]]=ce.css(e,t[a],!1,r);return o}return void 0!==n?ce.style(e,t,n):ce.css(e,t)},e,t,1<arguments.length)}}),((ce.Tween=at).prototype={constructor:at,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||ce.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ce.cssNumber[n]?\"\":\"px\")},cur:function(){var e=at.propHooks[this.prop];return e&&e.get?e.get(this):at.propHooks._default.get(this)},run:function(e){var t,n=at.propHooks[this.prop];return this.options.duration?this.pos=t=ce.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):at.propHooks._default.set(this),this}}).init.prototype=at.prototype,(at.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ce.css(e.elem,e.prop,\"\"))&&\"auto\"!==t?t:0},set:function(e){ce.fx.step[e.prop]?ce.fx.step[e.prop](e):1!==e.elem.nodeType||!ce.cssHooks[e.prop]&&null==e.elem.style[Ze(e.prop)]?e.elem[e.prop]=e.now:ce.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=at.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ce.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:\"swing\"},ce.fx=at.prototype.init,ce.fx.step={};var st,ut,lt,ct,ft=/^(?:toggle|show|hide)$/,pt=/queueHooks$/;function dt(){ut&&(!1===C.hidden&&ie.requestAnimationFrame?ie.requestAnimationFrame(dt):ie.setTimeout(dt,ce.fx.interval),ce.fx.tick())}function ht(){return ie.setTimeout(function(){st=void 0}),st=Date.now()}function gt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i[\"margin\"+(n=Q[r])]=i[\"padding\"+n]=e;return t&&(i.opacity=i.width=e),i}function vt(e,t,n){for(var r,i=(yt.tweeners[t]||[]).concat(yt.tweeners[\"*\"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function yt(o,e,t){var n,a,r=0,i=yt.prefilters.length,s=ce.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=st||ht(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:ce.extend({},e),opts:ce.extend(!0,{specialEasing:{},easing:ce.easing._default},t),originalProperties:e,originalOptions:t,startTime:st||ht(),duration:t.duration,tweens:[],createTween:function(e,t){var n=ce.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=F(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=ce.cssHooks[r])&&\"expand\"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=yt.prefilters[r].call(l,o,c,l.opts))return v(n.stop)&&(ce._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return ce.map(c,vt,l),v(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),ce.fx.timer(ce.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}ce.Animation=ce.extend(yt,{tweeners:{\"*\":[function(e,t){var n=this.createTween(e,t);return te(n.elem,e,Y.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=[\"*\"]):e=e.match(D);for(var n,r=0,i=e.length;r<i;r++)n=e[r],yt.tweeners[n]=yt.tweeners[n]||[],yt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f=\"width\"in t||\"height\"in t,p=this,d={},h=e.style,g=e.nodeType&&ee(e),v=_.get(e,\"fxshow\");for(r in n.queue||(null==(a=ce._queueHooks(e,\"fx\")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,ce.queue(e,\"fx\").length||a.empty.fire()})})),t)if(i=t[r],ft.test(i)){if(delete t[r],o=o||\"toggle\"===i,i===(g?\"hide\":\"show\")){if(\"show\"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||ce.style(e,r)}if((u=!ce.isEmptyObject(t))||!ce.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=_.get(e,\"display\")),\"none\"===(c=ce.css(e,\"display\"))&&(l?c=l:(re([e],!0),l=e.style.display||l,c=ce.css(e,\"display\"),re([e]))),(\"inline\"===c||\"inline-block\"===c&&null!=l)&&\"none\"===ce.css(e,\"float\")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l=\"none\"===c?\"\":c)),h.display=\"inline-block\")),n.overflow&&(h.overflow=\"hidden\",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?\"hidden\"in v&&(g=v.hidden):v=_.access(e,\"fxshow\",{display:l}),o&&(v.hidden=!g),g&&re([e],!0),p.done(function(){for(r in g||re([e]),_.remove(e,\"fxshow\"),d)ce.style(e,r,d[r])})),u=vt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?yt.prefilters.unshift(e):yt.prefilters.push(e)}}),ce.speed=function(e,t,n){var r=e&&\"object\"==typeof e?ce.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return ce.fx.off?r.duration=0:\"number\"!=typeof r.duration&&(r.duration in ce.fx.speeds?r.duration=ce.fx.speeds[r.duration]:r.duration=ce.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue=\"fx\"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&ce.dequeue(this,r.queue)},r},ce.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ee).css(\"opacity\",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=ce.isEmptyObject(t),o=ce.speed(e,n,r),a=function(){var e=yt(this,ce.extend({},t),o);(i||_.get(this,\"finish\"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return\"string\"!=typeof i&&(o=e,e=i,i=void 0),e&&this.queue(i||\"fx\",[]),this.each(function(){var e=!0,t=null!=i&&i+\"queueHooks\",n=ce.timers,r=_.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&pt.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||ce.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||\"fx\"),this.each(function(){var e,t=_.get(this),n=t[a+\"queue\"],r=t[a+\"queueHooks\"],i=ce.timers,o=n?n.length:0;for(t.finish=!0,ce.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),ce.each([\"toggle\",\"show\",\"hide\"],function(e,r){var i=ce.fn[r];ce.fn[r]=function(e,t,n){return null==e||\"boolean\"==typeof e?i.apply(this,arguments):this.animate(gt(r,!0),e,t,n)}}),ce.each({slideDown:gt(\"show\"),slideUp:gt(\"hide\"),slideToggle:gt(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(e,r){ce.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),ce.timers=[],ce.fx.tick=function(){var e,t=0,n=ce.timers;for(st=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||ce.fx.stop(),st=void 0},ce.fx.timer=function(e){ce.timers.push(e),ce.fx.start()},ce.fx.interval=13,ce.fx.start=function(){ut||(ut=!0,dt())},ce.fx.stop=function(){ut=null},ce.fx.speeds={slow:600,fast:200,_default:400},ce.fn.delay=function(r,e){return r=ce.fx&&ce.fx.speeds[r]||r,e=e||\"fx\",this.queue(e,function(e,t){var n=ie.setTimeout(e,r);t.stop=function(){ie.clearTimeout(n)}})},lt=C.createElement(\"input\"),ct=C.createElement(\"select\").appendChild(C.createElement(\"option\")),lt.type=\"checkbox\",le.checkOn=\"\"!==lt.value,le.optSelected=ct.selected,(lt=C.createElement(\"input\")).value=\"t\",lt.type=\"radio\",le.radioValue=\"t\"===lt.value;var mt,xt=ce.expr.attrHandle;ce.fn.extend({attr:function(e,t){return M(this,ce.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){ce.removeAttr(this,e)})}}),ce.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return\"undefined\"==typeof e.getAttribute?ce.prop(e,t,n):(1===o&&ce.isXMLDoc(e)||(i=ce.attrHooks[t.toLowerCase()]||(ce.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void ce.removeAttr(e,t):i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):i&&\"get\"in i&&null!==(r=i.get(e,t))?r:null==(r=ce.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!le.radioValue&&\"radio\"===t&&fe(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(D);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?ce.removeAttr(e,n):e.setAttribute(n,n),n}},ce.each(ce.expr.match.bool.source.match(/\\w+/g),function(e,t){var a=xt[t]||ce.find.attr;xt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=xt[o],xt[o]=r,r=null!=a(e,t,n)?o:null,xt[o]=i),r}});var bt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;function Tt(e){return(e.match(D)||[]).join(\" \")}function Ct(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function kt(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(D)||[]}ce.fn.extend({prop:function(e,t){return M(this,ce.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[ce.propFix[e]||e]})}}),ce.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ce.isXMLDoc(e)||(t=ce.propFix[t]||t,i=ce.propHooks[t]),void 0!==n?i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=ce.find.attr(e,\"tabindex\");return t?parseInt(t,10):bt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),le.optSelected||(ce.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ce.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){ce.propFix[this.toLowerCase()]=this}),ce.fn.extend({addClass:function(t){var e,n,r,i,o,a;return v(t)?this.each(function(e){ce(this).addClass(t.call(this,e,Ct(this)))}):(e=kt(t)).length?this.each(function(){if(r=Ct(this),n=1===this.nodeType&&\" \"+Tt(r)+\" \"){for(o=0;o<e.length;o++)i=e[o],n.indexOf(\" \"+i+\" \")<0&&(n+=i+\" \");a=Tt(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return v(t)?this.each(function(e){ce(this).removeClass(t.call(this,e,Ct(this)))}):arguments.length?(e=kt(t)).length?this.each(function(){if(r=Ct(this),n=1===this.nodeType&&\" \"+Tt(r)+\" \"){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(\" \"+i+\" \"))n=n.replace(\" \"+i+\" \",\" \")}a=Tt(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s=\"string\"===a||Array.isArray(t);return v(t)?this.each(function(e){ce(this).toggleClass(t.call(this,e,Ct(this),n),n)}):\"boolean\"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=kt(t),this.each(function(){if(s)for(o=ce(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&\"boolean\"!==a||((r=Ct(this))&&_.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===t?\"\":_.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;t=\" \"+e+\" \";while(n=this[r++])if(1===n.nodeType&&-1<(\" \"+Tt(Ct(n))+\" \").indexOf(t))return!0;return!1}});var St=/\\r/g;ce.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=v(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,ce(this).val()):n)?t=\"\":\"number\"==typeof t?t+=\"\":Array.isArray(t)&&(t=ce.map(t,function(e){return null==e?\"\":e+\"\"})),(r=ce.valHooks[this.type]||ce.valHooks[this.nodeName.toLowerCase()])&&\"set\"in r&&void 0!==r.set(this,t,\"value\")||(this.value=t))})):t?(r=ce.valHooks[t.type]||ce.valHooks[t.nodeName.toLowerCase()])&&\"get\"in r&&void 0!==(e=r.get(t,\"value\"))?e:\"string\"==typeof(e=t.value)?e.replace(St,\"\"):null==e?\"\":e:void 0}}),ce.extend({valHooks:{option:{get:function(e){var t=ce.find.attr(e,\"value\");return null!=t?t:Tt(ce.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!fe(n.parentNode,\"optgroup\"))){if(t=ce(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=ce.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<ce.inArray(ce.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),ce.each([\"radio\",\"checkbox\"],function(){ce.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<ce.inArray(ce(e).val(),t)}},le.checkOn||(ce.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})});var Et=ie.location,jt={guid:Date.now()},At=/\\?/;ce.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new ie.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||ce.error(\"Invalid XML: \"+(n?ce.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var Dt=/^(?:focusinfocus|focusoutblur)$/,Nt=function(e){e.stopPropagation()};ce.extend(ce.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||C],d=ue.call(e,\"type\")?e.type:e,h=ue.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(o=f=a=n=n||C,3!==n.nodeType&&8!==n.nodeType&&!Dt.test(d+ce.event.triggered)&&(-1<d.indexOf(\".\")&&(d=(h=d.split(\".\")).shift(),h.sort()),u=d.indexOf(\":\")<0&&\"on\"+d,(e=e[ce.expando]?e:new ce.Event(d,\"object\"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:ce.makeArray(t,[e]),c=ce.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!y(n)){for(s=c.delegateType||d,Dt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||C)&&p.push(a.defaultView||a.parentWindow||ie)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(_.get(o,\"events\")||Object.create(null))[e.type]&&_.get(o,\"handle\"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&$(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!$(n)||u&&v(n[d])&&!y(n)&&((a=n[u])&&(n[u]=null),ce.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,Nt),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,Nt),ce.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=ce.extend(new ce.Event,n,{type:e,isSimulated:!0});ce.event.trigger(r,null,t)}}),ce.fn.extend({trigger:function(e,t){return this.each(function(){ce.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ce.event.trigger(e,t,n,!0)}});var qt=/\\[\\]$/,Lt=/\\r?\\n/g,Ht=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;function Pt(n,e,r,i){var t;if(Array.isArray(e))ce.each(e,function(e,t){r||qt.test(n)?i(n,t):Pt(n+\"[\"+(\"object\"==typeof t&&null!=t?e:\"\")+\"]\",t,r,i)});else if(r||\"object\"!==x(e))i(n,e);else for(t in e)Pt(n+\"[\"+t+\"]\",e[t],r,i)}ce.param=function(e,t){var n,r=[],i=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!ce.isPlainObject(e))ce.each(e,function(){i(this.name,this.value)});else for(n in e)Pt(n,e[n],t,i);return r.join(\"&\")},ce.fn.extend({serialize:function(){return ce.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ce.prop(this,\"elements\");return e?ce.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ce(this).is(\":disabled\")&&Ot.test(this.nodeName)&&!Ht.test(e)&&(this.checked||!we.test(e))}).map(function(e,t){var n=ce(this).val();return null==n?null:Array.isArray(n)?ce.map(n,function(e){return{name:t.name,value:e.replace(Lt,\"\\r\\n\")}}):{name:t.name,value:n.replace(Lt,\"\\r\\n\")}}).get()}});var Mt=/%20/g,Rt=/#.*$/,It=/([?&])_=[^&]*/,Wt=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,Ft=/^(?:GET|HEAD)$/,$t=/^\\/\\//,Bt={},_t={},zt=\"*/\".concat(\"*\"),Xt=C.createElement(\"a\");function Ut(o){return function(e,t){\"string\"!=typeof e&&(t=e,e=\"*\");var n,r=0,i=e.toLowerCase().match(D)||[];if(v(t))while(n=i[r++])\"+\"===n[0]?(n=n.slice(1)||\"*\",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Vt(t,i,o,a){var s={},u=t===_t;function l(e){var r;return s[e]=!0,ce.each(t[e]||[],function(e,t){var n=t(i,o,a);return\"string\"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s[\"*\"]&&l(\"*\")}function Gt(e,t){var n,r,i=ce.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&ce.extend(!0,e,r),e}Xt.href=Et.href,ce.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:\"GET\",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":zt,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":JSON.parse,\"text xml\":ce.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Gt(Gt(e,ce.ajaxSettings),t):Gt(ce.ajaxSettings,e)},ajaxPrefilter:Ut(Bt),ajaxTransport:Ut(_t),ajax:function(e,t){\"object\"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,v=ce.ajaxSetup({},t),y=v.context||v,m=v.context&&(y.nodeType||y.jquery)?ce(y):ce.event,x=ce.Deferred(),b=ce.Callbacks(\"once memory\"),w=v.statusCode||{},a={},s={},u=\"canceled\",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Wt.exec(p))n[t[1].toLowerCase()+\" \"]=(n[t[1].toLowerCase()+\" \"]||[]).concat(t[2])}t=n[e.toLowerCase()+\" \"]}return null==t?null:t.join(\", \")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),v.url=((e||v.url||Et.href)+\"\").replace($t,Et.protocol+\"//\"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||\"*\").toLowerCase().match(D)||[\"\"],null==v.crossDomain){r=C.createElement(\"a\");try{r.href=v.url,r.href=r.href,v.crossDomain=Xt.protocol+\"//\"+Xt.host!=r.protocol+\"//\"+r.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&\"string\"!=typeof v.data&&(v.data=ce.param(v.data,v.traditional)),Vt(Bt,v,t,T),h)return T;for(i in(g=ce.event&&v.global)&&0==ce.active++&&ce.event.trigger(\"ajaxStart\"),v.type=v.type.toUpperCase(),v.hasContent=!Ft.test(v.type),f=v.url.replace(Rt,\"\"),v.hasContent?v.data&&v.processData&&0===(v.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&(v.data=v.data.replace(Mt,\"+\")):(o=v.url.slice(f.length),v.data&&(v.processData||\"string\"==typeof v.data)&&(f+=(At.test(f)?\"&\":\"?\")+v.data,delete v.data),!1===v.cache&&(f=f.replace(It,\"$1\"),o=(At.test(f)?\"&\":\"?\")+\"_=\"+jt.guid+++o),v.url=f+o),v.ifModified&&(ce.lastModified[f]&&T.setRequestHeader(\"If-Modified-Since\",ce.lastModified[f]),ce.etag[f]&&T.setRequestHeader(\"If-None-Match\",ce.etag[f])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader(\"Content-Type\",v.contentType),T.setRequestHeader(\"Accept\",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+(\"*\"!==v.dataTypes[0]?\", \"+zt+\"; q=0.01\":\"\"):v.accepts[\"*\"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(y,T,v)||h))return T.abort();if(u=\"abort\",b.add(v.complete),T.done(v.success),T.fail(v.error),c=Vt(_t,v,t,T)){if(T.readyState=1,g&&m.trigger(\"ajaxSend\",[T,v]),h)return T;v.async&&0<v.timeout&&(d=ie.setTimeout(function(){T.abort(\"timeout\")},v.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,\"No Transport\");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&ie.clearTimeout(d),c=void 0,p=r||\"\",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while(\"*\"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader(\"Content-Type\"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+\" \"+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(v,T,n)),!i&&-1<ce.inArray(\"script\",v.dataTypes)&&ce.inArray(\"json\",v.dataTypes)<0&&(v.converters[\"text script\"]=function(){}),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if(\"*\"===o)o=u;else if(\"*\"!==u&&u!==o){if(!(a=l[u+\" \"+o]||l[\"* \"+o]))for(i in l)if((s=i.split(\" \"))[1]===o&&(a=l[u+\" \"+s[0]]||l[\"* \"+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e[\"throws\"])t=a(t);else try{t=a(t)}catch(e){return{state:\"parsererror\",error:a?e:\"No conversion from \"+u+\" to \"+o}}}return{state:\"success\",data:t}}(v,s,T,i),i?(v.ifModified&&((u=T.getResponseHeader(\"Last-Modified\"))&&(ce.lastModified[f]=u),(u=T.getResponseHeader(\"etag\"))&&(ce.etag[f]=u)),204===e||\"HEAD\"===v.type?l=\"nocontent\":304===e?l=\"notmodified\":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l=\"error\",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+\"\",i?x.resolveWith(y,[o,l,T]):x.rejectWith(y,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?\"ajaxSuccess\":\"ajaxError\",[T,v,i?o:a]),b.fireWith(y,[T,l]),g&&(m.trigger(\"ajaxComplete\",[T,v]),--ce.active||ce.event.trigger(\"ajaxStop\")))}return T},getJSON:function(e,t,n){return ce.get(e,t,n,\"json\")},getScript:function(e,t){return ce.get(e,void 0,t,\"script\")}}),ce.each([\"get\",\"post\"],function(e,i){ce[i]=function(e,t,n,r){return v(t)&&(r=r||n,n=t,t=void 0),ce.ajax(ce.extend({url:e,type:i,dataType:r,data:t,success:n},ce.isPlainObject(e)&&e))}}),ce.ajaxPrefilter(function(e){var t;for(t in e.headers)\"content-type\"===t.toLowerCase()&&(e.contentType=e.headers[t]||\"\")}),ce._evalUrl=function(e,t,n){return ce.ajax({url:e,type:\"GET\",dataType:\"script\",cache:!0,async:!1,global:!1,converters:{\"text script\":function(){}},dataFilter:function(e){ce.globalEval(e,t,n)}})},ce.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=ce(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return v(n)?this.each(function(e){ce(this).wrapInner(n.call(this,e))}):this.each(function(){var e=ce(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=v(t);return this.each(function(e){ce(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){ce(this).replaceWith(this.childNodes)}),this}}),ce.expr.pseudos.hidden=function(e){return!ce.expr.pseudos.visible(e)},ce.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ce.ajaxSettings.xhr=function(){try{return new ie.XMLHttpRequest}catch(e){}};var Yt={0:200,1223:204},Qt=ce.ajaxSettings.xhr();le.cors=!!Qt&&\"withCredentials\"in Qt,le.ajax=Qt=!!Qt,ce.ajaxTransport(function(i){var o,a;if(le.cors||Qt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e[\"X-Requested-With\"]||(e[\"X-Requested-With\"]=\"XMLHttpRequest\"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,\"abort\"===e?r.abort():\"error\"===e?\"number\"!=typeof r.status?t(0,\"error\"):t(r.status,r.statusText):t(Yt[r.status]||r.status,r.statusText,\"text\"!==(r.responseType||\"text\")||\"string\"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o(\"error\"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&ie.setTimeout(function(){o&&a()})},o=o(\"abort\");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),ce.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ce.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{\"text script\":function(e){return ce.globalEval(e),e}}}),ce.ajaxPrefilter(\"script\",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\")}),ce.ajaxTransport(\"script\",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=ce(\"<script>\").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on(\"load error\",i=function(e){r.remove(),i=null,e&&t(\"error\"===e.type?404:200,e.type)}),C.head.appendChild(r[0])},abort:function(){i&&i()}}});var Jt,Kt=[],Zt=/(=)\\?(?=&|$)|\\?\\?/;ce.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=Kt.pop()||ce.expando+\"_\"+jt.guid++;return this[e]=!0,e}}),ce.ajaxPrefilter(\"json jsonp\",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Zt.test(e.url)?\"url\":\"string\"==typeof e.data&&0===(e.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&Zt.test(e.data)&&\"data\");if(a||\"jsonp\"===e.dataTypes[0])return r=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Zt,\"$1\"+r):!1!==e.jsonp&&(e.url+=(At.test(e.url)?\"&\":\"?\")+e.jsonp+\"=\"+r),e.converters[\"script json\"]=function(){return o||ce.error(r+\" was not called\"),o[0]},e.dataTypes[0]=\"json\",i=ie[r],ie[r]=function(){o=arguments},n.always(function(){void 0===i?ce(ie).removeProp(r):ie[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Kt.push(r)),o&&v(i)&&i(o[0]),o=i=void 0}),\"script\"}),le.createHTMLDocument=((Jt=C.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===Jt.childNodes.length),ce.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(le.createHTMLDocument?((r=(t=C.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=C.location.href,t.head.appendChild(r)):t=C),o=!n&&[],(i=w.exec(e))?[t.createElement(i[1])]:(i=Ae([e],t,o),o&&o.length&&ce(o).remove(),ce.merge([],i.childNodes)));var r,i,o},ce.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(\" \");return-1<s&&(r=Tt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&\"object\"==typeof t&&(i=\"POST\"),0<a.length&&ce.ajax({url:e,type:i||\"GET\",dataType:\"html\",data:t}).done(function(e){o=arguments,a.html(r?ce(\"<div>\").append(ce.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},ce.expr.pseudos.animated=function(t){return ce.grep(ce.timers,function(e){return t===e.elem}).length},ce.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=ce.css(e,\"position\"),c=ce(e),f={};\"static\"===l&&(e.style.position=\"relative\"),s=c.offset(),o=ce.css(e,\"top\"),u=ce.css(e,\"left\"),(\"absolute\"===l||\"fixed\"===l)&&-1<(o+u).indexOf(\"auto\")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),v(t)&&(t=t.call(e,n,ce.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),\"using\"in t?t.using.call(e,f):c.css(f)}},ce.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ce.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if(\"fixed\"===ce.css(r,\"position\"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&\"static\"===ce.css(e,\"position\"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=ce(e).offset()).top+=ce.css(e,\"borderTopWidth\",!0),i.left+=ce.css(e,\"borderLeftWidth\",!0))}return{top:t.top-i.top-ce.css(r,\"marginTop\",!0),left:t.left-i.left-ce.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&\"static\"===ce.css(e,\"position\"))e=e.offsetParent;return e||J})}}),ce.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,i){var o=\"pageYOffset\"===i;ce.fn[t]=function(e){return M(this,function(e,t,n){var r;if(y(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),ce.each([\"top\",\"left\"],function(e,n){ce.cssHooks[n]=Ye(le.pixelPosition,function(e,t){if(t)return t=Ge(e,n),_e.test(t)?ce(e).position()[n]+\"px\":t})}),ce.each({Height:\"height\",Width:\"width\"},function(a,s){ce.each({padding:\"inner\"+a,content:s,\"\":\"outer\"+a},function(r,o){ce.fn[o]=function(e,t){var n=arguments.length&&(r||\"boolean\"!=typeof e),i=r||(!0===e||!0===t?\"margin\":\"border\");return M(this,function(e,t,n){var r;return y(e)?0===o.indexOf(\"outer\")?e[\"inner\"+a]:e.document.documentElement[\"client\"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body[\"scroll\"+a],r[\"scroll\"+a],e.body[\"offset\"+a],r[\"offset\"+a],r[\"client\"+a])):void 0===n?ce.css(e,t,i):ce.style(e,t,n,i)},s,n?e:void 0,n)}})}),ce.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(e,t){ce.fn[t]=function(e){return this.on(t,e)}}),ce.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.on(\"mouseenter\",e).on(\"mouseleave\",t||e)}}),ce.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,n){ce.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var en=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;ce.proxy=function(e,t){var n,r,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=ae.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(ae.call(arguments)))}).guid=e.guid=e.guid||ce.guid++,i},ce.holdReady=function(e){e?ce.readyWait++:ce.ready(!0)},ce.isArray=Array.isArray,ce.parseJSON=JSON.parse,ce.nodeName=fe,ce.isFunction=v,ce.isWindow=y,ce.camelCase=F,ce.type=x,ce.now=Date.now,ce.isNumeric=function(e){var t=ce.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},ce.trim=function(e){return null==e?\"\":(e+\"\").replace(en,\"$1\")},\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return ce});var tn=ie.jQuery,nn=ie.$;return ce.noConflict=function(e){return ie.$===ce&&(ie.$=nn),e&&ie.jQuery===ce&&(ie.jQuery=tn),ce},\"undefined\"==typeof e&&(ie.jQuery=ie.$=ce),ce});\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:04.498Z",
        "time": 47.612999973353,
        "timings": {
          "blocked": 39.53999999523908,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.426000015951693,
          "receive": 7.646999962162226,
          "_blocked_queueing": 36.73799999523908,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
          "lineNumber": 16
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/captive/awing-captive.min.css?v=RHHiZObHJAL977bXI4UD3x5f7eg",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "RHHiZObHJAL977bXI4UD3x5f7eg"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "cache-control",
              "value": "max-age=31536000,immutable"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "etag",
              "value": "\"RHHiZObHJAL977bXI4UD3x5f7eg\""
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 13:19:44 GMT"
            },
            {
              "name": "content-type",
              "value": "text/css; charset=UTF-8"
            },
            {
              "name": "last-modified",
              "value": "Wed, 26 Mar 2025 08:38:48 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 16262,
            "mimeType": "text/css",
            "text": "html{position:relative;min-height:100%}body{margin-bottom:36px}.awing-captive__state{margin:9em auto;margin-bottom:8px;text-align:center;outline:0;font-family:Arial,sans-serif;color:#252525}.awing-captive__state--img{width:80px;height:80px}.awing-captive__state--header{font-weight:bold;font-size:16px;margin-top:24px;margin-bottom:12px}.awing-captive__state--body{margin-bottom:24px}.awing-captive__state--footer{margin-top:16px}.awing-captive__state--footer__btn{background:#ed1c24;border-radius:4px;color:#fff!important;display:inline-block;font-size:16px;font-weight:500;padding:8px 25px;text-decoration:none;text-align:center;min-width:60px;position:relative;cursor:pointer;user-select:none}.awing-captive__state--text-align-left{text-align:left}.awing-captive__state--footer__btn:focus{outline:0}.awing-captive__blur{-webkit-filter:brightness(.6);filter:brightness(.6)}.state-language-switcher{text-align:right;font-weight:bold;font-size:14px;padding-top:10px}.state-language-switcher svg{margin-right:5px}.state-language-switcher .awing-translate{cursor:pointer;color:#d2d7dc;text-decoration:none;font-size:16px}.state-language-switcher .awing-active{color:#000}@media screen and (max-width:1024px){.awing-captive__state{padding:0 16px}.awing-captive__state .awing-captive__state--body{padding:0}}@media(max-width:640px){.awing-captive__state{margin:20vw auto}.state-language-switcher{padding-bottom:10px}.state-language-switcher svg{width:20px;height:20px}.state-language-switcher .awing-translate{font-size:18px}}.underline{text-decoration:underline;cursor:pointer!important;text-decoration-color:inherit!important;color:inherit!important}a.auto-href::after{content:attr(href)}.link-underline-primary{text-decoration:underline;cursor:pointer!important}.btn-tooltip{cursor:pointer}#awing-captive__login-loading[b-ac3khziyh2]{position:relative;text-align:center;padding-top:12%}.loading-header[b-ac3khziyh2]{margin-bottom:8px;padding-top:10vh}.loading-header>span[b-ac3khziyh2]{display:inline-block;font-size:24px}.progress[b-ac3khziyh2]{width:325px;height:6px;margin:auto}.progress-bar[b-ac3khziyh2]{-webkit-animation:progressBar 2s ease-in-out;-webkit-animation-fill-mode:both;-moz-animation:progressBar 2s ease-in-out;-moz-animation-fill-mode:both;animation:progressBar-b-ac3khziyh2 2s ease-in-out;animation-fill-mode:both;background-color:#ed1c24}@keyframes progressBar-b-ac3khziyh2{0%{width:0}100%{width:100%}}@-webkit-keyframes progressBar{0%{width:0}100%{width:100%}}@-moz-keyframes progressBar{0%{width:0}100%{width:100%}}@-ms-keyframes progressBar{0%{width:0}100%{width:100%}}@media only screen and (min-device-width:375px) and (max-device-width:820px) and (orientation:landscape){.loading-header>span[b-ac3khziyh2]{font-size:16px}}@media screen and (max-width:640px){.loading-header[b-ac3khziyh2]{margin-bottom:8px}.loading-header>span[b-ac3khziyh2]{font-size:16px}.progress[b-ac3khziyh2]{width:48%;height:6px}#awing-captive__loading[b-ac3khziyh2]{margin-top:16.2%}#awing-captive__loading.wa_loading-LP[b-ac3khziyh2]{margin-top:20.5%}}@media screen and (max-width:414px){#awing-captive__loading[b-ac3khziyh2]{margin-top:16.2%}#awing-captive__loading.wa_loading-LP[b-ac3khziyh2]{margin-top:19.4%}}@media screen and (max-width:375px){#awing-captive__loading[b-ac3khziyh2]{margin-top:16.5%}#awing-captive__loading.wa_loading-LP[b-ac3khziyh2]{margin-top:20.4%}}@media screen and (max-width:360px){.loading-header>span[b-ac3khziyh2]{font-size:15px}#awing-captive__loading[b-ac3khziyh2]{margin-top:16.8%}#awing-captive__loading.wa_loading-LP[b-ac3khziyh2]{margin-top:21%}}@media screen and (max-width:320px){#awing-captive__loading[b-ac3khziyh2]{margin-top:17.5%}#awing-captive__loading.wa_loading-LP[b-ac3khziyh2]{margin-top:22.7%}.loading-header>span[b-ac3khziyh2]{font-size:12px}}@media only screen and (min-device-width:768px) and (max-device-width:1024px) and (orientation:portrait){#awing-captive__loading[b-ac3khziyh2]{margin-top:14.6%}}@media only screen and (min-device-width:1024px) and (max-device-width:1366px) and (orientation:portrait){#awing-captive__loading[b-ac3khziyh2]{margin-top:8.3%}}@media only screen and (min-device-width:1024px) and (max-device-width:1366px) and (orientation:landscape){#awing-captive__loading[b-ac3khziyh2]{margin-top:5.5%}}@media only screen and (min-device-width:768px) and (max-device-width:1024px) and (orientation:landscape){#awing-captive__loading[b-ac3khziyh2]{margin-top:6.3%}}@media only screen and (max-device-width:820px) and (orientation:landscape){#awing-captive__loading[b-ac3khziyh2]{margin-top:8%}}@media only screen and (max-device-width:640px) and (orientation:landscape){#awing-captive__loading[b-ac3khziyh2]{margin-top:9.1%}}#awing-captive__welcome-loading[b-t6yo2uaw4d]{position:relative;text-align:center;padding-top:12%}.loading-header[b-t6yo2uaw4d]{margin-bottom:8px;padding-top:10vh}.loading-header>span[b-t6yo2uaw4d]{display:inline-block;font-size:24px}.loading-header .number[b-t6yo2uaw4d],.loading-header .unit[b-t6yo2uaw4d]{font-size:64px;color:#444;font-weight:bold;bottom:0}.linear-activity[b-t6yo2uaw4d]{overflow:hidden;width:325px;height:6px;background-color:#e3e3e3;border-radius:16px;margin:auto}.determinate[b-t6yo2uaw4d]{position:relative;max-width:100%;height:100%;-webkit-animation:progressBar 2s ease-in-out;-webkit-animation-fill-mode:both;-moz-animation:progressBar 2s ease-in-out;-moz-animation-fill-mode:both;animation:progressBar-b-t6yo2uaw4d 2s ease-in-out;animation-fill-mode:both;background-color:#ed1c24;border-radius:16px;margin:initial}@keyframes progressBar-b-t6yo2uaw4d{0%{width:0}}@-webkit-keyframes progressBar{0%{width:0}}@-moz-keyframes progressBar{0%{width:0}}@-ms-keyframes progressBar{0%{width:0}}@media only screen and (min-device-width:375px) and (max-device-width:820px) and (orientation:landscape){.loading-header>span[b-t6yo2uaw4d]{font-size:16px}}@media screen and (max-width:640px){.loading-header[b-t6yo2uaw4d]{margin-bottom:8px}.loading-header>span[b-t6yo2uaw4d]{font-size:16px}#awing-captive__loading[b-t6yo2uaw4d]{margin-top:16.2%}#awing-captive__loading.wa_loading-LP[b-t6yo2uaw4d]{margin-top:20.5%}}@media screen and (max-width:414px){#awing-captive__loading[b-t6yo2uaw4d]{margin-top:16.2%}#awing-captive__loading.wa_loading-LP[b-t6yo2uaw4d]{margin-top:19.4%}}@media screen and (max-width:375px){#awing-captive__loading[b-t6yo2uaw4d]{margin-top:16.5%}#awing-captive__loading.wa_loading-LP[b-t6yo2uaw4d]{margin-top:20.4%}}@media screen and (max-width:360px){.loading-header>span[b-t6yo2uaw4d]{font-size:15px}#awing-captive__loading[b-t6yo2uaw4d]{margin-top:16.8%}#awing-captive__loading.wa_loading-LP[b-t6yo2uaw4d]{margin-top:21%}}@media screen and (max-width:320px){.linear-activity[b-t6yo2uaw4d]{width:48%}#awing-captive__loading[b-t6yo2uaw4d]{margin-top:17.5%}#awing-captive__loading.wa_loading-LP[b-t6yo2uaw4d]{margin-top:22.7%}.loading-header>span[b-t6yo2uaw4d]{font-size:12px}}@media only screen and (min-device-width:768px) and (max-device-width:1024px) and (orientation:portrait){#awing-captive__loading[b-t6yo2uaw4d]{margin-top:14.6%}}@media only screen and (min-device-width:1024px) and (max-device-width:1366px) and (orientation:portrait){#awing-captive__loading[b-t6yo2uaw4d]{margin-top:8.3%}}@media only screen and (min-device-width:1024px) and (max-device-width:1366px) and (orientation:landscape){#awing-captive__loading[b-t6yo2uaw4d]{margin-top:5.5%}}@media only screen and (min-device-width:768px) and (max-device-width:1024px) and (orientation:landscape){#awing-captive__loading[b-t6yo2uaw4d]{margin-top:6.3%}}@media only screen and (max-device-width:820px) and (orientation:landscape){#awing-captive__loading[b-t6yo2uaw4d]{margin-top:8%}}@media only screen and (max-device-width:640px) and (orientation:landscape){#awing-captive__loading[b-t6yo2uaw4d]{margin-top:9.1%}}.insercure-conent-container>*[b-bw736ki3av]{font-family:Verdana,sans-serif!important;background:#fff}.img-fluid[b-bw736ki3av]{box-shadow:0 4px 8px rgba(0,0,0,.1),0 8px 16px rgba(0,0,0,.1)}a[b-bw736ki3av]{text-decoration:none;color:#000}h2[b-bw736ki3av]{font-size:28px;font-weight:bold}p[b-bw736ki3av]{font-size:16px;text-align:left}.help-text[b-bw736ki3av]{font-size:16px;font-style:italic}.text-start[b-bw736ki3av]{font-size:12px}.tooltip-text[b-bw736ki3av]{font-size:12px;letter-spacing:-.1px;text-align:left;color:#212121}.tooltip-text a[b-bw736ki3av]{color:#0e4fa1!important}#awing-allow-insercure-conent span[b-bw736ki3av]{display:inline-block}.tooltip-body[b-bw736ki3av]{border-bottom-right-radius:12px!important;border-bottom-left-radius:12px!important;border-top-right-radius:12px!important;border-top-left-radius:0!important;background-color:#e9ecef;padding:10px 16px!important}.textTransform[b-bw736ki3av]{text-transform:uppercase}.awing-active[b-bw736ki3av]{color:#0c559c}.awing-error-icon[b-bw736ki3av]{width:74px;height:74px}.awing-error-edge[b-bw736ki3av]{width:34px;height:34px}.awing-error-question[b-bw736ki3av]{width:15px;height:15px}.text-center p[b-bw736ki3av]{margin:5px 0}.mt-10[b-bw736ki3av]{margin-top:10px}.mt-1w[b-bw736ki3av]{margin-top:1vw!important}.mt-3w[b-bw736ki3av]{margin-top:3vw!important}.awing-btn-primary[b-bw736ki3av]{background-color:#ef4546;border:0!important;color:#fff;font-weight:normal;padding:15px 50px;border-radius:5px;font-size:15px}.awing-btn-primary:hover[b-bw736ki3av],.awing-btn-primary:active[b-bw736ki3av]{background-color:#ed2525}.awing-btn-primary-copy[b-bw736ki3av]{padding:5px 10px;font-size:14px}.copy-icon[b-bw736ki3av]{margin-left:5px;color:#fff}.awing-link-rollback[b-bw736ki3av]{cursor:pointer;text-decoration:underline;color:#0e4fa1}span.awing-step[b-bw736ki3av]{color:#ed2525;font-weight:bold}.awing-icon-ok[b-bw736ki3av]{width:13px;height:13px}.awing-qr-code-phone[b-bw736ki3av]{margin-left:100px}#guide-video-modal-close-button[b-bw736ki3av]{padding:0;width:16px;height:16px;z-index:6000;position:absolute;right:-.7%;text-shadow:none;opacity:1;margin-top:-.7%;border:0;background:#4e4e4e;color:#fff;border-radius:100px;font-size:12px}#awing-qr-guide[b-bw736ki3av]{margin-top:16px;width:50%;min-width:648px;background:#f5f5f5;padding:8px 40px;border-radius:10px}#awing-qr-guide p[b-bw736ki3av]{text-align:center}.state-language-switcher[b-bw736ki3av]{text-align:right;font-weight:bold;font-size:14px;padding-top:10px}.state-language-switcher .awing-translate[b-bw736ki3av]{cursor:pointer;color:#d2d7dc;text-decoration:none;font-size:16px}.state-language-switcher .awing-active[b-bw736ki3av]{color:#000}.state-language-switcher svg[b-bw736ki3av]{margin-top:-5px}.state-language-switcher[b-bw736ki3av]{text-align:left;padding-bottom:16px}.box-language[b-bw736ki3av]{text-align:right}.custom-list[b-bw736ki3av]{margin-bottom:0}.btn-tooltip[b-bw736ki3av]{cursor:pointer!important}.text-primary[b-bw736ki3av]{color:#005baf!important}.copy-container[b-bw736ki3av]{border:1px solid #6c757d;width:fit-content;display:flex;padding:8px 16px}@media only screen and (max-width:1280px){h2[b-bw736ki3av]{font-size:20px}p[b-bw736ki3av]{font-size:13px}.help-text[b-bw736ki3av]{font-size:12px}.awing-btn-primary[b-bw736ki3av]{padding:10px 20px;font-size:13px}.awing-qr-code-phone[b-bw736ki3av]{margin-left:50px}.awing-btn-primary-copy[b-bw736ki3av]{padding:5px 10px}}@media only screen and (max-width:768px){#awing-qr-guide[b-bw736ki3av]{min-width:100%}}@media(min-aspect-ratio:120/67){#guide-video-modal .modal-dialog[b-bw736ki3av]{max-width:164vh}}@media only screen and (max-width:1280px){h2[b-bw736ki3av]{font-size:20px}p[b-bw736ki3av]{font-size:13px}.help-text[b-bw736ki3av]{font-size:12px}.awing-btn-primary[b-bw736ki3av]{padding:10px 20px;font-size:13px}.awing-qr-code-phone[b-bw736ki3av]{margin-left:50px}.awing-btn-primary-copy[b-bw736ki3av]{padding:5px 10px}}@media(max-width:640px){.state-language-switcher[b-bw736ki3av]{padding-bottom:10px}.state-language-switcher svg[b-bw736ki3av]{width:20px;height:20px}.state-language-switcher .awing-translate[b-bw736ki3av]{font-size:18px}}.awing-captive__continue-scroll[b-z327fgq9jt]{position:fixed;bottom:20px;z-index:9;width:34px;-webkit-animation:sdb05 2s infinite;animation:sdb05-b-z327fgq9jt 2s infinite;right:27%;transition:.5s;-webkit-transition:.5s}.st0[b-z327fgq9jt]{stroke:#000;stroke-width:16;stroke-miterlimit:10}@-webkit-keyframes sdb05{0%{-webkit-transform:translate(0,0);opacity:0}50%{opacity:1}100%{-webkit-transform:translate(0,20px);opacity:0}}@keyframes sdb05-b-z327fgq9jt{0%{transform:translate(0,0);opacity:0}50%{opacity:1}100%{transform:translate(0,20px);opacity:0}}@media(max-width:640px){.awing-captive__continue-scroll[b-z327fgq9jt]{right:2%}}.footer[b-6hwrygmmwk]{position:absolute;bottom:0;width:100%;white-space:nowrap;height:36px;font-size:12px;padding:8px 0}.footer>div[b-6hwrygmmwk]{margin:auto 0;width:100%}button.disabled[b-6hwrygmmwk],button:disabled[b-6hwrygmmwk],.btn.disabled[b-6hwrygmmwk],.btn:disabled[b-6hwrygmmwk],fieldset:disabled[b-6hwrygmmwk]{opacity:100%!important}@media(max-width:400px){.footer[b-6hwrygmmwk]{font-size:10px}}#awing-captive__agreement .modal-header[b-j79ify5whn]{padding:2px 16px;background-color:#fff;color:#be1e2d;font-size:19px;display:block;border:0}#awing-captive__agreement p[b-j79ify5whn]{margin-top:1em;margin-bottom:1em}#awing-captive__agreement h4[b-j79ify5whn]{font-size:19px;font-weight:700;margin-top:1.33em}#pop_up h4[b-j79ify5whn]{margin-top:1.33em}.center_field[b-j79ify5whn]{text-align:center}#awing-captive__agreement .modal-body[b-j79ify5whn]{padding:2px 16px;font-size:13px}#awing-captive__agreement .modal-body h4[b-j79ify5whn]{font-size:13px}#awing-captive__agreement .modal-footer[b-j79ify5whn]{padding:14px 16px;border:0;display:block}#awing-captive__agreement .modal-footer>:not(:first-child)[b-j79ify5whn]{margin-left:auto}#awing-captive__agreement .modal-footer>:not(:last-child)[b-j79ify5whn]{margin-right:auto}#awing-captive__agreement .modal[b-j79ify5whn]{position:fixed;padding-top:1em;z-index:3000;left:0;top:0;width:100%;height:100%;overflow:auto;background-color:#000;background-color:rgba(0,0,0,.4)}#awing-captive__agreement .modal.show[b-j79ify5whn]{display:block}#awing-captive__agreement .modal-content[b-j79ify5whn]{position:relative;background-color:#fefefe;margin:5% auto;min-width:260px;padding:0;border:1px solid #888;width:90%;box-shadow:0 4px 8px 0 rgba(0,0,0,.2),0 6px 20px 0 rgba(0,0,0,.19);-webkit-animation-name:animatetop;-webkit-animation-duration:.4s;animation-name:animatetop;animation-duration:.4s;border-radius:0;display:block}#awing-captive__agreement a:not([href]):not([tabindex]).translate[b-j79ify5whn]{color:#000}#awing-captive__agreement a:not([href]):not([tabindex]).translate.red[b-j79ify5whn]{color:#be1e2d}#awing-captive__agreement .modal-header[b-j79ify5whn]{border-bottom:1px solid #e5e5e5;padding:15px;border-radius:10px 10px 0 0}#awing-captive__agreement .modal-title[b-j79ify5whn]{margin:0;line-height:1.42857143;font-family:'Tahoma',sans-serif;text-transform:uppercase;color:#000;font-size:15px}#awing-captive__agreement .close_btn[b-j79ify5whn]{margin-top:-2px;padding:0;cursor:pointer;border:0;float:right;line-height:1;text-shadow:0 1px 0 #fff;-webkit-appearance:none;-moz-appearance:none;background-color:#c90008;color:#fff;width:23px;height:24px;font-size:20px;border-radius:4px}#awing-captive__agreement .modal-body[b-j79ify5whn]::-webkit-scrollbar{-webkit-appearance:none;width:8px}#awing-captive__agreement .modal-body[b-j79ify5whn]::-webkit-scrollbar-track{background-color:#ebebeb;border-radius:8px}#awing-captive__agreement .modal-body[b-j79ify5whn]::-webkit-scrollbar-thumb{border-radius:8px;background-color:#ccc}.agreement-awing-active[b-j79ify5whn]{font-weight:bold}@media(orientation:landscape){#awing-captive__agreement .modal-content[b-j79ify5whn]{width:40%;margin-top:3%;max-width:700px}}@media(min-width:800px){#awing-captive__agreement .modal-content[b-j79ify5whn]{width:90%;margin-top:5%}}@media(max-height:310px){#awing-captive__agreement .modal-content[b-j79ify5whn]{width:90%;padding:1% 5%;margin-top:2%}}@media screen and (max-width:1024px){#awing-captive__agreement .modal-content[b-j79ify5whn]{width:90%}#awing-captive__agreement .modal[b-j79ify5whn]{padding-top:3em}}@media(max-width:320px) and (max-height:360px){#awing-captive__agreement .modal-content[b-j79ify5whn]{margin-top:5%}}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:04.498Z",
        "time": 42.02100000111386,
        "timings": {
          "blocked": 39.3640000240095,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.41099998800456516,
          "receive": 2.2459999890998006,
          "_blocked_queueing": 36.780000024009496,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
          "lineNumber": 17
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/captive/awing-captive-utils.min.js?v=wJF_5VXM8kyhQ_3MOpNLGrclOLI",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "wJF_5VXM8kyhQ_3MOpNLGrclOLI"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "cache-control",
              "value": "max-age=31536000,immutable"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "etag",
              "value": "\"wJF_5VXM8kyhQ_3MOpNLGrclOLI\""
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 13:19:45 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript; charset=UTF-8"
            },
            {
              "name": "last-modified",
              "value": "Tue, 14 Jan 2025 08:35:18 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 38147,
            "mimeType": "text/javascript",
            "text": "function _typeof(n){\"@babel/helpers - typeof\";return _typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&\"function\"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?\"symbol\":typeof n},_typeof(n)}var awingConstants={DEPA:\"http://deeplink.awing.vn/\",ANALYTIC_TYPE:{VIEW:\"View\",EVENT:\"Event\",CLICK:\"Click\",AUTHENTICATION:\"Authentication\"},AUTHEN_TYPE:{FORM:1,IFRAME:2},AJAX_TIMEOUT_DEFAULT:2e3,SEND_ANALYTIC_TIMEOUT_DEFAULT:5e3,CAMPAIGN_ROOT_ID:\"-1\",EVENT_MESSAGE:{GET_CAMPAIGN_COMPLETE:\"GetCampaignComplete\",LOADING_ANIMATION_LOGIN_COMPLETE:\"LoadingAnimationLoginComplete\",AUTHENTICATION_WITH_IFRAME_COMPLETE:\"7nfYjBbmv9XAXAyzNO6e8FhWp6DDAGYEUVFtDK6\",VIEW_EVENTLABEL_COMPLETE:\"ViewEventLabelComplete_\",ALL_EVENTS_SENT_COMPLETE:\"AllEventsSentComplete\",SEND_VIEW_COMPLETE:\"SendViewComplete\",SEND_AUTHENTICATION_COMPLETE:\"SendAuthenticationComplete\",SEND_CLICK_COMPLETE:\"SendClickComplete\"},DEFAULT_AD_HTML:{loginHtml:{pageViews:[{contentHtml:\"<style>@media (min-width: 1024px) { .banner-wrapper { max-width: 600px; } } @media (max-width: 1024px) { .banner-wrapper { min-height: 87vh; } }<\\/style><div class='container-fluid text-center'><div class='row justify-content-center'><div class='col-md-12 col-lg-5 h-100 p-0 banner-wrapper'><img id='banner' class='w-100' src='{image_path}' /><div class='w-100' style='padding-bottom: 15px; margin-top: 5px'><button id='acceptconnection_BannerOverflow' class='btn btn-primary connect-button' style='font-size: 14px; min-height: 45px; width: 80%' onClick='awingStateMachineContextActions.nextView()'><span>{content_button_connect}<\\/span> <\\/button><\\/div><\\/div><\\/div><\\/div><script> let bannerVariables = { background: '#f5eae1', connectButton: { background: '#0a151e', textColor: '#FFFFFF', }, bannerOptions: { clickable: true, } }; if (bannerVariables.bannerOptions.clickable) { $('#banner').attr('onClick', 'awingStateMachineContextActions.nextView()'); } $('.connect-button').css({ 'background-color': bannerVariables.connectButton.background, color: bannerVariables.connectButton.textColor, border: bannerVariables.connectButton.background == '#ffffff' ? '1px solid #231f20' : 'none', }); function startAnimation() { $('header').addClass('d-none'); $('.banner-wrapper').css('background', bannerVariables.background); }<\\/script>\"}]},welcomeHtml:{pageViews:[{contentHtml:'<a href=\"https://awing.vn\" id=\"landingpage\"><\\/a><script>awingCaptiveUtils.openLandingpage(\"landingpage\", \"\", \"\");&lt;/script&gt;'}]}},CAPTIVE_MODE:{STANDARD:\"STANDARD\",PREVIEW_PAGE:\"PREVIEW_PAGE\",PREVIEW_TEMPLATE:\"PREVIEW_TEMPLATE\",PREVIEW_DOMAIN:\"PREVIEW_DOMAIN\"},REPLACE_STATE_URL:\"/Connecting\"},awingCaptiveUtils,awingCaptiveDeviceUtils;(typeof module==\"undefined\"?\"undefined\":_typeof(module))===\"object\"&&_typeof(module.exports)===\"object\"&&(module.exports=awingConstants);awingCaptiveUtils={isOlderVersion:function(n,t){for(var r,u=n.split(\".\").map(Number),f=t.split(\".\").map(Number),e=Math.max(u.length,f.length),i=0;i<e;i++)if(r=Number(u[i]||0)-Number(f[i]||0),r!=0)return r>0;return!1},isBlockBrowser:function(){var n=awingCaptiveDeviceUtils.browserDetect();return[{name:\"Chrome\",version:\"52\"},{name:\"Chromium\",version:\"52\"},{name:\"Edge\",version:\"15\"},{name:\"Microsoft Edge\",version:\"15\"},{name:\"Firefox\",version:\"52\"},{name:\"Safari\",version:\"11\"},{name:\"AppleWebKit\",version:\"603.2.1\"},{name:\"Opera\",version:\"39\"},{name:\"Internet Explorer\",version:\"1100\"},{name:\"MSIE\",version:\"1000\"},{name:\"Trident\",version:\"1000\"},{name:\"NokiaBrowser\",version:\"9\"}].some(function(t){return t.name.toLowerCase()==String(n.name||\"Trident\").toLowerCase()&&this.isOlderVersion(t.version,n.version||\"999\")}.bind(this))},encodeJson:function(n){return n.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\")},decodeJson:function(n){return n?n.replace(/&amp;/g,\"&\").replace(/&lt;/g,\"<\").replace(/&gt;/g,\">\"):\"\"},isAndroidWebView:function(){var n=navigator.userAgent||navigator.vendor||window.opera;return n.indexOf(\"Android\")>=0&&n.indexOf(\"wv\")>=0},setCookie:function(n,t,i){var r=new Date,f=r.getTime(),e=0,u;e=i?f+1e3*i:f+18e5;r.setTime(e);u=t+\"; expires=\"+r.toUTCString();u+=\"; path=/\";document.cookie=n+\"=\"+u},getCookie:function(n){var t=document.cookie,i=t.indexOf(\" \"+n+\"=\"),r;return i==-1&&(i=t.indexOf(n+\"=\")),i==-1?t=null:(i=t.indexOf(\"=\",i)+1,r=t.indexOf(\";\",i),r==-1&&(r=t.length),t=t.substring(i,r)),t},deleteCookie:function(n){document.cookie=n+\"=;expires=Thu, 01 Jan 1970 00:00:01 GMT;\"},openLandingpage:function(n,t,i){var o=document.querySelector(\"#awing-captive__htmlscreen\"),r=o.querySelector(\"#\"+n),f=r.href,u=awingCaptiveDeviceUtils.detectDeviceInfo(),e=navigator.userAgent||window.opera;t===\"facebook\"?u.os!==\"iOS\"||e.match(/Safari/i)?u.os===\"Android\"?(setTimeout(function(){r.click()},200),window.location=\"fb://page/\"+i):r.click():u.osValue>=120?(setTimeout(function(){window.location.href=f},600),window.location=\"fb://profile/\"+i):u.osValue>=113?r.click():(setTimeout(function(){r.click()},200),window.location=\"fb://profile/\"+i):u.os!==\"iOS\"||e.match(/Safari/i)?r.click():u.osValue>=120?window.location.href=f:r.click()},openLandingpageV2:function(n,t,i,r){var f=awingCaptiveDeviceUtils.detectDeviceInfo(),o=navigator.userAgent||window.opera,u,e;!n||t||i||r?(e=awingConstants.DEPA+\"?url=\"+n+\"&deep_link=\"+t+\"&app_id=\"+r+\"&app_type=\"+i,window.location.href=e):(u=document.createElement(\"a\"),u.href=n,f.os!==\"iOS\"||o.match(/Safari/i)?u.click():f.osValue>=120?window.location.href=n:u.click())}};awingCaptiveDeviceUtils={detectDeviceInfo:function(){var n={deviceName:null,brandName:null,deviceCode:null,os:null,osValue:null,language:null},t,i,e,u,o,f,r,s,h;try{if(t=navigator.userAgent,n.language=navigator.language||navigator.userLanguage,i=t.substring(t.indexOf(\"(\")+1,t.indexOf(\")\")),t.match(/Windows NT/i)){for(n.deviceName=\"Windows\",n.os=\"Windows NT\",n.brandName=\"Microsoft\",n.deviceCode=\"PC\",e=i.split(\" \"),u=0;u<e.length;u++)if(e[u].trim()==\"NT\"){n.osValue=this.versionToValue(e[u+1].replace(/\\_/g,\".\"));break}return n}if(t.match(/Android/i)){for(n.deviceName=i.split(\";\")[2].trim(),o=i.split(\" \"),f=0;f<o.length;f++)if(o[f].trim()==\"Android\"){n.os=\"Android\";n.osValue=this.versionToValue(o[f+1].replace(/\\_/g,\".\"));break}for(androidDeviceList=this.getAndroidDeviceList(),r=0;r<androidDeviceList.length;r++)if(t.indexOf(androidDeviceList[r].deviceCode)!==-1){n.deviceName=androidDeviceList[r].deviceName;n.brandName=androidDeviceList[r].brandName;n.deviceCode=androidDeviceList[r].deviceCode;break}}else t.match(/iPhone/i)?(n.brandName=\"Apple\",n.os=\"iOS\",screen.height==568&&screen.width==320||screen.height==320&&screen.width==568?(n.deviceName=\"iPhone 5\",n.deviceCode=\"iPhone5\"):screen.height==375&&screen.width==667||screen.height==667?(n.deviceName=\"iPhone 6\",n.deviceCode=\"iPhone6\"):screen.height==414&&screen.width==736||screen.height==736?(n.deviceName=\"iPhone 6+\",n.deviceCode=\"iPhone6+\"):screen.height==375&&screen.width==812||screen.height==812?(n.deviceName=\"iPhone X\",n.deviceCode=\"iPhoneX\"):(screen.height==414&&screen.width==896||screen.height==896)&&devicePixelRatio==2?(n.deviceName=\"iPhone Xr\",n.deviceCode=\"iPhoneXr\"):screen.height==414&&screen.width==896||screen.height==896?(n.deviceName=\"iPhone Xs Max\",n.deviceCode=\"iPhoneXsMax\"):screen.height==390&&screen.width==844||screen.height==844?(n.deviceName=\"iPhone 12\",n.deviceCode=\"iPhone12\"):screen.height==393&&screen.width==852||screen.height==852?(n.deviceName=\"iPhone 14 Pro\",n.deviceCode=\"iPhone14Pro\"):screen.height==428&&screen.width==926||screen.height==926?(n.deviceName=\"iPhone 12 Pro Max\",n.deviceCode=\"iPhone12ProMax\"):screen.height==430&&screen.width==932||screen.height==932?(n.deviceName=\"iPhone 14 Pro Max\",n.deviceCode=\"iPhone14ProMax\"):screen.height==402&&screen.width==874||screen.height==874?(n.deviceName=\"iPhone 16 Pro\",n.deviceCode=\"iPhone16Pro\"):screen.height==440&&screen.width==956||screen.height==956?(n.deviceName=\"iPhone 16 Pro Max\",n.deviceCode=\"iPhone16ProMax\"):screen.height/screen.width==1.5&&devicePixelRatio==2?(n.deviceName=\"iPhone 4\",n.deviceCode=\"iPhone4\"):(n.deviceName=\"iPhone 3G\",n.deviceCode=\"iPhone3G\"),s=i.split(\";\")[1].split(\" \"),n.osValue=this.versionToValue(s[4].replace(/\\_/g,\".\"))):t.match(/iPad/i)?(n.brandName=\"Apple\",n.os=\"iOS\",screen.height==810&&screen.width==1080||screen.height==1080?(n.deviceName=\"iPad 7th gen\",n.deviceCode=\"iPad7thgen\"):screen.height==820&&screen.width==1180||screen.height==1180?(n.deviceName=\"iPad Air (4th gen)\",n.deviceCode=\"iPadAir4thgen\"):screen.height==834&&screen.width==1112||screen.height==1112?(n.deviceName=\"iPad Air 10.5\",n.deviceCode=\"iPadAir10.5\"):screen.height==834&&screen.width==1194||screen.height==1194?(n.deviceName=\"iPad Pro 10.5\",n.deviceCode=\"iPadPro10.5\"):screen.height==1024&&screen.width==1366||screen.height==1366?(n.deviceName=\"iPad Pro 12.9\",n.deviceCode=\"iPadPro12.9\"):(screen.height==768&&screen.width==1024||screen.height==1024)&&(devicePixelRatio==1?(n.deviceName=\"iPad 2\",n.deviceCode=\"iPad2\"):(n.deviceName=\"iPad 9.7\",n.deviceCode=\"iPad9.7\")),h=i.split(\";\")[1].split(\" \"),n.osValue=this.versionToValue(h[3].replace(/\\_/g,\".\"))):(n.deviceName=i.split(\";\")[0].trim(),n.os=i.split(\";\")[1].trim())}catch(c){console.log(c)}return n},compareDeviceInfo:function(n,t){return!n&&!t?!0:!n&&t?!1:n&&!t?!1:n.deviceName==t.deviceName&&n.brandName==t.brandName&&n.deviceCode==t.deviceCode&&n.os==t.os&&n.osValue==t.osValue&&n.language==t.language},versionToValue:function(n){var t=n.replace(\";\",\"\").split(\".\");return t.length>=2?parseInt(t[0].trim()+t[1].trim())||0:t.length>=1?parseInt(t[0].trim()+\"0\")||0:null},getAndroidDeviceList:function(){return[{deviceName:\"Samsung Galaxy S5\",brandName:\"Samsung\",deviceCode:\"SM-G900\"},{deviceName:\"Samsung Galaxy S6\",brandName:\"Samsung\",deviceCode:\"SM-G920\"},{deviceName:\"Samsung Galaxy S6 Edge\",brandName:\"Samsung\",deviceCode:\"SM-G925\"},{deviceName:\"Samsung Galaxy S6 Edge Plus\",brandName:\"Samsung\",deviceCode:\"SM-G928\"},{deviceName:\"Samsung Galaxy S7\",brandName:\"Samsung\",deviceCode:\"SM-G930\"},{deviceName:\"Samsung Galaxy S7 Edge\",brandName:\"Samsung\",deviceCode:\"SM-G935\"},{deviceName:\"Samsung Galaxy S8\",brandName:\"Samsung\",deviceCode:\"SM-G950\"},{deviceName:\"Samsung Galaxy S8 Plus\",brandName:\"Samsung\",deviceCode:\"SM-G955\"},{deviceName:\"Samsung Galaxy S9\",brandName:\"Samsung\",deviceCode:\"SM-G960\"},{deviceName:\"Samsung Galaxy S9 Plus\",brandName:\"Samsung\",deviceCode:\"SM-G965\"},{deviceName:\"Samsung Galaxy S10e\",brandName:\"Samsung\",deviceCode:\"SM-G970\"},{deviceName:\"Samsung Galaxy S10\",brandName:\"Samsung\",deviceCode:\"SM-G973\"},{deviceName:\"Samsung Galaxy S10 Plus\",brandName:\"Samsung\",deviceCode:\"SM-G975\"},{deviceName:\"Samsung Galaxy S10 5G\",brandName:\"Samsung\",deviceCode:\"SM-G977\"},{deviceName:\"Samsung Galaxy S20\",brandName:\"Samsung\",deviceCode:\"SM-G980\"},{deviceName:\"Samsung Galaxy S21\",brandName:\"Samsung\",deviceCode:\"SM-G996\"},{deviceName:\"Samsung Galaxy S22\",brandName:\"Samsung\",deviceCode:\"SM-S906\"},{deviceName:\"Samsung Galaxy Note 3\",brandName:\"Samsung\",deviceCode:\"SM-N900\"},{deviceName:\"Samsung Galaxy Note 4\",brandName:\"Samsung\",deviceCode:\"SM-N910\"},{deviceName:\"Samsung Galaxy Note Edge\",brandName:\"Samsung\",deviceCode:\"SM-N915\"},{deviceName:\"Samsung Galaxy Note 5\",brandName:\"Samsung\",deviceCode:\"SM-N920\"},{deviceName:\"Samsung Galaxy Note 7\",brandName:\"Samsung\",deviceCode:\"SM-N930\"},{deviceName:\"Samsung Galaxy Note FE\",brandName:\"Samsung\",deviceCode:\"SM-N935\"},{deviceName:\"Samsung Galaxy Note 8\",brandName:\"Samsung\",deviceCode:\"SM-N950\"},{deviceName:\"Samsung Galaxy Note 9\",brandName:\"Samsung\",deviceCode:\"SM-N960\"},{deviceName:\"Samsung Galaxy Note 10\",brandName:\"Samsung\",deviceCode:\"SM-N970\"},{deviceName:\"Samsung Galaxy Note 10 5G\",brandName:\"Samsung\",deviceCode:\"SM-N971\"},{deviceName:\"Samsung Galaxy Note 10 Plus\",brandName:\"Samsung\",deviceCode:\"SM-N975\"},{deviceName:\"Samsung Galaxy Note 10 Plus 5G\",brandName:\"Samsung\",deviceCode:\"SM-N976\"},{deviceName:\"Samsung Galaxy A3 (2017)\",brandName:\"Samsung\",deviceCode:\"SM-A320\"},{deviceName:\"Samsung Galaxy A5 (2015)\",brandName:\"Samsung\",deviceCode:\"SM-A500\"},{deviceName:\"Samsung Galaxy A5 (2016)\",brandName:\"Samsung\",deviceCode:\"SM-A510\"},{deviceName:\"Samsung Galaxy A5 (2017)\",brandName:\"Samsung\",deviceCode:\"SM-A520\"},{deviceName:\"Samsung Galaxy A5 (2018)\",brandName:\"Samsung\",deviceCode:\"SM-A530\"},{deviceName:\"Samsung Galaxy A6 (2018)\",brandName:\"Samsung\",deviceCode:\"SM-A600\"},{deviceName:\"Samsung Galaxy A6+ (2018)\",brandName:\"Samsung\",deviceCode:\"SM-A605\"},{deviceName:\"Samsung Galaxy A7 (2016)\",brandName:\"Samsung\",deviceCode:\"SM-A710\"},{deviceName:\"Samsung Galaxy A7 (2017)\",brandName:\"Samsung\",deviceCode:\"SM-A720\"},{deviceName:\"Samsung Galaxy A7 (2018)\",brandName:\"Samsung\",deviceCode:\"SM-A750\"},{deviceName:\"Samsung Galaxy A8\",brandName:\"Samsung\",deviceCode:\"SM-A800\"},{deviceName:\"Samsung Galaxy A8 Star\",brandName:\"Samsung\",deviceCode:\"SM-G8850\"},{deviceName:\"Samsung Galaxy A9 Pro\",brandName:\"Samsung\",deviceCode:\"SM-A910\"},{deviceName:\"Samsung Galaxy A9 (2018)\",brandName:\"Samsung\",deviceCode:\"SM-A920\"},{deviceName:\"Samsung Galaxy A10\",brandName:\"Samsung\",deviceCode:\"SM-A105\"},{deviceName:\"Samsung Galaxy A10e\",brandName:\"Samsung\",deviceCode:\"SM-A102\"},{deviceName:\"Samsung Galaxy A10s\",brandName:\"Samsung\",deviceCode:\"SM-A107\"},{deviceName:\"Samsung Galaxy A20\",brandName:\"Samsung\",deviceCode:\"SM-A205\"},{deviceName:\"Samsung Galaxy A20e\",brandName:\"Samsung\",deviceCode:\"SM-A202\"},{deviceName:\"Samsung Galaxy A20s\",brandName:\"Samsung\",deviceCode:\"SM-A207\"},{deviceName:\"Samsung Galaxy A30\",brandName:\"Samsung\",deviceCode:\"SM-A305\"},{deviceName:\"Samsung Galaxy A40\",brandName:\"Samsung\",deviceCode:\"SM-A405\"},{deviceName:\"Samsung Galaxy A50\",brandName:\"Samsung\",deviceCode:\"SM-A505\"},{deviceName:\"Samsung Galaxy A60\",brandName:\"Samsung\",deviceCode:\"SM-A606\"},{deviceName:\"Samsung Galaxy A70\",brandName:\"Samsung\",deviceCode:\"SM-A705\"},{deviceName:\"Samsung Galaxy A80\",brandName:\"Samsung\",deviceCode:\"SM-A805\"},{deviceName:\"Samsung Galaxy J3 Pro\",brandName:\"Samsung\",deviceCode:\"SM-J310\"},{deviceName:\"Samsung Galaxy J7 Prime\",brandName:\"Samsung\",deviceCode:\"SM-G610\"},{deviceName:\"Samsung Galaxy J7 Max\",brandName:\"Samsung\",deviceCode:\"SM-G615\"},{deviceName:\"Samsung Galaxy C5\",brandName:\"Samsung\",deviceCode:\"SM-C5000\"},{deviceName:\"Samsung Galaxy C7\",brandName:\"Samsung\",deviceCode:\"SM-C7000\"},{deviceName:\"Samsung Galaxy M10\",brandName:\"Samsung\",deviceCode:\"SM-M105\"},{deviceName:\"Samsung Galaxy M20\",brandName:\"Samsung\",deviceCode:\"SM-M205\"},{deviceName:\"Samsung Galaxy Tab A 10.1 (2019)\",brandName:\"Samsung\",deviceCode:\"SM-T520\"},{deviceName:\"Samsung Galaxy Tab A 10.1 (2019)\",brandName:\"Samsung\",deviceCode:\"SM-T525\"},{deviceName:\"Samsung Galaxy Tab S5e Wi-FI\",brandName:\"Samsung\",deviceCode:\"SM-T720\"},{deviceName:\"Samsung Galaxy Tab S5e LTE\",brandName:\"Samsung\",deviceCode:\"SM-T725\"},{deviceName:\"Samsung Galaxy Fold\",brandName:\"Samsung\",deviceCode:\"SM-F900\"},{deviceName:\"Samsung Galaxy Z Flip\",brandName:\"Samsung\",deviceCode:\"SM-F700\"},{deviceName:\"Samsung Galaxy Z Fold 2 5G\",brandName:\"Samsung\",deviceCode:\"SM-F916\"},{deviceName:\"Samsung Galaxy Z Fold 3 5G\",brandName:\"Samsung\",deviceCode:\"SM-F926\"},{deviceName:\"Google Pixel 2\",brandName:\"Google\",deviceCode:\"Pixel 2\"},{deviceName:\"Google Pixel 3\",brandName:\"Google\",deviceCode:\"Pixel 3\"},{deviceName:\"Google Pixel 4\",brandName:\"Google\",deviceCode:\"Pixel 4\"},{deviceName:\"Google Pixel 5\",brandName:\"Google\",deviceCode:\"Pixel 5\"},{deviceName:\"Google Pixel 6\",brandName:\"Google\",deviceCode:\"Pixel 6\"},{deviceName:\"Oppo F1s\",brandName:\"Oppo\",deviceCode:\"A1601\"},{deviceName:\"Oppo A1k\",brandName:\"Oppo\",deviceCode:\"CPH1923\"},{deviceName:\"Oppo F3\",brandName:\"Oppo\",deviceCode:\"CPH1609\"},{deviceName:\"Oppo F3 Plus\",brandName:\"Oppo\",deviceCode:\"CPH1613\"},{deviceName:\"Oppo F5\",brandName:\"Oppo\",deviceCode:\"CPH1723\"},{deviceName:\"Oppo F5 Youth\",brandName:\"Oppo\",deviceCode:\"CPH1725\"},{deviceName:\"Oppo F7\",brandName:\"Oppo\",deviceCode:\"CPH1819\"},{deviceName:\"Oppo F9\",brandName:\"Oppo\",deviceCode:\"CPH1823\"},{deviceName:\"Oppo F11\",brandName:\"Oppo\",deviceCode:\"CPH1911\"},{deviceName:\"Oppo F11 Pro\",brandName:\"Oppo\",deviceCode:\"CPH1969\"},{deviceName:\"Oppo A30\",brandName:\"Oppo\",deviceCode:\"OPPO A30\"},{deviceName:\"Oppo A37\",brandName:\"Oppo\",deviceCode:\"OPPO A37\"},{deviceName:\"Oppo A71\",brandName:\"Oppo\",deviceCode:\"CPH1717\"},{deviceName:\"Oppo A71\",brandName:\"Oppo\",deviceCode:\"CPH1801\"},{deviceName:\"Oppo A77\",brandName:\"Oppo\",deviceCode:\"CPH1715\"},{deviceName:\"Oppo A57\",brandName:\"Oppo\",deviceCode:\"CPH1701\"},{deviceName:\"Oppo A79\",brandName:\"Oppo\",deviceCode:\"OPPO A79\"},{deviceName:\"Oppo A83\",brandName:\"Oppo\",deviceCode:\"CPH1729\"},{deviceName:\"Oppo A83 (2018)\",brandName:\"Oppo\",deviceCode:\"CPH1827\"},{deviceName:\"Oppo A3\",brandName:\"Oppo\",deviceCode:\"CPH1837\"},{deviceName:\"Oppo A73T\",brandName:\"Oppo\",deviceCode:\"OPPO A73t\"},{deviceName:\"Oppo A3S\",brandName:\"Oppo\",deviceCode:\"CPH1803\"},{deviceName:\"Oppo A7\",brandName:\"Oppo\",deviceCode:\"CPH1901\"},{deviceName:\"Oppo A5s\",brandName:\"Oppo\",deviceCode:\"CPH1909\"},{deviceName:\"Oppo A5 (2020)\",brandName:\"Oppo\",deviceCode:\"CPH1931\"},{deviceName:\"Oppo Find 5\",brandName:\"Oppo\",deviceCode:\"X909\"},{deviceName:\"Oppo Find 7\",brandName:\"Oppo\",deviceCode:\"X9076\"},{deviceName:\"Oppo Find X\",brandName:\"Oppo\",deviceCode:\"CPH1871\"},{deviceName:\"Oppo Find X\",brandName:\"Oppo\",deviceCode:\"PAFM00\"},{deviceName:\"Oppo R1S\",brandName:\"Oppo\",deviceCode:\"R8000\"},{deviceName:\"Oppo R3\",brandName:\"Oppo\",deviceCode:\"R7005\"},{deviceName:\"Oppo R5\",brandName:\"Oppo\",deviceCode:\"R8106\"},{deviceName:\"Oppo R7\",brandName:\"Oppo\",deviceCode:\"OPPO R7\"},{deviceName:\"Oppo R7 Plus\",brandName:\"Oppo\",deviceCode:\"R7plus\"},{deviceName:\"Oppo R9\",brandName:\"Oppo\",deviceCode:\"OPPO R9\"},{deviceName:\"Oppo R9s\",brandName:\"Oppo\",deviceCode:\"OPPO R9s\"},{deviceName:\"Oppo R9 Plus\",brandName:\"Oppo\",deviceCode:\"CPH1611\"},{deviceName:\"Oppo R11\",brandName:\"Oppo\",deviceCode:\"CPH1707\"},{deviceName:\"Oppo R11 Plus\",brandName:\"Oppo\",deviceCode:\"OPPO R11 Plus\"},{deviceName:\"Oppo R11s\",brandName:\"Oppo\",deviceCode:\"OPPO R11s\"},{deviceName:\"Oppo R11s Plus\",brandName:\"Oppo\",deviceCode:\"CPH1721\"},{deviceName:\"Oppo R15\",brandName:\"Oppo\",deviceCode:\"PACT00\"},{deviceName:\"Oppo R15\",brandName:\"Oppo\",deviceCode:\"PACM00\"},{deviceName:\"Oppo R15 Pro\",brandName:\"Oppo\",deviceCode:\"CPH1831\"},{deviceName:\"Oppo R17\",brandName:\"Oppo\",deviceCode:\"PBEM00\"},{deviceName:\"Oppo R17 Pro\",brandName:\"Oppo\",deviceCode:\"PBDT00\"},{deviceName:\"Oppo K3\",brandName:\"Oppo\",deviceCode:\"CPH1955\"},{deviceName:\"Oppo K5\",brandName:\"Oppo\",deviceCode:\"PCNM00\"},{deviceName:\"Oppo Reno\",brandName:\"Oppo\",deviceCode:\"CPH1917\"},{deviceName:\"Oppo Reno\",brandName:\"Oppo\",deviceCode:\"PCAT00\"},{deviceName:\"Oppo Reno Z\",brandName:\"Oppo\",deviceCode:\"CPH1979\"},{deviceName:\"Oppo Reno2\",brandName:\"Oppo\",deviceCode:\"CPH1907\"},{deviceName:\"Oppo Reno2 Z\",brandName:\"Oppo\",deviceCode:\"CPH1945\"},{deviceName:\"Oppo Reno2 F\",brandName:\"Oppo\",deviceCode:\"CPH1989\"},{deviceName:\"Oppo Reno Ace\",brandName:\"Oppo\",deviceCode:\"PCLM10\"},{deviceName:\"Oppo Reno 10x Zoom\",brandName:\"Oppo\",deviceCode:\"CPH1919\"},{deviceName:\"Oppo Reno 5G\",brandName:\"Oppo\",deviceCode:\"CPH1921\"},{deviceName:\"Xiaomi Mi 1S\",brandName:\"Xiaomi\",deviceCode:\"MI 1S\"},{deviceName:\"Xiaomi Mi 1\",brandName:\"Xiaomi\",deviceCode:\"MI1\"},{deviceName:\"Xiaomi Mi 2S\",brandName:\"Xiaomi\",deviceCode:\"MI 2S\"},{deviceName:\"Xiaomi Mi 2A\",brandName:\"Xiaomi\",deviceCode:\"MI 2A\"},{deviceName:\"Xiaomi Mi 2\",brandName:\"Xiaomi\",deviceCode:\"MI 2\"},{deviceName:\"Xiaomi Mi 3\",brandName:\"Xiaomi\",deviceCode:\"MI 3\"},{deviceName:\"Xiaomi Mi 4s\",brandName:\"Xiaomi\",deviceCode:\"MI 4S\"},{deviceName:\"Xiaomi Mi 4\",brandName:\"Xiaomi\",deviceCode:\"MI 4\"},{deviceName:\"Xiaomi Mi 4c\",brandName:\"Xiaomi\",deviceCode:\"M4C\"},{deviceName:\"Xiaomi Mi 5s Plus\",brandName:\"Xiaomi\",deviceCode:\"MI 5s Plus\"},{deviceName:\"Xiaomi Mi 5s\",brandName:\"Xiaomi\",deviceCode:\"MI 5s\"},{deviceName:\"Xiaomi Mi 5c\",brandName:\"Xiaomi\",deviceCode:\"MI 5C\"},{deviceName:\"Xiaomi Mi 5X\",brandName:\"Xiaomi\",deviceCode:\"MI 5X\"},{deviceName:\"Xiaomi Mi 5\",brandName:\"Xiaomi\",deviceCode:\"MI 5\"},{deviceName:\"Xiaomi Mi 6X\",brandName:\"Xiaomi\",deviceCode:\"MI 6X\"},{deviceName:\"Xiaomi Mi 6\",brandName:\"Xiaomi\",deviceCode:\"MI 6\"},{deviceName:\"Xiaomi Mi A2 Lite\",brandName:\"Xiaomi\",deviceCode:\"Mi A2 Lite\"},{deviceName:\"Xiaomi Mi A2\",brandName:\"Xiaomi\",deviceCode:\"Mi A2\"},{deviceName:\"Xiaomi Mi 8 SE\",brandName:\"Xiaomi\",deviceCode:\"MI 8 SE\"},{deviceName:\"Xiaomi Mi 8 Lite\",brandName:\"Xiaomi\",deviceCode:\"MI 8 Lite\"},{deviceName:\"Xiaomi Mi 8\",brandName:\"Xiaomi\",deviceCode:\"MI 8\"},{deviceName:\"Xiaomi Mi 9 SE\",brandName:\"Xiaomi\",deviceCode:\"MI 9 SE\"},{deviceName:\"Xiaomi Mi 9T\",brandName:\"Xiaomi\",deviceCode:\"Mi 9T\"},{deviceName:\"Xiaomi Mi 9 Lite\",brandName:\"Xiaomi\",deviceCode:\"Mi 9 Lite\"},{deviceName:\"Xiaomi Mi 9 Pro\",brandName:\"Xiaomi\",deviceCode:\"Mi9 Pro\"},{deviceName:\"Xiaomi Mi 9\",brandName:\"Xiaomi\",deviceCode:\"MI 9\"},{deviceName:\"Xiaomi Mi CC 9e\",brandName:\"Xiaomi\",deviceCode:\"MI CC 9e\"},{deviceName:\"Xiaomi Mi CC 9\",brandName:\"Xiaomi\",deviceCode:\"MI CC 9\"},{deviceName:\"Xiaomi Mi Note Pro\",brandName:\"Xiaomi\",deviceCode:\"MI NOTE Pro\"},{deviceName:\"Xiaomi MI Note 2\",brandName:\"Xiaomi\",deviceCode:\"Mi Note 2\"},{deviceName:\"Xiaomi Mi Note 3\",brandName:\"Xiaomi\",deviceCode:\"Mi Note 3\"},{deviceName:\"Xiaomi Mi Note\",brandName:\"Xiaomi\",deviceCode:\"MI NOTE\"},{deviceName:\"Xiaomi Mi Max 2\",brandName:\"Xiaomi\",deviceCode:\"MI MAX 2\"},{deviceName:\"Xiaomi Mi Max 3\",brandName:\"Xiaomi\",deviceCode:\"MI MAX 3\"},{deviceName:\"Xiaomi Mi Max Prime\",brandName:\"Xiaomi\",deviceCode:\"Mi Max Prime\"},{deviceName:\"Xiaomi Mi Max\",brandName:\"Xiaomi\",deviceCode:\"MI MAX\"},{deviceName:\"Xiaomi Mi MIX 2S\",brandName:\"Xiaomi\",deviceCode:\"Mi MIX 2S\"},{deviceName:\"Xiaomi Mi MIX 2\",brandName:\"Xiaomi\",deviceCode:\"Mi MIX 2\"},{deviceName:\"Xiaomi Mi MIX 3\",brandName:\"Xiaomi\",deviceCode:\"Mi MIX 3\"},{deviceName:\"Xiaomi Mi MIX\",brandName:\"Xiaomi\",deviceCode:\"MI MIX\"},{deviceName:\"Xiaomi Mi Pad 2\",brandName:\"Xiaomi\",deviceCode:\"MI PAD 2\"},{deviceName:\"Xiaomi Mi Pad 3\",brandName:\"Xiaomi\",deviceCode:\"MI PAD 3\"},{deviceName:\"Xiaomi Mi Pad 4 Plus\",brandName:\"Xiaomi\",deviceCode:\"MI PAD 4 PLUS\"},{deviceName:\"Xiaomi Mi Pad 4\",brandName:\"Xiaomi\",deviceCode:\"MI PAD 4\"},{deviceName:\"Xiaomi Mi Pad\",brandName:\"Xiaomi\",deviceCode:\"MI PAD\"},{deviceName:\"Xiaomi Redmi 1S\",brandName:\"Xiaomi\",deviceCode:\"HM 1S\"},{deviceName:\"Xiaomi Redmi 3S\",brandName:\"Xiaomi\",deviceCode:\"Redmi 3S\"},{deviceName:\"Xiaomi Redmi 3X\",brandName:\"Xiaomi\",deviceCode:\"Redmi 3X\"},{deviceName:\"Xiaomi Redmi 3\",brandName:\"Xiaomi\",deviceCode:\"Redmi 3\"},{deviceName:\"Xiaomi Redmi Pro\",brandName:\"Xiaomi\",deviceCode:\"Redmi Pro\"},{deviceName:\"Xiaomi Redmi 4A\",brandName:\"Xiaomi\",deviceCode:\"Redmi 4A\"},{deviceName:\"Xiaomi Redmi 4X\",brandName:\"Xiaomi\",deviceCode:\"Redmi 4X\"},{deviceName:\"Xiaomi Redmi 4 Prime\",brandName:\"Xiaomi\",deviceCode:\"Redmi 4 Prime\"},{deviceName:\"Xiaomi Redmi 4 Pro\",brandName:\"Xiaomi\",deviceCode:\"Redmi 4 Pro\"},{deviceName:\"Xiaomi Redmi 4\",brandName:\"Xiaomi\",deviceCode:\"Redmi 4\"},{deviceName:\"Xiaomi Redmi 5 Plus\",brandName:\"Xiaomi\",deviceCode:\"Redmi 5 Plus\"},{deviceName:\"Xiaomi Redmi 5A\",brandName:\"Xiaomi\",deviceCode:\"Redmi 5A\"},{deviceName:\"Xiaomi Redmi 5\",brandName:\"Xiaomi\",deviceCode:\"Redmi 5\"},{deviceName:\"Xiaomi Redmi 6A\",brandName:\"Xiaomi\",deviceCode:\"Redmi 6A\"},{deviceName:\"Xiaomi Redmi 6 Pro\",brandName:\"Xiaomi\",deviceCode:\"Redmi 6 Pro\"},{deviceName:\"Xiaomi Redmi 6\",brandName:\"Xiaomi\",deviceCode:\"Redmi 6\"},{deviceName:\"Xiaomi Redmi Go\",brandName:\"Xiaomi\",deviceCode:\"Redmi Go\"},{deviceName:\"Xiaomi Redmi 7A\",brandName:\"Xiaomi\",deviceCode:\"Redmi 7A\"},{deviceName:\"Xiaomi Redmi 7\",brandName:\"Xiaomi\",deviceCode:\"Redmi 7\"},{deviceName:\"Xiaomi Redmi Y1 Lite\",brandName:\"Xiaomi\",deviceCode:\"Redmi Y1 Lite\"},{deviceName:\"Xiaomi Redmi Y1\",brandName:\"Xiaomi\",deviceCode:\"Redmi Y1\"},{deviceName:\"Xiaomi Redmi Y2\",brandName:\"Xiaomi\",deviceCode:\"Redmi Y2\"},{deviceName:\"Xiaomi Redmi Y3\",brandName:\"Xiaomi\",deviceCode:\"Redmi Y3\"},{deviceName:\"Xiaomi Redmi 8A\",brandName:\"Xiaomi\",deviceCode:\"Redmi 8A\"},{deviceName:\"Xiaomi Redmi 8\",brandName:\"Xiaomi\",deviceCode:\"Redmi 8\"},{deviceName:\"Xiaomi Redmi K20 Pro Premium Edition\",brandName:\"Xiaomi\",deviceCode:\"Redmi K20 Pro Premium Edition\"},{deviceName:\"Xiaomi Redmi K20 Pro\",brandName:\"Xiaomi\",deviceCode:\"Redmi K20 Pro\"},{deviceName:\"Xiaomi Redmi K20\",brandName:\"Xiaomi\",deviceCode:\"Redmi K20\"},{deviceName:\"Xiaomi Redmi Note 2\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 2\"},{deviceName:\"Xiaomi Redmi Note 3\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 3\"},{deviceName:\"Xiaomi Redmi Note 4X\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 4X\"},{deviceName:\"Xiaomi Redmi Note 4\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 4\"},{deviceName:\"Xiaomi Redmi Note 5 Pro\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 5 Pro\"},{deviceName:\"Xiaomi Redmi Note 5A Prime\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 5A Prime\"},{deviceName:\"Xiaomi Redmi Note 5A\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 5A\"},{deviceName:\"Xiaomi Redmi Note 5\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 5\"},{deviceName:\"Xiaomi Redmi Note 6 Pro\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 6 Pro\"},{deviceName:\"Xiaomi Redmi Note 7 Pro\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 7 Pro\"},{deviceName:\"Xiaomi Redmi Note 7S\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 7S\"},{deviceName:\"Xiaomi Redmi Note 7\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 7\"},{deviceName:\"Xiaomi Redmi Note 8 Pro\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 8 Pro\"},{deviceName:\"Xiaomi Redmi Note 8\",brandName:\"Xiaomi\",deviceCode:\"Redmi Note 8\"},{deviceName:\"Huawei Ascend D1 Quad\",brandName:\"Huawei\",deviceCode:\"Ascend D1 Quad\"},{deviceName:\"Huawei Ascend D2\",brandName:\"Huawei\",deviceCode:\"HUAWEI D2\"},{deviceName:\"Huawei Ascend G300\",brandName:\"Huawei\",deviceCode:\"HuaweiU881\"},{deviceName:\"Huawei Ascend G510\",brandName:\"Huawei\",deviceCode:\"HUAWEI T8951\"},{deviceName:\"Huawei Ascend G526\",brandName:\"Huawei\",deviceCode:\"HuaweiG526\"},{deviceName:\"Huawei Ascend G535\",brandName:\"Huawei\",deviceCode:\"HuaweiG535\"},{deviceName:\"Huawei Ascend G610\",brandName:\"Huawei\",deviceCode:\"HuaweiG610\"},{deviceName:\"Huawei Ascend G615\",brandName:\"Huawei\",deviceCode:\"HuaweiG615\"},{deviceName:\"Huawei Ascend G620S\",brandName:\"Huawei\",deviceCode:\"HuaweiG620S\"},{deviceName:\"Huawei Ascend G630\",brandName:\"Huawei\",deviceCode:\"HuaweiG630\"},{deviceName:\"Huawei Ascend G700\",brandName:\"Huawei\",deviceCode:\"HuaweiG700\"},{deviceName:\"Huawei Ascend G740\",brandName:\"Huawei\",deviceCode:\"HuaweiG740\"},{deviceName:\"Huawei Ascend G7\",brandName:\"Huawei\",deviceCode:\"HuaweiG7\"},{deviceName:\"Huawei Ascend G8\",brandName:\"Huawei\",deviceCode:\"HuaweiRIO\"},{deviceName:\"Huawei G9 Pro\",brandName:\"Huawei\",deviceCode:\"HUAWEIMLA\"},{deviceName:\"Huawei Ascend Mate\",brandName:\"Huawei\",deviceCode:\"HuaweiMT1\"},{deviceName:\"Huawei Ascend Mate 2\",brandName:\"Huawei\",deviceCode:\"HuaweiMT2\"},{deviceName:\"Huawei Ascend Mate 7\",brandName:\"Huawei\",deviceCode:\"HuaweiMT7\"},{deviceName:\"Huawei Mate S\",brandName:\"Huawei\",deviceCode:\"HUAWEICRR\"},{deviceName:\"Huawei Mate SE\",brandName:\"Huawei\",deviceCode:\"HUAWEIBND\"},{deviceName:\"Huawei Mate 8\",brandName:\"Huawei\",deviceCode:\"HUAWEINXT\"},{deviceName:\"Huawei Mate 9\",brandName:\"Huawei\",deviceCode:\"HUAWEIMHA\"},{deviceName:\"Huawei Mate 9 Lite\",brandName:\"Huawei\",deviceCode:\"HUAWEIBLL\"},{deviceName:\"Huawei Mate 9 Pro\",brandName:\"Huawei\",deviceCode:\"HUAWEILON\"},{deviceName:\"Huawei Mate 10\",brandName:\"Huawei\",deviceCode:\"HUAWEIALP\"},{deviceName:\"Huawei Mate 10 Pro\",brandName:\"Huawei\",deviceCode:\"HUAWEIBLA\"},{deviceName:\"Huawei Mate 10 Lite\",brandName:\"Huawei\",deviceCode:\"HUAWEIRNE\"},{deviceName:\"Huawei Porsche Design Mate RS\",brandName:\"Huawei\",deviceCode:\"HUAWEINEO-L29\"},{deviceName:\"Huawei Mate 20\",brandName:\"Huawei\",deviceCode:\"HUAWEIHMA\"},{deviceName:\"Huawei Mate 20 Pro\",brandName:\"Huawei\",deviceCode:\"HUAWEILYA\"},{deviceName:\"Huawei Mate 20 Lite\",brandName:\"Huawei\",deviceCode:\"HUAWEISNE\"},{deviceName:\"Huawei Mate 20 X\",brandName:\"Huawei\",deviceCode:\"HUAWEIEVR\"},{deviceName:\"Huawei Mate 30\",brandName:\"Huawei\",deviceCode:\"HUAWEITAS\"},{deviceName:\"Huawei Mate 30 Pro\",brandName:\"Huawei\",deviceCode:\"HUAWEILIO\"},{deviceName:\"Huawei Ascend P1\",brandName:\"Huawei\",deviceCode:\"HuaweiU9201L\"},{deviceName:\"Huawei Ascend P1 LTE\",brandName:\"Huawei\",deviceCode:\"HuaweiU9202L\"},{deviceName:\"Huawei Ascend P2\",brandName:\"Huawei\",deviceCode:\"HuaweiP2\"},{deviceName:\"Huawei Ascend P6\",brandName:\"Huawei\",deviceCode:\"HUAWEI P6\"},{deviceName:\"Huawei Ascend P7 Mini\",brandName:\"Huawei\",deviceCode:\"HuaweiP7Mini\"},{deviceName:\"Huawei Ascend P7\",brandName:\"Huawei\",deviceCode:\"HuaweiP7\"},{deviceName:\"Huawei P8\",brandName:\"Huawei\",deviceCode:\"HUAWEIGRA\"},{deviceName:\"Huawei P8 Max\",brandName:\"Huawei\",deviceCode:\"HUAWEIDAV\"},{deviceName:\"Huawei P8 Lite\",brandName:\"Huawei\",deviceCode:\"HuaweiALE\"},{deviceName:\"Huawei P9\",brandName:\"Huawei\",deviceCode:\"HUAWEIEVA\"},{deviceName:\"Huawei P9 Lite\",brandName:\"Huawei\",deviceCode:\"HUAWEIVNS\"},{deviceName:\"Huawei P9 Lite Mini\",brandName:\"Huawei\",deviceCode:\"HUAWEIPRA\"},{deviceName:\"Huawei P9 Pro\",brandName:\"Huawei\",deviceCode:\"HUAWEIVIE\"},{deviceName:\"Huawei P10\",brandName:\"Huawei\",deviceCode:\"HUAWEIVTR\"},{deviceName:\"Huawei P10 Plus\",brandName:\"Huawei\",deviceCode:\"HUAWEIVKY\"},{deviceName:\"Huawei P10 Lite\",brandName:\"Huawei\",deviceCode:\"HUAWEIWAS\"},{deviceName:\"Huawei P Smart\",brandName:\"Huawei\",deviceCode:\"HUAWEIFIG\"},{deviceName:\"Huawei P Smart Plus\",brandName:\"Huawei\",deviceCode:\"HUAWEIINE\"},{deviceName:\"Huawei P20\",brandName:\"Huawei\",deviceCode:\"HUAWEIEML\"},{deviceName:\"Huawei P20 Lite\",brandName:\"Huawei\",deviceCode:\"HUAWEIANE\"},{deviceName:\"Huawei P20 Pro\",brandName:\"Huawei\",deviceCode:\"HUAWEICLT\"},{deviceName:\"Huawei P30\",brandName:\"Huawei\",deviceCode:\"HUAWEIELE\"},{deviceName:\"Huawei P30 Pro\",brandName:\"Huawei\",deviceCode:\"HUAWEIVOG\"},{deviceName:\"Huawei P30 Lite\",brandName:\"Huawei\",deviceCode:\"HUAWEIMAR\"},{deviceName:\"Huawei Ascend Y\",brandName:\"Huawei\",deviceCode:\"HuaweiH866\"},{deviceName:\"Huawei Ascend Y100\",brandName:\"Huawei\",deviceCode:\"HuaweiU818\"},{deviceName:\"Huawei Ascend Y200\",brandName:\"Huawei\",deviceCode:\"HuaweiU8655\"},{deviceName:\"Huawei Ascend Y201\",brandName:\"Huawei\",deviceCode:\"HuaweiU8666\"},{deviceName:\"Huawei Ascend Y210D\",brandName:\"Huawei\",deviceCode:\"HuaweiY210\"},{deviceName:\"Huawei Ascend Y220\",brandName:\"Huawei\",deviceCode:\"Y220-U00\"},{deviceName:\"Huawei Ascend Y300\",brandName:\"Huawei\",deviceCode:\"HuaweiY300\"},{deviceName:\"Huawei Ascend Y320\",brandName:\"Huawei\",deviceCode:\"HuaweiY320\"},{deviceName:\"Huawei Ascend Y321\",brandName:\"Huawei\",deviceCode:\"HuaweiY321\"},{deviceName:\"Huawei Ascend Y330\",brandName:\"Huawei\",deviceCode:\"HuaweiY330\"},{deviceName:\"Huawei Ascend Y360\",brandName:\"Huawei\",deviceCode:\"HuaweiY360\"},{deviceName:\"Huawei Ascend Y511\",brandName:\"Huawei\",deviceCode:\"HuaweiY511\"},{deviceName:\"Huawei Ascend Y520\",brandName:\"Huawei\",deviceCode:\"HuaweiY520\"},{deviceName:\"Huawei Ascend Y530\",brandName:\"Huawei\",deviceCode:\"HuaweiY530\"},{deviceName:\"Huawei Ascend Y550\",brandName:\"Huawei\",deviceCode:\"HuaweiY550\"},{deviceName:\"Huawei Ascend Y630\",brandName:\"Huawei\",deviceCode:\"HuaweiY635\"},{deviceName:\"Huawei Y7\",brandName:\"Huawei\",deviceCode:\"HUAWEITRT\"},{deviceName:\"Huawei Y9 (2018)\",brandName:\"Huawei\",deviceCode:\"HUAWEIFLA\"},{deviceName:\"Huawei Y9 (2019)\",brandName:\"Huawei\",deviceCode:\"HUAWEIJKM\"},{deviceName:\"Huawei Y Max\",brandName:\"Huawei\",deviceCode:\"HUAWEIARS\"},{deviceName:\"Huawei Ascend Q\",brandName:\"Huawei\",deviceCode:\"HuaweiM660\"},{deviceName:\"Huawei Ascend X\",brandName:\"Huawei\",deviceCode:\"HuaweiU9000\"},{deviceName:\"Huawei Honor 2\",brandName:\"Huawei\",deviceCode:\"HuaweiU9508\"},{deviceName:\"Huawei Honor 3\",brandName:\"Huawei\",deviceCode:\"HuaweiHN3\"},{deviceName:\"Huawei Honor 3c\",brandName:\"Huawei\",deviceCode:\"HuaweiH30\"},{deviceName:\"Huawei Honor 3x\",brandName:\"Huawei\",deviceCode:\"HuaweiG750\"},{deviceName:\"Huawei Honor 4A\",brandName:\"Huawei\",deviceCode:\"HonorSCL\"},{deviceName:\"Huawei Honor 5X\",brandName:\"Huawei\",deviceCode:\"HONORKIW\"},{deviceName:\"Huawei Honor 6\",brandName:\"Huawei\",deviceCode:\"HDH60\"},{deviceName:\"Huawei Honor 6 Plus\",brandName:\"Huawei\",deviceCode:\"HuaweiPE\"},{deviceName:\"Huawei Honor 6x\",brandName:\"Huawei\",deviceCode:\"HONORBLN\"},{deviceName:\"Huawei Honor 7\",brandName:\"Huawei\",deviceCode:\"HONORPLK\"},{deviceName:\"Huawei Honor 7A\",brandName:\"Huawei\",deviceCode:\"HONORAUM\"},{deviceName:\"Huawei Honor 7i\",brandName:\"Huawei\",deviceCode:\"HONORATH\"},{deviceName:\"Huawei Honor 7x\",brandName:\"Huawei\",deviceCode:\"HONORBND\"},{deviceName:\"Huawei Honor 7c\",brandName:\"Huawei\",deviceCode:\"HONORLND\"},{deviceName:\"Huawei Honor 7s\",brandName:\"Huawei\",deviceCode:\"HONORDUA\"},{deviceName:\"Huawei Honor 8\",brandName:\"Huawei\",deviceCode:\"HUAWEIVAT\"},{deviceName:\"Huawei Honor 8\",brandName:\"Huawei\",deviceCode:\"HUAWEIFRD\"},{deviceName:\"Huawei Honor 8 Lite\",brandName:\"Huawei\",deviceCode:\"HONORPRA\"},{deviceName:\"Huawei Honor V8\",brandName:\"Huawei\",deviceCode:\"HUAWEIKNT\"},{deviceName:\"Huawei Honor 9\",brandName:\"Huawei\",deviceCode:\"HUAWEISTF\"},{deviceName:\"Huawei Honor 9 Lite\",brandName:\"Huawei\",deviceCode:\"HONORLLD\"},{deviceName:\"Huawei Honor View 10\",brandName:\"Huawei\",deviceCode:\"HUAWEIBKL\"},{deviceName:\"Huawei Honor View 20\",brandName:\"Huawei\",deviceCode:\"HUAWEIPCT\"},{deviceName:\"Huawei Honor 10\",brandName:\"Huawei\",deviceCode:\"HUAWEICOL\"},{deviceName:\"Huawei Honor 10 Lite\",brandName:\"Huawei\",deviceCode:\"HONORHRY\"},{deviceName:\"Huawei Honor Play\",brandName:\"Huawei\",deviceCode:\"HUAWEICOR\"},{deviceName:\"Huawei Honor Note 10\",brandName:\"Huawei\",deviceCode:\"HUAWEIRVL\"},{deviceName:\"Huawei Honor 8X\",brandName:\"Huawei\",deviceCode:\"HONORJSN\"},{deviceName:\"Huawei Honor 8X Max\",brandName:\"Huawei\",deviceCode:\"HONORARE\"},{deviceName:\"Huawei Honor Magic\",brandName:\"Huawei\",deviceCode:\"HUAWEINTS\"},{deviceName:\"Huawei Honor Magic 2\",brandName:\"Huawei\",deviceCode:\"HUAWEITNY\"},{deviceName:\"Nokia 1 Plus\",brandName:\"Nokia\",deviceCode:\"Nokia 1 Plus\"},{deviceName:\"Nokia 1\",brandName:\"Nokia\",deviceCode:\"Nokia 1\"},{deviceName:\"Nokia 2.1\",brandName:\"Nokia\",deviceCode:\"Nokia 2.1\"},{deviceName:\"Nokia 2.2\",brandName:\"Nokia\",deviceCode:\"Nokia 2.2\"},{deviceName:\"Nokia 2\",brandName:\"Nokia\",deviceCode:\"Nokia 2\"},{deviceName:\"Nokia 3.1 Plus\",brandName:\"Nokia\",deviceCode:\"Nokia 3.1 Plus\"},{deviceName:\"Nokia 3.1\",brandName:\"Nokia\",deviceCode:\"Nokia 3.1\"},{deviceName:\"Nokia 3.2\",brandName:\"Nokia\",deviceCode:\"Nokia 3.2\"},{deviceName:\"Nokia 4.2\",brandName:\"Nokia\",deviceCode:\"Nokia 4.2\"},{deviceName:\"Nokia 5.1 Plus\",brandName:\"Nokia\",deviceCode:\"Nokia 5.1 Plus\"},{deviceName:\"Nokia 5.1\",brandName:\"Nokia\",deviceCode:\"Nokia 5.1\"},{deviceName:\"Nokia 6.1 Plus\",brandName:\"Nokia\",deviceCode:\"Nokia 6.1 Plus\"},{deviceName:\"Nokia 6.1\",brandName:\"Nokia\",deviceCode:\"Nokia 6.1\"},{deviceName:\"Nokia 6.2\",brandName:\"Nokia\",deviceCode:\"Nokia 6.2\"},{deviceName:\"Nokia 7 Plus\",brandName:\"Nokia\",deviceCode:\"Nokia 7 Plus\"},{deviceName:\"Nokia 7.1\",brandName:\"Nokia\",deviceCode:\"Nokia 7.1\"},{deviceName:\"Nokia 7.2\",brandName:\"Nokia\",deviceCode:\"Nokia 7.2\"},{deviceName:\"Nokia 8.1\",brandName:\"Nokia\",deviceCode:\"Nokia 8.1\"},{deviceName:\"Nokia 8 Sirocco\",brandName:\"Nokia\",deviceCode:\"Nokia 8 Sirocco\"},{deviceName:\"Nokia 8\",brandName:\"Nokia\",deviceCode:\"Nokia 8\"},{deviceName:\"Nokia 9 PureView\",brandName:\"Nokia\",deviceCode:\"Nokia 9 PureView\"},{deviceName:\"Vsmart Active 1+\",brandName:\"Vsmart\",deviceCode:\"Active 1+\"},{deviceName:\"Vsmart Active 1\",brandName:\"Vsmart\",deviceCode:\"Active 1\"},{deviceName:\"Vsmart Joy 1+\",brandName:\"Vsmart\",deviceCode:\"Joy 1+\"},{deviceName:\"Vsmart Joy 1\",brandName:\"Vsmart\",deviceCode:\"Joy 1\"},{deviceName:\"Nexus 6P\",brandName:\"Google, Huawei\",deviceCode:\"Nexus6P\"},{deviceName:\"HTC One X10\",brandName:\"HTC\",deviceCode:\"HTCOneX10\"},{deviceName:\"HTC One M9\",brandName:\"HTC\",deviceCode:\"HTCOneM9\"}]},browserDetect:function(){function u(n){return n.test(navigator.userAgent)}function n(n,t){var i=t.match(n);return i&&i.length>0&&i[1]||\"\"}function f(n,t){var i=t.match(n);return i&&i.length>1&&i[2]||\"\"}function o(n,t){var i,u,r;if(Array.prototype.find)return Array.prototype.find.call(n,t);for(i=0,u=n.length;i<u;i+=1)if(r=n[i],t(r,i))return r;return undefined}var i={name:\"Unknown\",version:\"1000.0.0\"},t=/version\\/(\\d+(\\.?_?\\d+)+)/i,s=[{test:[/opera/i],describe:function(i){var r={name:\"Opera\"},u=n(t,i)||n(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,i);return u&&(r.version=u),r}},{test:[/\\sedg\\//i],describe:function(t){var i={name:\"Microsoft Edge\"},r=n(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,t);return r&&(i.version=r),i}},{test:[/edg([ea]|ios)/i],describe:function(n){var t={name:\"Microsoft Edge\"},i=f(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,n);return i&&(t.version=i),t}},{test:[/msie|trident/i],describe:function(t){var i={name:\"Internet Explorer\"},r=n(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,t);return r&&(i.version=r),i}},{test:[/firefox|iceweasel|fxios/i],describe:function(t){var i={name:\"Firefox\"},r=n(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,t);return r&&(i.version=r),i}},{test:[/chromium/i],describe:function(i){var r={name:\"Chromium\"},u=n(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,i)||n(t,i);return u&&(r.version=u),r}},{test:[/chrome|crios|crmo/i],describe:function(t){var i={name:\"Chrome\"},r=n(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,t);return r&&(i.version=r),i}},{test:function(n){var t=!n.test(/like android/i),i=n.test(/android/i);return t&&i},describe:function(i){var r={name:\"Android Browser\"},u=n(t,i);return u&&(r.version=u),r}},{test:[/safari/i],describe:function(i){var r={name:\"Safari\"},u=n(t,i);return u&&(r.version=u),r}},{test:[/applewebkit/i],describe:function(t){var i={name:\"AppleWebKit\"},r=n(/AppleWebKit\\/(\\d+(\\.?_?\\d+)+)/i,t);return r&&(i.version=r),i}},{test:[/.*/i],describe:function(t){var r=t.search(\"\\\\(\")!==-1,i=r?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n(i,t),version:f(i,t)}}}],e=o(s,function(n){if(typeof n.test==\"function\")return n.test({test:u});if(n.test instanceof Array)return n.test.some(function(n){return u(n)});throw new Error(\"Browser's test function is not valid\");}),r;return e&&(r=e.describe(navigator.userAgent),i.name=r.name,i.version=r.version),i}};(typeof module==\"undefined\"?\"undefined\":_typeof(module))===\"object\"&&_typeof(module.exports)===\"object\"&&(module.exports=awingCaptiveDeviceUtils)"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:04.498Z",
        "time": 42.421999969519675,
        "timings": {
          "blocked": 39.26100000999868,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.3620000087656079,
          "receive": 2.7989999507553875,
          "_blocked_queueing": 37.06100000999868,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
          "lineNumber": 23
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "NgCTgQpyKBhdnQy_mnjVKlh7u9Y"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "cache-control",
              "value": "max-age=31536000,immutable"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "etag",
              "value": "\"NgCTgQpyKBhdnQy_mnjVKlh7u9Y\""
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 13:19:45 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript; charset=UTF-8"
            },
            {
              "name": "last-modified",
              "value": "Wed, 26 Mar 2025 08:38:18 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 26376,
            "mimeType": "text/javascript",
            "text": "function StateMachine(n,t,i){this.state=n;this.context=t;this.stateConfig=i;this.done=!1}function UIActions(){this.userLanguage=navigator.language||navigator.userLanguage;console.log(\"userLanguage: \"+this.userLanguage);this.contactPhoneNumber=null;this.initialLanguage=\"vie\"}function startStateMachine(n,t=\"\"){const r={Init:{on:{Start:{target:\"Verifying\"}}},Verifying:{entry:function(){awingStateMachineContextActions.verifyContext()},on:{Valid:{target:\"GettingCustomer\"},PreviewPage:{target:\"GettingPage\"},PreviewDomain:{target:\"GettingCampaign\"},PreviewTemplate:{target:\"LoadingTemplate\"},Rescue:{target:\"GettingCampaign\"},NotAllowInsecureContent:{target:\"Failure\",actions:awingUIActions.loadNotAllowInsecureContent},Unsuported:{target:\"Failure\",actions:awingUIActions.loadUnsupportedBrowser},Invalid:{target:\"Failure\",actions:awingUIActions.loadInvalid}}},GettingPage:{entry:function(){awingStateMachineContextActions.getPage()},on:{Success:{target:\"DisplayingLoginPage\"},Invalid:{target:\"Failure\",actions:awingUIActions.loadInvalid},Deprecated:{target:\"Failure\",actions:awingUIActions.loadDeprecated}}},LoadingTemplate:{entry:function(){awingStateMachineContextActions.loadTemplate()},on:{Success:{target:\"DisplayingLoginPage\"},Invalid:{target:\"Failure\",actions:awingUIActions.loadInvalid}}},GettingCustomer:{entry:function(){awingStateMachineContextActions.getCustomer()},on:{EnoughCustomerData:{target:\"GettingCampaign\"},NotEnoughCustomerData:{target:\"DisplayingCustomerPopup\"}}},DisplayingCustomerPopup:{entry:function(n){awingUIActions.pauseLoginAnimation();const t=n.getDomain();awingUIActions.showCustomerPopup(n.getContextData().customerRequiredFields,t.requiredCustomerData,t.customizeCustomerFormPath)},on:{CloseCustomerPopup:{target:\"GettingCampaign\"}},exit:function(){awingUIActions.removeCustomerPopup();awingUIActions.resumeLoginAnimation()}},GettingCampaign:{entry:function(){awingStateMachineContextActions.getCampaign()},on:{Success:{target:\"DisplayingLoginPage\"}}},DisplayingLoginPage:{entry:function(){awingStateMachineContextActions.bindAuthenForm();awingStateMachineContextActions.displayLoginPage()},on:{NextView:{actions:function(){awingStateMachineContextActions.moveNextView()}},Submit:{target:\"Authentication\"}}},Authentication:{entry:function(){awingStateMachineContextActions.verifyAuthentication()},on:{AuthenByForm:{target:\"AuthenForm\"},AuthenByIframe:{target:\"AuthenIframe\"},PreviewWelcome:{target:\"DisplayWelcomePage\"}}},AuthenForm:{entry:function(){awingStateMachineContextActions.authenWithForm()},on:{Success:{target:\"AuthenSuccess\"}}},AuthenIframe:{entry:function(){awingStateMachineContextActions.authenWithIframe()},on:{Success:{target:\"AuthenSuccess\"},Error:{target:\"DisplayFailedAuthen\"}}},AuthenSuccess:{entry:function(){window.location.href=\"/Success\"},on:{Success:{target:\"DisplayWelcomePage\"},AndroidWebView:{target:\"AndroidWaiting\"}}},DisplayFailedAuthen:{entry:function(){awingUIActions.loadFailedAuthen()},type:\"final\"},AndroidWaiting:{entry:function(){awingUIActions.hideWelcomeAnimation();awingUIActions.loadAndroidWaiting()},on:{DoneWaiting:{target:\"DisplayWelcomePage\"}}},DisplayWelcomePage:{entry:function(){awingStateMachineContextActions.displayWelcomePage()},type:\"final\"},Failure:{type:\"final\"}};var i=new StateMachine(t===\"\"?\"Init\":t,n,r);return awingStateMachineContextActions=new CaptiveStateMachineActions(n,i),i.transition(\"Start\"),i}var awingUIActions,awingStateMachineContextActions;class CaptiveContext{constructor(n,t){this.token=\"\";this.contextData={campaignData:{url:location.href,userAgent:window.navigator.userAgent},customer:{device:awingCaptiveDeviceUtils.detectDeviceInfo()},customerRequiredFields:[]};this.customer=this.contextData.customer;this.needUpdateCustomer=!1;this.captiveConfiguration=n;this.nextViewIndex=0;this.authenType=awingConstants.AUTHEN_TYPE.FORM;this.isLoginLoadingAnimationComplete=!1;this.captiveMode=awingConstants.CAPTIVE_MODE.STANDARD;this.loginUrl=window.location.href;this.userContext={};t&&(this.contextData.campaignData.loginHtml=t.loginHtml,this.contextData.campaignData.welcomeHtml=t.welcomeHtml)}isPreview(){return this.captiveMode!==awingConstants.CAPTIVE_MODE.STANDARD}getCaptiveContextDTO(){return{token:this.token,captiveContext:this.contextData}}setCaptiveContextDTO(n){this.token=n.token;this.contextData=n.captiveContext;this.customer=Object.assign({},this.contextData.customer)}getLoginUrl(){return this.loginUrl}setUserContext(n){this.userContext=n}getUserContext(){return this.userContext}getContextData(){return this.contextData}getUpdateCustomerFlag(){return this.needUpdateCustomer}getCustomer(){return this.customer}updateCustomer(n,t=false){t&&(this.needUpdateCustomer=!0);Object.assign(this.customer,n);this.customer.device=awingCaptiveDeviceUtils.detectDeviceInfo()}checkDeviceInfoChange(){let n=awingCaptiveDeviceUtils.detectDeviceInfo();this.needUpdateCustomer=!awingCaptiveDeviceUtils.compareDeviceInfo(this.customer.device,n);this.needUpdateCustomer&&(this.customer.device=n)}updateCustomerRemindLater(){this.needUpdateCustomer=!0;this.customer=Object.assign({},this.contextData.customer);this.customer.lastReminderDate={seconds:Math.round((new Date).getTime()/1e3),nanos:0};this.customer.reminderCount=this.customer.reminderCount?this.customer.reminderCount+1:1;this.customer.device=awingCaptiveDeviceUtils.detectDeviceInfo()}getCampaignData(){return this.contextData.campaignData}updateCampaignData(n){Object.assign(this.contextData.campaignData,n)}setDomain(n){this.contextData.domain=n}getDomain(){return this.contextData.domain}setDefaultCampaign(){this.updateCampaignData({campaignId:awingConstants.CAMPAIGN_ROOT_ID,campaignGroupId:-1,campaignAdId:-1,isNetworkCampaign:!1,campaignType:0})}getAuthenType(){return this.authenType}setAuthenType(n){this.authenType=n}updateLoadingAnimationComplete(){this.isLoginLoadingAnimationComplete=!0}setAdHtml(n,t){this.updateCampaignData({loginHtml:n,welcomeHtml:t})}getView(){return this.nextViewIndex<this.currentHtml.pageViews.length?{viewIndex:this.nextViewIndex,html:this.currentHtml.pageViews[this.nextViewIndex].contentHtml}:null}getViewNumber(){return this.nextViewIndex}moveNextView(){this.nextViewIndex<this.currentHtml.pageViews.length&&this.nextViewIndex++}setCurrentPage(n){this.nextViewIndex=0;n==awingConstants.ANALYTIC_TYPE.VIEW?this.currentHtml=this.contextData.campaignData.loginHtml:n==awingConstants.ANALYTIC_TYPE.CLICK&&(this.currentHtml=this.contextData.campaignData.welcomeHtml)}getCommonHtml(){return this.currentHtml.commonHtml}saveCaptiveContextCookie(n){let t=encodeURIComponent(n),i=0;while(t.length)awingCaptiveUtils.setCookie(\"captiveContext_\"+i,t.substring(0,4e3)),t=t.substring(4e3),i++}static loadCaptiveContextCookie(){let t=\"\",n=0;for(;;){let i=awingCaptiveUtils.getCookie(\"captiveContext_\"+n);if(i)t+=i,awingCaptiveUtils.deleteCookie(\"captiveContext_\"+n),n++;else break}return n===0?null:decodeURIComponent(t)}static checkCaptiveContextCookie(){return awingCaptiveUtils.getCookie(\"captiveContext_0\")?!0:!1}}StateMachine.prototype.getState=function(){return this.state};StateMachine.prototype.transition=function(n){const i=this.stateConfig[this.state],t=i.on[n];if(t){if(i.exit&&i.exit.call(this,this.context),t.actions&&t.actions.call(this,this.context),t.target){const n=this.stateConfig[t.target];this.state=t.target;console.log(`Transitioned to state ${this.state}`);n&&n.entry&&n.entry.call(this,this.context);n.type&&n.type===\"final\"&&(n.exit&&n.exit.call(this,this.context),this.done=!0)}return!0}return!1};typeof module==\"object\"&&typeof module.exports==\"object\"&&(module.exports=StateMachine);UIActions.prototype.PAGE_VIEW_CONTAINER_ID_PREFIX=\"awing-captive__htmlscreen--view-\";UIActions.prototype.setInitialLanguage=function(n){return this.updateUserLanguage(n),this.initialLanguage=n};UIActions.prototype.getUserLanguage=function(){return this.userLanguage};UIActions.prototype.updateUserLanguage=function(n){let t=n;t||(t=this.userLanguage);let i=t;this.initialLanguage==\"eng\"?($(\"#box-language\").hide(),i=\"vie-eng\"):t===\"eng\"&&(i=`${this.userLanguage}-${t}`);t&&(this.userLanguage=t);$(\".awing-translate\").removeClass(\"awing-active\");$(\"#\"+t).addClass(\"awing-active\");$.ajax({url:\"/translation/\"+i+\".json?v=\"+(new Date).getTime(),dataType:\"json\",\"async\":!1}).done(function(n){let t=this.contactPhoneNumber;t||(t=n.Common.HotlineNumber);let i=n.Common.HotlineText;$(\"[data-translate]\").each(function(r,u){let o=$(u).data(\"translate\");const f=o.split(\".\");let e=n[f[0]];e[f[1]]&&$(u).html(e[f[1]].replace(\"{contact_text}\",i).replace(\"{contact_number}\",t))})}).fail(function(){console.error(\"Failed to load translation file.\")})};UIActions.prototype.setContactPhoneNumber=function(n){this.contactPhoneNumber=n};UIActions.prototype.loadDomainLayout=function(n){const t=\"/static/Files/layout/5197905656409960384/\"+n+\"/\";$(\"header\").load(t+\"Header.html?timestamp=\"+(new Date).getTime(),function(){$(\"header\").show()});$(\"footer\").load(t+\"Footer.html?timestamp=\"+(new Date).getTime(),function(){$(\"footer\").show()})};UIActions.prototype.showAgreement=function(){$(\"#awing-section-to-agreement\").load(\"/State/Agreement\",function(){$(\"#awing-captive__agreement\").modal(\"show\")})};UIActions.prototype.startLoginAnimation=function(){$(\"#awing-captive__login-loading\").show()};UIActions.prototype.pauseLoginAnimation=function(){$(\"#awing-captive__login-loading\").hide()};UIActions.prototype.resumeLoginAnimation=function(){$(\"#awing-captive__login-loading\").show()};UIActions.prototype.hideLoginAnimation=function(){$(\"#awing-captive__login-loading\").hide()};UIActions.prototype.startWelcomeAnimation=function(){$(\"#awing-captive__htmlscreen\").hide();$(\"header\").hide();$(\"footer\").hide();$(\"#awing-captive__continue-scroll\").addClass(\"d-none\");$(\"#awing-captive__welcome-loading\").show()};UIActions.prototype.hideWelcomeAnimation=function(){$(\"#awing-captive__welcome-loading\").hide()};UIActions.prototype.showCustomerPopup=function(n,t,i){let r=\"awing-captive__customerscreen\";$(\"#awing-captive__container\").append('<div id=\"'+r+'\"><\\/div>');$(\"#\"+r).load(\"./Content/ContentCustomer\",{requiredFields:n,requiredCustomerData:t},function(){const n=i;n!=null&&n!=undefined&&n!=\"\"&&$.getJSON(n,function(n){const t=document.querySelector(\":root\");t.style.setProperty(\"--primary-color\",n.mainColor);n.contrastText&&t.style.setProperty(\"--contrastText\",n.contrastText)})})};UIActions.prototype.removeCustomerPopup=function(){$(\"#awing-captive__customerscreen\").remove()};UIActions.prototype.implicitDisplayCommonHtml=function(n){n&&n.length&&$(\"#awing-captive__htmlcommon\").html(awingCaptiveUtils.decodeJson(n));$(\"#awing-captive__htmlscreen\").html(\"\")};UIActions.prototype.preloadResources=function(n){function i(n,t){if(n&&n.length){let i=document.createElement(\"link\");i.rel=\"preload\";i.as=t;i.href=n;document.body.appendChild(i)}}let t=document.createElement(\"html\");t.innerHTML=n;for(const n of t.getElementsByTagName(\"link\"))n.getAttribute(\"rel\")===\"stylesheet\"&&i(n.getAttribute(\"href\"),\"style\");for(const n of t.getElementsByTagName(\"script\"))i(n.getAttribute(\"src\"),\"script\");for(const n of t.getElementsByTagName(\"img\"))i(n.getAttribute(\"src\"),\"image\")};UIActions.prototype.showViewHtml=function(n){if($(\"#awing-captive__htmlscreen\").html(awingCaptiveUtils.decodeJson(n)),typeof startAnimation==\"function\")try{startAnimation()}catch(t){console.error(t)}};UIActions.prototype.SubmitAuthenticationForm=function(){document.getElementById(\"frmLogin\").submit()};UIActions.prototype.SubmitAuthenticationFormWithIframe=function(){document.querySelector(\"#redirecting-iframe\")&&document.querySelector(\"#redirecting-iframe\").remove();var n=document.createElement(\"iframe\"),t=Math.random();document.body.appendChild(n);n.style.display=\"none\";n.id=\"redirecting-iframe\";n.contentWindow.name=t;$(\"#frmLogin\").attr(\"target\",t);document.getElementById(\"frmLogin\").submit()};UIActions.prototype.loadNotAllowInsecureContent=function(){$(\"#awing-captive__container\").load(\"/Home/NotAllowInsecureContent\")};UIActions.prototype.loadUnsupportedBrowser=function(){$(\"#awing-captive__container\").load(\"/State?code=UnsupportedBrowser\")};UIActions.prototype.loadAndroidWaiting=function(){let n=\"awing-captive__androidwaitingscreen\";$(\"#awing-captive__container\").append('<div id=\"'+n+'\"><\\/div>');$(\"#\"+n).load(\"/Home/AndroidWaiting\")};UIActions.prototype.loadFailedAuthen=function(){$(\"#awing-captive__container\").load(\"/State/FailedAuthen?v=1\")};UIActions.prototype.loadInvalid=function(){$(\"header\").hide();$(\"footer\").hide();$(\"#awing-captive__continue-scroll\").addClass(\"d-none\");$(\"#awing-captive__container\").load(\"/State/Failed\")};UIActions.prototype.loadConnected=function(){$(\"header\").hide();$(\"footer\").hide();$(\"#awing-captive__continue-scroll\").addClass(\"d-none\");$(\"#awing-captive__container\").load(\"/State/Connected\")};UIActions.prototype.loadDeprecated=function(){$(\"header\").hide();$(\"footer\").hide();$(\"#awing-captive__continue-scroll\").addClass(\"d-none\");$(\"#awing-captive__container\").load(\"/State/Deprecated\")};awingUIActions=new UIActions;class CaptiveStateMachineActions{constructor(n,t){this.context=n;this.stateMachine=t;this.temporaryEvents=[];this.completedEvents=[]}setDomain(n){this.context.setDomain(n);n&&n.contactPhoneNumber&&awingUIActions.setContactPhoneNumber(n.contactPhoneNumber);n&&n.domainId&&awingUIActions.loadDomainLayout(n.domainId)}verifyContext(){function r(i){if(t.captiveConfiguration.useHttps)n.transition(i);else{const r=t.getCampaignData().userAgent,u=r.match(/Windows NT/i)||r.match(/Linux/i)&&!r.match(/Android/i)||r.match(/Mac OS/i),f=r.match(/Chrome/i)||r.match(/coc_coc_browser/i),e=window.location.protocol.indexOf(\"https:\")===0;if(e&&u&&f)try{const t=new XMLHttpRequest;t.open(\"GET\",\"http://\"+location.host+\"/CheckAllowInsecureContent\",!0);t.timeout=100;t.onload=function(){n.transition(i)};t.onerror=function(){n.transition(\"NotAllowInsecureContent\")};t.ontimeout=function(){n.transition(i)};t.send()}catch(o){n.transition(i)}else n.transition(i)}}awingUIActions.startLoginAnimation();this.startEvent(awingConstants.EVENT_MESSAGE.LOADING_ANIMATION_LOGIN_COMPLETE);let n=this.stateMachine,t=this.context,i=this;if((location.pathname===\"/\"||location.pathname.toLowerCase()===\"/login\"||location.pathname.toLowerCase()===\"/home/login\")&&location.search.length>1)$.ajax({url:\"/Home/VerifyUrl\",type:\"POST\",success:function(n){t.setCaptiveContextDTO(n);i.setDomain(t.getDomain());t.captiveConfiguration.isRescue?(t.setDefaultCampaign(),r(\"Rescue\")):r(\"Valid\")},error:function(t){console.log(t);n.transition(\"Invalid\")}});else if(location.pathname.toLowerCase()===\"/preview/page\"){t.captiveMode=awingConstants.CAPTIVE_MODE.PREVIEW_PAGE;const r=new URLSearchParams(location.search);let u={loginId:r.get(\"loginId\"),welcomeId:r.get(\"welcomeId\"),isNetworkCampaign:!1,domainId:r.get(\"domainId\")};r.get(\"isNetworkCampaign\")&&(u.isNetworkCampaign=r.get(\"isNetworkCampaign\")==\"true\");t.updateCampaignData(u);r.has(\"domainId\")&&i.setDomain({domainId:r.get(\"domainId\")});n.transition(\"PreviewPage\")}else if(location.pathname.toLowerCase().startsWith(\"/preview/domain\")){t.captiveMode=awingConstants.CAPTIVE_MODE.PREVIEW_DOMAIN;t.setDefaultCampaign();const r=new URLSearchParams(location.search);r.has(\"domainId\")?i.setDomain({domainId:r.get(\"domainId\")}):i.setDomain({domainId:location.pathname.split(\"/\").pop()});n.transition(\"PreviewDomain\")}else if(location.pathname.toLowerCase()===\"/preview/template\"){t.captiveMode=awingConstants.CAPTIVE_MODE.PREVIEW_TEMPLATE;const r=new URLSearchParams(location.search);r.has(\"domainId\")&&i.setDomain({domainId:r.get(\"domainId\")});n.transition(\"PreviewTemplate\")}else n.transition(\"Invalid\")}getCustomer(){$.ajax({url:\"/Content/GetCustomer\",type:\"POST\",contentType:\"application/json; charset=utf-8\",data:JSON.stringify(this.context.getCaptiveContextDTO()),timeout:awingConstants.AJAX_TIMEOUT_DEFAULT,success:function(n){this.context.setCaptiveContextDTO(n);n.captiveContext.customerRequiredFields.length?this.stateMachine.transition(\"NotEnoughCustomerData\"):(this.context.checkDeviceInfoChange(),this.stateMachine.transition(\"EnoughCustomerData\"))}.bind(this),error:function(){this.context.updateCustomer({macAddress:this.context.getCampaignData().macAddress});this.stateMachine.transition(\"EnoughCustomerData\")}.bind(this)})}getPage(){let t=this.stateMachine,i=this.context,r=this,n=i.getCampaignData();$.ajax({url:\"/Content/GetPreviewPageHtml\",type:\"POST\",data:{sessionId:n.sessionId,loginId:n.loginId,welcomeId:n.welcomeId,isNetworkCampaign:n.isNetworkCampaign},timeout:awingConstants.AJAX_TIMEOUT_DEFAULT,success:function(u){if(!n.domainId&&n.isNetworkCampaign){let n=u.campaignAd.directoryPath.split(\".\");n.length>3&&r.setDomain({domainId:n[3]})}i.setAdHtml(u.loginHtml,u.welcomeHtml);r.renderPage(awingConstants.ANALYTIC_TYPE.VIEW);const f=function(){window.removeEventListener(\"message\",e);t.transition(\"Success\")},e=function(n){n&&n.data&&n.data.message===awingConstants.EVENT_MESSAGE.LOADING_ANIMATION_LOGIN_COMPLETE&&f()};window.addEventListener(\"message\",e);setTimeout(f,awingConstants.AJAX_TIMEOUT_DEFAULT)},error:function(n){n.status===415?t.transition(\"Deprecated\"):t.transition(\"Invalid\")}})}loadTemplate(){let t=this.stateMachine;this.renderPage(awingConstants.ANALYTIC_TYPE.VIEW);const n=function(i){i&&i.data&&i.data.message===awingConstants.EVENT_MESSAGE.ALL_EVENTS_SENT_COMPLETE&&i.data.completedEvents.includes(awingConstants.EVENT_MESSAGE.LOADING_ANIMATION_LOGIN_COMPLETE)&&(window.removeEventListener(\"message\",n),t.transition(\"Success\"))};window.addEventListener(\"message\",n)}customerFilterFormSubmit(n){this.context.updateCustomer(n,!0);this.stateMachine.transition(\"CloseCustomerPopup\")}customerFilterFormRemindLater(){this.context.updateCustomerRemindLater();this.stateMachine.transition(\"CloseCustomerPopup\")}getCampaign(){function i(){let i=n.getCampaignData().domainId;i||(i=n.getDomain().domainId);$.getJSON(\"/static/Files/layout/5197905656409960384/\"+i+\"/DefaultCampaign.json?timestamp=\"+(new Date).getTime()).done(function(t){console.log(\"GettingCampaignDefault done!\");n.setAdHtml(t.loginHtml,t.welcomeHtml)}).fail(function(){console.log(\"GettingCampaignDefault fail!\");const t=awingConstants.DEFAULT_AD_HTML.loginHtml;t.pageViews=t.pageViews.map(function(n){const r=awingUIActions.getUserLanguage();let t=\"/images/slide-default-1.png\",i=\"KẾT NỐI INTERNET<br />(INTERNET ACCESS)\";return r==\"tha\"?(t=\"/images/AWING_default_campaign_for_thailan.gif\",i=\"การเข้าถึงอินเทอร์เน็ต <br />(INTERNET ACCESS)\"):r==\"idn\"?(t=\"/images/AWING_default_campaign_for_indo.gif\",i=\"KONEKSI INTERNET<br />(INTERNET ACCESS)\"):r==\"jpn\"&&(t=\"/images/AWING_default_campaign_for_japan.gif\",i=\"インターネット接続<br />(INTERNET ACCESS)\"),n.contentHtml=n.contentHtml.replace(\"{image_path}\",t).replace(\"{content_button_connect}\",i),n});n.setAdHtml(t,awingConstants.DEFAULT_AD_HTML.welcomeHtml)}).always(function(){t.completeEvent(awingConstants.EVENT_MESSAGE.GET_CAMPAIGN_COMPLETE)})}function u(n){return n===awingConstants.CAMPAIGN_ROOT_ID}let f=this.stateMachine,n=this.context,t=this;const r=function(n){n&&n.data&&n.data.message===awingConstants.EVENT_MESSAGE.GET_CAMPAIGN_COMPLETE&&t.renderPage(awingConstants.ANALYTIC_TYPE.VIEW);n&&n.data&&n.data.message===awingConstants.EVENT_MESSAGE.ALL_EVENTS_SENT_COMPLETE&&n.data.completedEvents.includes(awingConstants.EVENT_MESSAGE.GET_CAMPAIGN_COMPLETE)&&n.data.completedEvents.includes(awingConstants.EVENT_MESSAGE.LOADING_ANIMATION_LOGIN_COMPLETE)&&(f.transition(\"Success\"),window.removeEventListener(\"message\",r))};window.addEventListener(\"message\",r);t.startEvent(awingConstants.EVENT_MESSAGE.GET_CAMPAIGN_COMPLETE);u(n.getCampaignData().campaignId)?i():$.ajax({url:\"/Content/GetCampaignHtml\",type:\"POST\",contentType:\"application/json; charset=utf-8\",data:JSON.stringify({captiveContextDTO:this.context.getCaptiveContextDTO(),updateCustomerFlag:this.context.getUpdateCustomerFlag(),customer:this.context.getCustomer()}),timeout:awingConstants.AJAX_TIMEOUT_DEFAULT,success:function(n){this.context.setCaptiveContextDTO(n);let r=n.captiveContext.campaignData;r&&r.loginHtml&&!u(r.campaignId)?t.completeEvent(awingConstants.EVENT_MESSAGE.GET_CAMPAIGN_COMPLETE):i()}.bind(this),error:function(){this.context.setDefaultCampaign();i()}.bind(this)})}renderPage(n){this.context.setCurrentPage(n);awingUIActions.implicitDisplayCommonHtml(this.context.getCommonHtml());let t=this.context.getView();awingUIActions.preloadResources(t.html)}displayLoginPage(){awingUIActions.hideLoginAnimation();this.nextView();this.sendAnalytic(awingConstants.ANALYTIC_TYPE.VIEW,awingConstants.SEND_ANALYTIC_TIMEOUT_DEFAULT)}bindAuthenForm(){if(!this.context.isPreview()){const n=this.context.getCaptiveContextDTO().captiveContext;$(\"#awing-captive__container\").append(n.contentAuthenForm);history.replaceState(null,document.title,awingConstants.REPLACE_STATE_URL+\"?sessionId=\"+n.campaignData.sessionId)}}nextView(){this.stateMachine.transition(\"NextView\")}completeAd(){this.context.captiveMode===awingConstants.CAPTIVE_MODE.PREVIEW_TEMPLATE?alert(\"go to nextview\"):(awingUIActions.startWelcomeAnimation(),this.stateMachine.transition(\"Submit\"))}moveNextView(){console.log(\"next view\");let n=this.context.getView();if(n){this.context.moveNextView();awingUIActions.showViewHtml(n.html);let t=this.context.getView();t&&awingUIActions.preloadResources(t.html)}else this.completeAd()}sendEventAnalytic(n,t){this.sendAnalytic(awingConstants.ANALYTIC_TYPE.EVENT,awingConstants.SEND_ANALYTIC_TIMEOUT_DEFAULT,n,t)}sendAnalytic(n,t=0,i,r){this.context.isPreview()||(this.startEventByType(n,i),$.ajax({url:window.location.origin+\"/Analytic/Send\",type:\"POST\",contentType:\"application/json; charset=utf-8\",data:JSON.stringify({captiveContextDTO:this.context.getCaptiveContextDTO(),analyticType:n,eventLabel:i,eventObject:r,viewIndex:this.context.getViewNumber()}),timeout:t,success:function(t){n!==awingConstants.ANALYTIC_TYPE.EVENT&&this.context.setCaptiveContextDTO(t)}.bind(this),complete:function(){this.completeEventByType(n,i)}.bind(this)}))}startEventByType(n,t){switch(n){case awingConstants.ANALYTIC_TYPE.VIEW:this.startEvent(awingConstants.EVENT_MESSAGE.SEND_VIEW_COMPLETE);break;case awingConstants.ANALYTIC_TYPE.EVENT:this.startEvent(awingConstants.EVENT_MESSAGE.VIEW_EVENTLABEL_COMPLETE+t);break;case awingConstants.ANALYTIC_TYPE.AUTHENTICATION:this.startEvent(awingConstants.EVENT_MESSAGE.SEND_AUTHENTICATION_COMPLETE);break;case awingConstants.ANALYTIC_TYPE.CLICK:this.startEvent(awingConstants.EVENT_MESSAGE.SEND_CLICK_COMPLETE)}}completeEventByType(n,t){switch(n){case awingConstants.ANALYTIC_TYPE.VIEW:this.completeEvent(awingConstants.EVENT_MESSAGE.SEND_VIEW_COMPLETE);break;case awingConstants.ANALYTIC_TYPE.EVENT:this.completeEvent(awingConstants.EVENT_MESSAGE.VIEW_EVENTLABEL_COMPLETE+t);break;case awingConstants.ANALYTIC_TYPE.AUTHENTICATION:this.completeEvent(awingConstants.EVENT_MESSAGE.SEND_AUTHENTICATION_COMPLETE);break;case awingConstants.ANALYTIC_TYPE.CLICK:this.completeEvent(awingConstants.EVENT_MESSAGE.SEND_CLICK_COMPLETE)}}verifyAuthentication(){let n=this.context;if(n.isPreview())this.stateMachine.transition(\"PreviewWelcome\");else{let t=n.getAuthenType();t===awingConstants.AUTHEN_TYPE.IFRAME?this.stateMachine.transition(\"AuthenByIframe\"):t===awingConstants.AUTHEN_TYPE.FORM&&this.stateMachine.transition(\"AuthenByForm\")}}authenWithForm(){let t=this,n=function(i){i&&i.data&&i.data.message===awingConstants.EVENT_MESSAGE.ALL_EVENTS_SENT_COMPLETE&&i.data.completedEvents.includes(awingConstants.EVENT_MESSAGE.SEND_AUTHENTICATION_COMPLETE)&&(window.removeEventListener(\"message\",n,!1),t.saveToCookie(),awingUIActions.SubmitAuthenticationForm())};window.addEventListener(\"message\",n);this.sendAnalytic(awingConstants.ANALYTIC_TYPE.AUTHENTICATION,awingConstants.SEND_ANALYTIC_TIMEOUT_DEFAULT)}authenWithIframe(){let u=this,i=this.stateMachine,n=undefined,t=function(r){r&&r.data&&r.data.message===awingConstants.EVENT_MESSAGE.AUTHENTICATION_WITH_IFRAME_COMPLETE&&clearInterval(n);r&&r.data&&r.data.message===awingConstants.EVENT_MESSAGE.ALL_EVENTS_SENT_COMPLETE&&r.data.completedEvents.includes(awingConstants.EVENT_MESSAGE.AUTHENTICATION_WITH_IFRAME_COMPLETE)&&r.data.completedEvents.includes(awingConstants.EVENT_MESSAGE.SEND_AUTHENTICATION_COMPLETE)&&(window.removeEventListener(\"message\",t,!1),u.saveToCookie(),i.transition(\"Success\"))};window.addEventListener(\"message\",t,!1);this.sendAnalytic(awingConstants.ANALYTIC_TYPE.AUTHENTICATION,awingConstants.SEND_ANALYTIC_TIMEOUT_DEFAULT);this.startEvent(awingConstants.EVENT_MESSAGE.AUTHENTICATION_WITH_IFRAME_COMPLETE);awingUIActions.SubmitAuthenticationFormWithIframe();let r=3;n=setInterval(function(){r--;r>=0?awingUIActions.SubmitAuthenticationFormWithIframe():(clearInterval(n),window.removeEventListener(\"message\",t,!1),console.log(\"Xác thực thất bại!\"),i.transition(\"Error\"))},1e4)}saveToCookie(){const t=this.context.getCaptiveContextDTO();let n=Object.assign({},t);n.captiveContext=Object.assign({},t.captiveContext);n.captiveContext.campaignData=Object.assign({},t.captiveContext.campaignData);n.captiveContext.campaignData.loginHtml=null;n.captiveContext.userContext=this.context.getUserContext();this.context.saveCaptiveContextCookie(JSON.stringify(n))}displayWelcomePage(){let n=this;if(this.context.isPreview())n.renderPage(awingConstants.ANALYTIC_TYPE.CLICK),n.moveNextView();else{let t=function(){n.renderPage(awingConstants.ANALYTIC_TYPE.CLICK);n.moveNextView();window.removeEventListener(\"message\",i)},i=function(n){n&&n.data&&n.data.message===awingConstants.EVENT_MESSAGE.SEND_CLICK_COMPLETE&&t()};window.addEventListener(\"message\",i);setTimeout(t,awingConstants.SEND_ANALYTIC_TIMEOUT_DEFAULT);this.sendAnalytic(awingConstants.ANALYTIC_TYPE.CLICK,awingConstants.SEND_ANALYTIC_TIMEOUT_DEFAULT)}if(typeof history.pushState!=\"undefined\"){let n={Title:\"welcome\",Url:\"welcome\"};history.pushState(n,n.Title,n.Url)}else console.log(\"Browser does not support HTML5.\")}startEvent(n){this.temporaryEvents.push(n)}completeEvent(n){this.temporaryEvents=this.temporaryEvents.filter(function(t){return t!==n});this.completedEvents.push(n);window.postMessage({message:n},\"*\");this.temporaryEvents.length===0&&window.postMessage({message:awingConstants.EVENT_MESSAGE.ALL_EVENTS_SENT_COMPLETE,completedEvents:this.completedEvents},\"*\")}}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:04.498Z",
        "time": 43.45100000500679,
        "timings": {
          "blocked": 39.186999967414884,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.3489999709650875,
          "receive": 3.915000066626817,
          "_blocked_queueing": 37.536999967414886,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
          "lineNumber": 25
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/lib/bootstrap/dist/js/bootstrap.es5.bundle.min.js?v=FS00swd1d1eP0jSsk4dJUDRNMIJ7uEXKNzujgruz9yI&v=FS00swd1d1eP0jSsk4dJUDRNMIJ7uEXKNzujgruz9yI",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "FS00swd1d1eP0jSsk4dJUDRNMIJ7uEXKNzujgruz9yI"
            },
            {
              "name": "v",
              "value": "FS00swd1d1eP0jSsk4dJUDRNMIJ7uEXKNzujgruz9yI"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "cache-control",
              "value": "public,max-age=604800"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "etag",
              "value": "\"1db0d8951b5a3c4\""
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 13:19:46 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript"
            },
            {
              "name": "last-modified",
              "value": "Mon, 23 Sep 2024 07:22:17 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 112964,
            "mimeType": "text/javascript",
            "text": "function _typeof(e) { return (_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e })(e) }/*!\n * Bootstrap v5.3.3 (https://getbootstrap.com/)\n * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n */ !function (e, t) { \"object\" == (\"undefined\" == typeof exports ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : (e = \"undefined\" != typeof globalThis ? globalThis : e || self).bootstrap = t() }(this, function () { \"use strict\"; function e(e, t) { (null == t || t > e.length) && (t = e.length); for (var n = 0, i = Array(t); n < t; n++)i[n] = e[n]; return i } function t(e, t, n) { return t = l(t), d(e, u() ? Reflect.construct(t, n || [], l(e).constructor) : t.apply(e, n)) } function n(e, t) { if (!(e instanceof t)) throw TypeError(\"Cannot call a class as a function\") } function i(e, t) { for (var n = 0; n < t.length; n++) { var i = t[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(e, m(i.key), i) } } function r(e, t, n) { return t && i(e.prototype, t), n && i(e, n), Object.defineProperty(e, \"prototype\", { writable: !1 }), e } function o(e, t) { var n = \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"]; if (!n) { if (Array.isArray(e) || (n = b(e)) || t) { n && (e = n); var i = 0, r = function e() { }; return { s: r, n: function t() { return i >= e.length ? { done: !0 } : { done: !1, value: e[i++] } }, e: function e(t) { throw t }, f: r } } throw TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\") } var o, a = !0, s = !1; return { s: function t() { n = n.call(e) }, n: function e() { var t = n.next(); return a = t.done, t }, e: function e(t) { s = !0, o = t }, f: function e() { try { a || null == n.return || n.return() } finally { if (s) throw o } } } } function a(e, t, n) { return (t = m(t)) in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e } function s() { return (s = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, n) { var i = function (e, t) { for (; !({}).hasOwnProperty.call(e, t) && null !== (e = l(e));); return e }(e, t); if (i) { var r = Object.getOwnPropertyDescriptor(i, t); return r.get ? r.get.call(arguments.length < 3 ? e : n) : r.value } }).apply(null, arguments) } function l(e) { return (l = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (e) { return e.__proto__ || Object.getPrototypeOf(e) })(e) } function c(e, t) { if (\"function\" != typeof t && null !== t) throw TypeError(\"Super expression must either be null or a function\"); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, \"prototype\", { writable: !1 }), t && p(e, t) } function u() { try { var e = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { })) } catch (t) { } return (u = function t() { return !!e })() } function f(e, t) { var n = Object.keys(e); if (Object.getOwnPropertySymbols) { var i = Object.getOwnPropertySymbols(e); t && (i = i.filter(function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable })), n.push.apply(n, i) } return n } function h(e) { for (var t = 1; t < arguments.length; t++) { var n = null != arguments[t] ? arguments[t] : {}; t % 2 ? f(Object(n), !0).forEach(function (t) { a(e, t, n[t]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n)) : f(Object(n)).forEach(function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t)) }) } return e } function d(e, t) { if (t && (\"object\" == _typeof(t) || \"function\" == typeof t)) return t; if (void 0 !== t) throw TypeError(\"Derived constructors may only return object or undefined\"); return function (e) { if (void 0 === e) throw ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e }(e) } function p(e, t) { return (p = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (e, t) { return e.__proto__ = t, e })(e, t) } function v(e, t) { return function (e) { if (Array.isArray(e)) return e }(e) || function (e, t) { var n = null == e ? null : \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"]; if (null != n) { var i, r, o, a, s = [], l = !0, c = !1; try { if (o = (n = n.call(e)).next, 0 === t) { if (Object(n) !== n) return; l = !1 } else for (; !(l = (i = o.call(n)).done) && (s.push(i.value), s.length !== t); l = !0); } catch (u) { c = !0, r = u } finally { try { if (!l && null != n.return && (a = n.return(), Object(a) !== a)) return } finally { if (c) throw r } } return s } }(e, t) || b(e, t) || function () { throw TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\") }() } function g(t) { return function (t) { if (Array.isArray(t)) return e(t) }(t) || function (e) { if (\"undefined\" != typeof Symbol && null != e[Symbol.iterator] || null != e[\"@@iterator\"]) return Array.from(e) }(t) || b(t) || function () { throw TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\") }() } function m(e) { var t = function (e, t) { if (\"object\" != _typeof(e) || !e) return e; var n = e[Symbol.toPrimitive]; if (void 0 !== n) { var i = n.call(e, \"string\"); if (\"object\" != _typeof(i)) return i; throw TypeError(\"@@toPrimitive must return a primitive value.\") } return String(e) }(e); return \"symbol\" == _typeof(t) ? t : t + \"\" } function y(e) { return (y = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (e) { return _typeof(e) } : function (e) { return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : _typeof(e) })(e) } function b(t, n) { if (t) { if (\"string\" == typeof t) return e(t, n); var i = ({}).toString.call(t).slice(8, -1); return \"Object\" === i && t.constructor && (i = t.constructor.name), \"Map\" === i || \"Set\" === i ? Array.from(t) : \"Arguments\" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? e(t, n) : void 0 } } var k = new Map, w = \"transitionend\", $ = function e(t) { return t && window.CSS && window.CSS.escape && (t = t.replace(/#([^\\s\"#']+)/g, function (e, t) { return \"#\".concat(CSS.escape(t)) })), t }, A = function e(t) { t.dispatchEvent(new Event(w)) }, E = function e(t) { return !(!t || \"object\" !== y(t)) && (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType) }, C = function e(t) { return E(t) ? t.jquery ? t[0] : t : \"string\" == typeof t && t.length > 0 ? document.querySelector($(t)) : null }, T = function e(t) { if (!E(t) || 0 === t.getClientRects().length) return !1; var n = \"visible\" === getComputedStyle(t).getPropertyValue(\"visibility\"), i = t.closest(\"details:not([open])\"); if (!i) return n; if (i !== t) { var r = t.closest(\"summary\"); if (r && r.parentNode !== i || null === r) return !1 } return n }, x = function e(t) { return !t || t.nodeType !== Node.ELEMENT_NODE || !!t.classList.contains(\"disabled\") || (void 0 !== t.disabled ? t.disabled : t.hasAttribute(\"disabled\") && \"false\" !== t.getAttribute(\"disabled\")) }, O = function e(t) { if (!document.documentElement.attachShadow) return null; if (\"function\" == typeof t.getRootNode) { var n = t.getRootNode(); return n instanceof ShadowRoot ? n : null } return t instanceof ShadowRoot ? t : t.parentNode ? e(t.parentNode) : null }, _ = function e() { }, L = function e(t) { t.offsetHeight }, S = function e() { return window.jQuery && !document.body.hasAttribute(\"data-bs-no-jquery\") ? window.jQuery : null }, D = [], P = function e() { return \"rtl\" === document.documentElement.dir }, I = function e(t) { var n; n = function e() { var e = S(); if (e) { var n = t.NAME, i = e.fn[n]; e.fn[n] = t.jQueryInterface, e.fn[n].Constructor = t, e.fn[n].noConflict = function () { return e.fn[n] = i, t.jQueryInterface } } }, \"loading\" === document.readyState ? (D.length || document.addEventListener(\"DOMContentLoaded\", function () { for (var e = 0, t = D; e < t.length; e++)(0, t[e])() }), D.push(n)) : n() }, N = function e(t) { var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : t; return \"function\" == typeof t ? t.apply(void 0, g(n)) : i }, M = function e(t, n) { if (arguments.length > 2 && void 0 !== arguments[2] && !arguments[2]) N(t); else { var i = function (e) { if (!e) return 0; var t = window.getComputedStyle(e), n = t.transitionDuration, i = t.transitionDelay, r = Number.parseFloat(n), o = Number.parseFloat(i); return r || o ? (n = n.split(\",\")[0], i = i.split(\",\")[0], 1e3 * (Number.parseFloat(n) + Number.parseFloat(i))) : 0 }(n) + 5, r = !1; n.addEventListener(w, function e(i) { i.target === n && (r = !0, n.removeEventListener(w, e), N(t)) }), setTimeout(function () { r || A(n) }, i) } }, F = function e(t, n, i, r) { var o = t.length, a = t.indexOf(n); return -1 === a ? !i && r ? t[o - 1] : t[0] : (a += i ? 1 : -1, r && (a = (a + o) % o), t[Math.max(0, Math.min(a, o - 1))]) }, j = /[^.]*(?=\\..*)\\.|.*/, H = /\\..*/, W = /::\\d+$/, z = {}, B = 1, q = { mouseenter: \"mouseover\", mouseleave: \"mouseout\" }, R = new Set([\"click\", \"dblclick\", \"mouseup\", \"mousedown\", \"contextmenu\", \"mousewheel\", \"DOMMouseScroll\", \"mouseover\", \"mouseout\", \"mousemove\", \"selectstart\", \"selectend\", \"keydown\", \"keypress\", \"keyup\", \"orientationchange\", \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\", \"pointerdown\", \"pointermove\", \"pointerup\", \"pointerleave\", \"pointercancel\", \"gesturestart\", \"gesturechange\", \"gestureend\", \"focus\", \"blur\", \"change\", \"reset\", \"select\", \"submit\", \"focusin\", \"focusout\", \"load\", \"unload\", \"beforeunload\", \"resize\", \"move\", \"DOMContentLoaded\", \"readystatechange\", \"error\", \"abort\", \"scroll\"]); function V(e, t) { return t && \"\".concat(t, \"::\").concat(B++) || e.uidEvent || B++ } function K(e) { var t = V(e); return e.uidEvent = t, z[t] = z[t] || {}, z[t] } function Q(e, t) { var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null; return Object.values(e).find(function (e) { return e.callable === t && e.delegationSelector === n }) } function X(e, t, n) { var i = \"string\" == typeof t, r = Z(e); return R.has(r) || (r = e), [i, i ? n : t || n, r] } function Y(e, t, n, i, r) { if (\"string\" == typeof t && e) { var a, s = v(X(t, n, i), 3), l = s[0], c = s[1], u = s[2]; t in q && (c = (a = c, function (e) { if (!e.relatedTarget || e.relatedTarget !== e.delegateTarget && !e.delegateTarget.contains(e.relatedTarget)) return a.call(this, e) })); var f = K(e), h = f[u] || (f[u] = {}), d = Q(h, c, l ? n : null); if (d) d.oneOff = d.oneOff && r; else { var p, g, m, y, b, k = V(c, t.replace(j, \"\")), w = l ? (p = e, g = n, m = c, function e(t) { for (var n = p.querySelectorAll(g), i = t.target; i && i !== this; i = i.parentNode) { var r, a = o(n); try { for (a.s(); !(r = a.n()).done;)if (r.value === i) return ee(t, { delegateTarget: i }), e.oneOff && J.off(p, t.type, g, m), m.apply(i, [t]) } catch (s) { a.e(s) } finally { a.f() } } }) : (y = e, b = c, function e(t) { return ee(t, { delegateTarget: y }), e.oneOff && J.off(y, t.type, b), b.apply(y, [t]) }); w.delegationSelector = l ? n : null, w.callable = c, w.oneOff = r, w.uidEvent = k, h[k] = w, e.addEventListener(u, w, l) } } } function U(e, t, n, i, r) { var o = Q(t[n], i, r); o && (e.removeEventListener(n, o, Boolean(r)), delete t[n][o.uidEvent]) } function G(e, t, n, i) { for (var r = t[n] || {}, o = 0, a = Object.entries(r); o < a.length; o++) { var s = v(a[o], 2), l = s[0], c = s[1]; l.includes(i) && U(e, t, n, c.callable, c.delegationSelector) } } function Z(e) { return q[e = e.replace(H, \"\")] || e } var J = { on: function e(t, n, i, r) { Y(t, n, i, r, !1) }, one: function e(t, n, i, r) { Y(t, n, i, r, !0) }, off: function e(t, n, i, r) { if (\"string\" == typeof n && t) { var o = v(X(n, i, r), 3), a = o[0], s = o[1], l = o[2], c = l !== n, u = K(t), f = u[l] || {}, h = n.startsWith(\".\"); if (void 0 === s) { if (h) for (var d = 0, p = Object.keys(u); d < p.length; d++)G(t, u, p[d], n.slice(1)); for (var g = 0, m = Object.entries(f); g < m.length; g++) { var y = v(m[g], 2), b = y[0], k = y[1], w = b.replace(W, \"\"); c && !n.includes(w) || U(t, u, l, k.callable, k.delegationSelector) } } else { if (!Object.keys(f).length) return; U(t, u, l, s, a ? i : null) } } }, trigger: function e(t, n, i) { if (\"string\" != typeof n || !t) return null; var r = S(), o = null, a = !0, s = !0, l = !1; n !== Z(n) && r && (o = r.Event(n, i), r(t).trigger(o), a = !o.isPropagationStopped(), s = !o.isImmediatePropagationStopped(), l = o.isDefaultPrevented()); var c = ee(new Event(n, { bubbles: a, cancelable: !0 }), i); return l && c.preventDefault(), s && t.dispatchEvent(c), c.defaultPrevented && o && o.preventDefault(), c } }; function ee(e) { for (var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n = 0, i = Object.entries(t); n < i.length; n++)!function t() { var r = v(i[n], 2), t = r[0], o = r[1]; try { e[t] = o } catch (a) { Object.defineProperty(e, t, { configurable: !0, get: function e() { return o } }) } }(); return e } function et(e) { if (\"true\" === e) return !0; if (\"false\" === e) return !1; if (e === Number(e).toString()) return Number(e); if (\"\" === e || \"null\" === e) return null; if (\"string\" != typeof e) return e; try { return JSON.parse(decodeURIComponent(e)) } catch (t) { return e } } function en(e) { return e.replace(/[A-Z]/g, function (e) { return \"-\".concat(e.toLowerCase()) }) } var ei = function e(t, n, i) { t.setAttribute(\"data-bs-\".concat(en(n)), i) }, er = function e(t, n) { t.removeAttribute(\"data-bs-\".concat(en(n))) }, eo = function e(t) { if (!t) return {}; var n, i = {}, r = o(Object.keys(t.dataset).filter(function (e) { return e.startsWith(\"bs\") && !e.startsWith(\"bsConfig\") })); try { for (r.s(); !(n = r.n()).done;) { var a = n.value, s = a.replace(/^bs/, \"\"); i[s = s.charAt(0).toLowerCase() + s.slice(1, s.length)] = et(t.dataset[a]) } } catch (l) { r.e(l) } finally { r.f() } return i }, ea = function e(t, n) { return et(t.getAttribute(\"data-bs-\".concat(en(n)))) }, es = r(function e() { n(this, e) }, [{ key: \"_getConfig\", value: function e(t) { return t = this._mergeConfigObj(t), t = this._configAfterMerge(t), this._typeCheckConfig(t), t } }, { key: \"_configAfterMerge\", value: function e(t) { return t } }, { key: \"_mergeConfigObj\", value: function e(t, n) { var i = E(n) ? ea(n, \"config\") : {}; return h(h(h(h({}, this.constructor.Default), \"object\" === y(i) ? i : {}), E(n) ? eo(n) : {}), \"object\" === y(t) ? t : {}) } }, { key: \"_typeCheckConfig\", value: function e(t) { for (var n, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.constructor.DefaultType, r = 0, o = Object.entries(i); r < o.length; r++) { var a = v(o[r], 2), s = a[0], l = a[1], c = t[s], u = E(c) ? \"element\" : null == (n = c) ? \"\".concat(n) : Object.prototype.toString.call(n).match(/\\s([a-z]+)/i)[1].toLowerCase(); if (!RegExp(l).test(u)) throw TypeError(\"\".concat(this.constructor.NAME.toUpperCase(), ': Option \"').concat(s, '\" provided type \"').concat(u, '\" but expected type \"').concat(l, '\".')) } } }], [{ key: \"Default\", get: function e() { return {} } }, { key: \"DefaultType\", get: function e() { return {} } }, { key: \"NAME\", get: function e() { throw Error('You have to implement the static method \"NAME\", for each component!') } }]), el = function (e) { function i(e, r) { var o, a, s, l, c; return n(this, i), o = t(this, i), (e = C(e)) ? (o._element = e, o._config = o._getConfig(r), a = o._element, s = o.constructor.DATA_KEY, l = o, k.has(a) || k.set(a, new Map), (c = k.get(a)).has(s) || 0 === c.size ? c.set(s, l) : console.error(\"Bootstrap doesn't allow more than one instance per element. Bound instance: \".concat(Array.from(c.keys())[0], \".\")), o) : d(o) } return c(i, e), r(i, [{ key: \"dispose\", value: function e() { (function (e, t) { if (k.has(e)) { var n = k.get(e); n.delete(t), 0 === n.size && k.delete(e) } })(this._element, this.constructor.DATA_KEY), J.off(this._element, this.constructor.EVENT_KEY); var t, n = o(Object.getOwnPropertyNames(this)); try { for (n.s(); !(t = n.n()).done;)this[t.value] = null } catch (i) { n.e(i) } finally { n.f() } } }, { key: \"_queueCallback\", value: function e(t, n) { M(t, n, !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2]) } }, { key: \"_getConfig\", value: function e(t) { return t = this._mergeConfigObj(t, this._element), t = this._configAfterMerge(t), this._typeCheckConfig(t), t } }], [{ key: \"getInstance\", value: function e(t) { var n, i; return n = C(t), i = this.DATA_KEY, k.has(n) && k.get(n).get(i) || null } }, { key: \"getOrCreateInstance\", value: function e(t) { var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; return this.getInstance(t) || new this(t, \"object\" === y(n) ? n : null) } }, { key: \"VERSION\", get: function e() { return \"5.3.3\" } }, { key: \"DATA_KEY\", get: function e() { return \"bs.\".concat(this.NAME) } }, { key: \"EVENT_KEY\", get: function e() { return \".\".concat(this.DATA_KEY) } }, { key: \"eventName\", value: function e(t) { return \"\".concat(t).concat(this.EVENT_KEY) } }]) }(es), ec = function e(t) { var n = t.getAttribute(\"data-bs-target\"); if (!n || \"#\" === n) { var i = t.getAttribute(\"href\"); if (!i || !i.includes(\"#\") && !i.startsWith(\".\")) return null; i.includes(\"#\") && !i.startsWith(\"#\") && (i = \"#\".concat(i.split(\"#\")[1])), n = i && \"#\" !== i ? i.trim() : null } return n ? n.split(\",\").map(function (e) { return $(e) }).join(\",\") : null }, eu = { find: function e(t) { var n, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document.documentElement; return (n = []).concat.apply(n, g(Element.prototype.querySelectorAll.call(i, t))) }, findOne: function e(t) { var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document.documentElement; return Element.prototype.querySelector.call(n, t) }, children: function e(t, n) { var i; return (i = []).concat.apply(i, g(t.children)).filter(function (e) { return e.matches(n) }) }, parents: function e(t, n) { for (var i = [], r = t.parentNode.closest(n); r;)i.push(r), r = r.parentNode.closest(n); return i }, prev: function e(t, n) { for (var i = t.previousElementSibling; i;) { if (i.matches(n)) return [i]; i = i.previousElementSibling } return [] }, next: function e(t, n) { for (var i = t.nextElementSibling; i;) { if (i.matches(n)) return [i]; i = i.nextElementSibling } return [] }, focusableChildren: function e(t) { var n = [\"a\", \"button\", \"input\", \"textarea\", \"select\", \"details\", \"[tabindex]\", '[contenteditable=\"true\"]'].map(function (e) { return \"\".concat(e, ':not([tabindex^=\"-\"])') }).join(\",\"); return this.find(n, t).filter(function (e) { return !x(e) && T(e) }) }, getSelectorFromElement: function e(t) { var n = ec(t); return n && eu.findOne(n) ? n : null }, getElementFromSelector: function e(t) { var n = ec(t); return n ? eu.findOne(n) : null }, getMultipleElementsFromSelector: function e(t) { var n = ec(t); return n ? eu.find(n) : [] } }, ef = function e(t) { var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"hide\", i = \"click.dismiss\".concat(t.EVENT_KEY), r = t.NAME; J.on(document, i, '[data-bs-dismiss=\"'.concat(r, '\"]'), function (e) { if ([\"A\", \"AREA\"].includes(this.tagName) && e.preventDefault(), !x(this)) { var i = eu.getElementFromSelector(this) || this.closest(\".\".concat(r)); t.getOrCreateInstance(i)[n]() } }) }, eh = \".\".concat(\"bs.alert\"), ed = \"close\".concat(eh), ep = \"closed\".concat(eh), ev = function (e) { function i() { return n(this, i), t(this, i, arguments) } return c(i, e), r(i, [{ key: \"close\", value: function e() { var t = this; if (!J.trigger(this._element, ed).defaultPrevented) { this._element.classList.remove(\"show\"); var n = this._element.classList.contains(\"fade\"); this._queueCallback(function () { return t._destroyElement() }, this._element, n) } } }, { key: \"_destroyElement\", value: function e() { this._element.remove(), J.trigger(this._element, ep), this.dispose() } }], [{ key: \"NAME\", get: function e() { return \"alert\" } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this); if (\"string\" == typeof t) { if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw TypeError('No method named \"'.concat(t, '\"')); e[t](this) } }) } }]) }(el); ef(ev, \"close\"), I(ev); var eg = \".\".concat(\"bs.button\"), em = '[data-bs-toggle=\"button\"]', e8 = \"click\".concat(eg).concat(\".data-api\"), ey = function (e) { function i() { return n(this, i), t(this, i, arguments) } return c(i, e), r(i, [{ key: \"toggle\", value: function e() { this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(\"active\")) } }], [{ key: \"NAME\", get: function e() { return \"button\" } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this); \"toggle\" === t && e[t]() }) } }]) }(el); J.on(document, e8, em, function (e) { e.preventDefault(); var t = e.target.closest(em); ey.getOrCreateInstance(t).toggle() }), I(ey); var eb = \".bs.swipe\", ek = \"touchstart\".concat(eb), ew = \"touchmove\".concat(eb), e$ = \"touchend\".concat(eb), eA = \"pointerdown\".concat(eb), eE = \"pointerup\".concat(eb), eC = { endCallback: null, leftCallback: null, rightCallback: null }, eT = { endCallback: \"(function|null)\", leftCallback: \"(function|null)\", rightCallback: \"(function|null)\" }, ex = function (e) { function i(e, r) { var o; return n(this, i), (o = t(this, i))._element = e, e && i.isSupported() ? (o._config = o._getConfig(r), o._deltaX = 0, o._supportPointerEvents = Boolean(window.PointerEvent), o._initEvents(), o) : d(o) } return c(i, e), r(i, [{ key: \"dispose\", value: function e() { J.off(this._element, eb) } }, { key: \"_start\", value: function e(t) { this._supportPointerEvents ? this._eventIsPointerPenTouch(t) && (this._deltaX = t.clientX) : this._deltaX = t.touches[0].clientX } }, { key: \"_end\", value: function e(t) { this._eventIsPointerPenTouch(t) && (this._deltaX = t.clientX - this._deltaX), this._handleSwipe(), N(this._config.endCallback) } }, { key: \"_move\", value: function e(t) { this._deltaX = t.touches && t.touches.length > 1 ? 0 : t.touches[0].clientX - this._deltaX } }, { key: \"_handleSwipe\", value: function e() { var t = Math.abs(this._deltaX); if (!(t <= 40)) { var n = t / this._deltaX; this._deltaX = 0, n && N(n > 0 ? this._config.rightCallback : this._config.leftCallback) } } }, { key: \"_initEvents\", value: function e() { var t = this; this._supportPointerEvents ? (J.on(this._element, eA, function (e) { return t._start(e) }), J.on(this._element, eE, function (e) { return t._end(e) }), this._element.classList.add(\"pointer-event\")) : (J.on(this._element, ek, function (e) { return t._start(e) }), J.on(this._element, ew, function (e) { return t._move(e) }), J.on(this._element, e$, function (e) { return t._end(e) })) } }, { key: \"_eventIsPointerPenTouch\", value: function e(t) { return this._supportPointerEvents && (\"pen\" === t.pointerType || \"touch\" === t.pointerType) } }], [{ key: \"Default\", get: function e() { return eC } }, { key: \"DefaultType\", get: function e() { return eT } }, { key: \"NAME\", get: function e() { return \"swipe\" } }, { key: \"isSupported\", value: function e() { return \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0 } }]) }(es), eO = \".\".concat(\"bs.carousel\"), e_ = \".data-api\", eL = \"next\", eS = \"prev\", eD = \"left\", eP = \"right\", eI = \"slide\".concat(eO), eN = \"slid\".concat(eO), eM = \"keydown\".concat(eO), eF = \"mouseenter\".concat(eO), ej = \"mouseleave\".concat(eO), eH = \"dragstart\".concat(eO), eW = \"load\".concat(eO).concat(e_), e0 = \"click\".concat(eO).concat(e_), ez = \"carousel\", eB = \"active\", eq = \".active\", eR = \".carousel-item\", eV = eq + eR, eK = a(a({}, \"ArrowLeft\", eP), \"ArrowRight\", eD), eQ = { interval: 5e3, keyboard: !0, pause: \"hover\", ride: !1, touch: !0, wrap: !0 }, eX = { interval: \"(number|boolean)\", keyboard: \"boolean\", pause: \"(string|boolean)\", ride: \"(boolean|string)\", touch: \"boolean\", wrap: \"boolean\" }, eY = function (e) { function i(e, r) { var o; return n(this, i), (o = t(this, i, [e, r]))._interval = null, o._activeElement = null, o._isSliding = !1, o.touchTimeout = null, o._swipeHelper = null, o._indicatorsElement = eu.findOne(\".carousel-indicators\", o._element), o._addEventListeners(), o._config.ride === ez && o.cycle(), o } return c(i, e), r(i, [{ key: \"next\", value: function e() { this._slide(eL) } }, { key: \"nextWhenVisible\", value: function e() { !document.hidden && T(this._element) && this.next() } }, { key: \"prev\", value: function e() { this._slide(eS) } }, { key: \"pause\", value: function e() { this._isSliding && A(this._element), this._clearInterval() } }, { key: \"cycle\", value: function e() { var t = this; this._clearInterval(), this._updateInterval(), this._interval = setInterval(function () { return t.nextWhenVisible() }, this._config.interval) } }, { key: \"_maybeEnableCycle\", value: function e() { var t = this; this._config.ride && (this._isSliding ? J.one(this._element, eN, function () { return t.cycle() }) : this.cycle()) } }, { key: \"to\", value: function e(t) { var n = this, i = this._getItems(); if (!(t > i.length - 1 || t < 0)) { if (this._isSliding) J.one(this._element, eN, function () { return n.to(t) }); else { var r = this._getItemIndex(this._getActive()); r !== t && this._slide(t > r ? eL : eS, i[t]) } } } }, { key: \"dispose\", value: function e() { this._swipeHelper && this._swipeHelper.dispose(), s(l(i.prototype), \"dispose\", this).call(this) } }, { key: \"_configAfterMerge\", value: function e(t) { return t.defaultInterval = t.interval, t } }, { key: \"_addEventListeners\", value: function e() { var t = this; this._config.keyboard && J.on(this._element, eM, function (e) { return t._keydown(e) }), \"hover\" === this._config.pause && (J.on(this._element, eF, function () { return t.pause() }), J.on(this._element, ej, function () { return t._maybeEnableCycle() })), this._config.touch && ex.isSupported() && this._addTouchEventListeners() } }, { key: \"_addTouchEventListeners\", value: function e() { var t, n = this, i = o(eu.find(\".carousel-item img\", this._element)); try { for (i.s(); !(t = i.n()).done;) { var r = t.value; J.on(r, eH, function (e) { return e.preventDefault() }) } } catch (a) { i.e(a) } finally { i.f() } this._swipeHelper = new ex(this._element, { leftCallback: function e() { return n._slide(n._directionToOrder(eD)) }, rightCallback: function e() { return n._slide(n._directionToOrder(eP)) }, endCallback: function e() { \"hover\" === n._config.pause && (n.pause(), n.touchTimeout && clearTimeout(n.touchTimeout), n.touchTimeout = setTimeout(function () { return n._maybeEnableCycle() }, 500 + n._config.interval)) } }) } }, { key: \"_keydown\", value: function e(t) { if (!/input|textarea/i.test(t.target.tagName)) { var n = eK[t.key]; n && (t.preventDefault(), this._slide(this._directionToOrder(n))) } } }, { key: \"_getItemIndex\", value: function e(t) { return this._getItems().indexOf(t) } }, { key: \"_setActiveIndicatorElement\", value: function e(t) { if (this._indicatorsElement) { var n = eu.findOne(eq, this._indicatorsElement); n.classList.remove(eB), n.removeAttribute(\"aria-current\"); var i = eu.findOne('[data-bs-slide-to=\"'.concat(t, '\"]'), this._indicatorsElement); i && (i.classList.add(eB), i.setAttribute(\"aria-current\", \"true\")) } } }, { key: \"_updateInterval\", value: function e() { var t = this._activeElement || this._getActive(); if (t) { var n = Number.parseInt(t.getAttribute(\"data-bs-interval\"), 10); this._config.interval = n || this._config.defaultInterval } } }, { key: \"_slide\", value: function e(t) { var n = this, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null; if (!this._isSliding) { var r = this._getActive(), o = t === eL, a = i || F(this._getItems(), r, o, this._config.wrap); if (a !== r) { var s = this._getItemIndex(a), l = function e(i) { return J.trigger(n._element, i, { relatedTarget: a, direction: n._orderToDirection(t), from: n._getItemIndex(r), to: s }) }; if (!l(eI).defaultPrevented && r && a) { var c = Boolean(this._interval); this.pause(), this._isSliding = !0, this._setActiveIndicatorElement(s), this._activeElement = a; var u = o ? \"carousel-item-start\" : \"carousel-item-end\", f = o ? \"carousel-item-next\" : \"carousel-item-prev\"; a.classList.add(f), L(a), r.classList.add(u), a.classList.add(u), this._queueCallback(function () { a.classList.remove(u, f), a.classList.add(eB), r.classList.remove(eB, f, u), n._isSliding = !1, l(eN) }, r, this._isAnimated()), c && this.cycle() } } } } }, { key: \"_isAnimated\", value: function e() { return this._element.classList.contains(\"slide\") } }, { key: \"_getActive\", value: function e() { return eu.findOne(eV, this._element) } }, { key: \"_getItems\", value: function e() { return eu.find(eR, this._element) } }, { key: \"_clearInterval\", value: function e() { this._interval && (clearInterval(this._interval), this._interval = null) } }, { key: \"_directionToOrder\", value: function e(t) { return P() ? t === eD ? eS : eL : t === eD ? eL : eS } }, { key: \"_orderToDirection\", value: function e(t) { return P() ? t === eS ? eD : eP : t === eS ? eP : eD } }], [{ key: \"Default\", get: function e() { return eQ } }, { key: \"DefaultType\", get: function e() { return eX } }, { key: \"NAME\", get: function e() { return \"carousel\" } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this, t); if (\"number\" != typeof t) { if (\"string\" == typeof t) { if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw TypeError('No method named \"'.concat(t, '\"')); e[t]() } } else e.to(t) }) } }]) }(el); J.on(document, e0, \"[data-bs-slide], [data-bs-slide-to]\", function (e) { var t = eu.getElementFromSelector(this); if (t && t.classList.contains(ez)) { e.preventDefault(); var n = eY.getOrCreateInstance(t), i = this.getAttribute(\"data-bs-slide-to\"); if (i) return n.to(i), void n._maybeEnableCycle(); if (\"next\" === ea(this, \"slide\")) return n.next(), void n._maybeEnableCycle(); n.prev(), n._maybeEnableCycle() } }), J.on(window, eW, function () { var e, t = o(eu.find('[data-bs-ride=\"carousel\"]')); try { for (t.s(); !(e = t.n()).done;) { var n = e.value; eY.getOrCreateInstance(n) } } catch (i) { t.e(i) } finally { t.f() } }), I(eY); var e1 = \".\".concat(\"bs.collapse\"), eU = \"show\".concat(e1), e3 = \"shown\".concat(e1), e4 = \"hide\".concat(e1), e9 = \"hidden\".concat(e1), e6 = \"click\".concat(e1).concat(\".data-api\"), eG = \"show\", e2 = \"collapse\", eZ = \"collapsing\", e7 = \":scope .\".concat(e2, \" .\").concat(e2), eJ = '[data-bs-toggle=\"collapse\"]', e5 = { parent: null, toggle: !0 }, te = { parent: \"(null|element)\", toggle: \"boolean\" }, tt = function (e) { function i(e, r) { n(this, i), (a = t(this, i, [e, r]))._isTransitioning = !1, a._triggerArray = []; var a, s, l = o(eu.find(eJ)); try { for (l.s(); !(s = l.n()).done;) { var c = s.value, u = eu.getSelectorFromElement(c), f = eu.find(u).filter(function (e) { return e === a._element }); null !== u && f.length && a._triggerArray.push(c) } } catch (h) { l.e(h) } finally { l.f() } return a._initializeChildren(), a._config.parent || a._addAriaAndCollapsedClass(a._triggerArray, a._isShown()), a._config.toggle && a.toggle(), a } return c(i, e), r(i, [{ key: \"toggle\", value: function e() { this._isShown() ? this.hide() : this.show() } }, { key: \"show\", value: function e() { var t = this; if (!this._isTransitioning && !this._isShown()) { var n = []; if (this._config.parent && (n = this._getFirstLevelChildren(\".collapse.show, .collapse.collapsing\").filter(function (e) { return e !== t._element }).map(function (e) { return i.getOrCreateInstance(e, { toggle: !1 }) })), (!n.length || !n[0]._isTransitioning) && !J.trigger(this._element, eU).defaultPrevented) { var r, a = o(n); try { for (a.s(); !(r = a.n()).done;)r.value.hide() } catch (s) { a.e(s) } finally { a.f() } var l = this._getDimension(); this._element.classList.remove(e2), this._element.classList.add(eZ), this._element.style[l] = 0, this._addAriaAndCollapsedClass(this._triggerArray, !0), this._isTransitioning = !0; var c = l[0].toUpperCase() + l.slice(1), u = \"scroll\".concat(c); this._queueCallback(function () { t._isTransitioning = !1, t._element.classList.remove(eZ), t._element.classList.add(e2, eG), t._element.style[l] = \"\", J.trigger(t._element, e3) }, this._element, !0), this._element.style[l] = \"\".concat(this._element[u], \"px\") } } } }, { key: \"hide\", value: function e() { var t = this; if (!this._isTransitioning && this._isShown() && !J.trigger(this._element, e4).defaultPrevented) { var n = this._getDimension(); this._element.style[n] = \"\".concat(this._element.getBoundingClientRect()[n], \"px\"), L(this._element), this._element.classList.add(eZ), this._element.classList.remove(e2, eG); var i, r = o(this._triggerArray); try { for (r.s(); !(i = r.n()).done;) { var a = i.value, s = eu.getElementFromSelector(a); s && !this._isShown(s) && this._addAriaAndCollapsedClass([a], !1) } } catch (l) { r.e(l) } finally { r.f() } this._isTransitioning = !0, this._element.style[n] = \"\", this._queueCallback(function () { t._isTransitioning = !1, t._element.classList.remove(eZ), t._element.classList.add(e2), J.trigger(t._element, e9) }, this._element, !0) } } }, { key: \"_isShown\", value: function e() { return (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._element).classList.contains(eG) } }, { key: \"_configAfterMerge\", value: function e(t) { return t.toggle = Boolean(t.toggle), t.parent = C(t.parent), t } }, { key: \"_getDimension\", value: function e() { return this._element.classList.contains(\"collapse-horizontal\") ? \"width\" : \"height\" } }, { key: \"_initializeChildren\", value: function e() { if (this._config.parent) { var t, n = o(this._getFirstLevelChildren(eJ)); try { for (n.s(); !(t = n.n()).done;) { var i = t.value, r = eu.getElementFromSelector(i); r && this._addAriaAndCollapsedClass([i], this._isShown(r)) } } catch (a) { n.e(a) } finally { n.f() } } } }, { key: \"_getFirstLevelChildren\", value: function e(t) { var n = eu.find(e7, this._config.parent); return eu.find(t, this._config.parent).filter(function (e) { return !n.includes(e) }) } }, { key: \"_addAriaAndCollapsedClass\", value: function e(t, n) { if (t.length) { var i, r = o(t); try { for (r.s(); !(i = r.n()).done;) { var a = i.value; a.classList.toggle(\"collapsed\", !n), a.setAttribute(\"aria-expanded\", n) } } catch (s) { r.e(s) } finally { r.f() } } } }], [{ key: \"Default\", get: function e() { return e5 } }, { key: \"DefaultType\", get: function e() { return te } }, { key: \"NAME\", get: function e() { return \"collapse\" } }, { key: \"jQueryInterface\", value: function e(t) { var n = {}; return \"string\" == typeof t && /show|hide/.test(t) && (n.toggle = !1), this.each(function () { var e = i.getOrCreateInstance(this, n); if (\"string\" == typeof t) { if (void 0 === e[t]) throw TypeError('No method named \"'.concat(t, '\"')); e[t]() } }) } }]) }(el); J.on(document, e6, eJ, function (e) { (\"A\" === e.target.tagName || e.delegateTarget && \"A\" === e.delegateTarget.tagName) && e.preventDefault(); var t, n = o(eu.getMultipleElementsFromSelector(this)); try { for (n.s(); !(t = n.n()).done;) { var i = t.value; tt.getOrCreateInstance(i, { toggle: !1 }).toggle() } } catch (r) { n.e(r) } finally { n.f() } }), I(tt); var tn = \"top\", ti = \"bottom\", tr = \"right\", to = \"left\", ta = \"auto\", ts = [tn, ti, tr, to], tl = \"start\", tc = \"clippingParents\", tu = \"viewport\", tf = \"popper\", th = \"reference\", td = ts.reduce(function (e, t) { return e.concat([t + \"-\" + tl, t + \"-end\"]) }, []), tp = [].concat(ts, [ta]).reduce(function (e, t) { return e.concat([t, t + \"-\" + tl, t + \"-end\"]) }, []), tv = \"beforeRead\", tg = \"read\", tm = \"afterRead\", t8 = \"beforeMain\", ty = \"main\", tb = \"afterMain\", tk = \"beforeWrite\", tw = \"write\", t$ = \"afterWrite\", tA = [tv, tg, tm, t8, ty, tb, tk, tw, t$]; function tE(e) { return e ? (e.nodeName || \"\").toLowerCase() : null } function tC(e) { if (null == e) return window; if (\"[object Window]\" !== e.toString()) { var t = e.ownerDocument; return t && t.defaultView || window } return e } function tT(e) { return e instanceof tC(e).Element || e instanceof Element } function tx(e) { return e instanceof tC(e).HTMLElement || e instanceof HTMLElement } function tO(e) { return \"undefined\" != typeof ShadowRoot && (e instanceof tC(e).ShadowRoot || e instanceof ShadowRoot) } var t_ = { name: \"applyStyles\", enabled: !0, phase: \"write\", fn: function e(t) { var n = t.state; Object.keys(n.elements).forEach(function (e) { var t = n.styles[e] || {}, i = n.attributes[e] || {}, r = n.elements[e]; tx(r) && tE(r) && (Object.assign(r.style, t), Object.keys(i).forEach(function (e) { var t = i[e]; !1 === t ? r.removeAttribute(e) : r.setAttribute(e, !0 === t ? \"\" : t) })) }) }, effect: function e(t) { var n = t.state, i = { popper: { position: n.options.strategy, left: \"0\", top: \"0\", margin: \"0\" }, arrow: { position: \"absolute\" }, reference: {} }; return Object.assign(n.elements.popper.style, i.popper), n.styles = i, n.elements.arrow && Object.assign(n.elements.arrow.style, i.arrow), function () { Object.keys(n.elements).forEach(function (e) { var t = n.elements[e], r = n.attributes[e] || {}, o = Object.keys(n.styles.hasOwnProperty(e) ? n.styles[e] : i[e]).reduce(function (e, t) { return e[t] = \"\", e }, {}); tx(t) && tE(t) && (Object.assign(t.style, o), Object.keys(r).forEach(function (e) { t.removeAttribute(e) })) }) } }, requires: [\"computeStyles\"] }; function tL(e) { return e.split(\"-\")[0] } var tS = Math.max, tD = Math.min, tP = Math.round; function tI() { var e = navigator.userAgentData; return null != e && e.brands && Array.isArray(e.brands) ? e.brands.map(function (e) { return e.brand + \"/\" + e.version }).join(\" \") : navigator.userAgent } function tN() { return !/^((?!chrome|android).)*safari/i.test(tI()) } function tM(e, t, n) { void 0 === t && (t = !1), void 0 === n && (n = !1); var i = e.getBoundingClientRect(), r = 1, o = 1; t && tx(e) && (r = e.offsetWidth > 0 && tP(i.width) / e.offsetWidth || 1, o = e.offsetHeight > 0 && tP(i.height) / e.offsetHeight || 1); var a = (tT(e) ? tC(e) : window).visualViewport, s = !tN() && n, l = (i.left + (s && a ? a.offsetLeft : 0)) / r, c = (i.top + (s && a ? a.offsetTop : 0)) / o, u = i.width / r, f = i.height / o; return { width: u, height: f, top: c, right: l + u, bottom: c + f, left: l, x: l, y: c } } function tF(e) { var t = tM(e), n = e.offsetWidth, i = e.offsetHeight; return 1 >= Math.abs(t.width - n) && (n = t.width), 1 >= Math.abs(t.height - i) && (i = t.height), { x: e.offsetLeft, y: e.offsetTop, width: n, height: i } } function tj(e, t) { var n = t.getRootNode && t.getRootNode(); if (e.contains(t)) return !0; if (n && tO(n)) { var i = t; do { if (i && e.isSameNode(i)) return !0; i = i.parentNode || i.host } while (i) } return !1 } function tH(e) { return tC(e).getComputedStyle(e) } function tW(e) { return [\"table\", \"td\", \"th\"].indexOf(tE(e)) >= 0 } function t0(e) { return ((tT(e) ? e.ownerDocument : e.document) || window.document).documentElement } function tz(e) { return \"html\" === tE(e) ? e : e.assignedSlot || e.parentNode || (tO(e) ? e.host : null) || t0(e) } function tB(e) { return tx(e) && \"fixed\" !== tH(e).position ? e.offsetParent : null } function tq(e) { for (var t = tC(e), n = tB(e); n && tW(n) && \"static\" === tH(n).position;)n = tB(n); return n && (\"html\" === tE(n) || \"body\" === tE(n) && \"static\" === tH(n).position) ? t : n || function (e) { var t = /firefox/i.test(tI()); if (/Trident/i.test(tI()) && tx(e) && \"fixed\" === tH(e).position) return null; var n = tz(e); for (tO(n) && (n = n.host); tx(n) && 0 > [\"html\", \"body\"].indexOf(tE(n));) { var i = tH(n); if (\"none\" !== i.transform || \"none\" !== i.perspective || \"paint\" === i.contain || -1 !== [\"transform\", \"perspective\"].indexOf(i.willChange) || t && \"filter\" === i.willChange || t && i.filter && \"none\" !== i.filter) return n; n = n.parentNode } return null }(e) || t } function tR(e) { return [\"top\", \"bottom\"].indexOf(e) >= 0 ? \"x\" : \"y\" } function tV(e, t, n) { return tS(e, tD(t, n)) } function tK(e) { return Object.assign({}, { top: 0, right: 0, bottom: 0, left: 0 }, e) } function tQ(e, t) { return t.reduce(function (t, n) { return t[n] = e, t }, {}) } var tX = { name: \"arrow\", enabled: !0, phase: \"main\", fn: function e(t) { var n, i = t.state, r = t.name, o = t.options, a = i.elements.arrow, s = i.modifiersData.popperOffsets, l = tL(i.placement), c = tR(l), u = [to, tr].indexOf(l) >= 0 ? \"height\" : \"width\"; if (a && s) { var f, h, d = (f = o.padding, h = i, tK(\"number\" != typeof (f = \"function\" == typeof f ? f(Object.assign({}, h.rects, { placement: h.placement })) : f) ? f : tQ(f, ts))), p = tF(a), v = i.rects.reference[u] + i.rects.reference[c] - s[c] - i.rects.popper[u], g = s[c] - i.rects.reference[c], m = tq(a), y = m ? \"y\" === c ? m.clientHeight || 0 : m.clientWidth || 0 : 0, b = d[\"y\" === c ? tn : to], k = y - p[u] - d[\"y\" === c ? ti : tr], w = y / 2 - p[u] / 2 + (v / 2 - g / 2), $ = tV(b, w, k), A = c; i.modifiersData[r] = ((n = {})[A] = $, n.centerOffset = $ - w, n) } }, effect: function e(t) { var n = t.state, i = t.options.element, r = void 0 === i ? \"[data-popper-arrow]\" : i; null != r && (\"string\" != typeof r || (r = n.elements.popper.querySelector(r))) && tj(n.elements.popper, r) && (n.elements.arrow = r) }, requires: [\"popperOffsets\"], requiresIfExists: [\"preventOverflow\"] }; function tY(e) { return e.split(\"-\")[1] } var t1 = { top: \"auto\", right: \"auto\", bottom: \"auto\", left: \"auto\" }; function tU(e) { var t, n = e.popper, i = e.popperRect, r = e.placement, o = e.variation, a = e.offsets, s = e.position, l = e.gpuAcceleration, c = e.adaptive, u = e.roundOffsets, f = e.isFixed, h = a.x, d = void 0 === h ? 0 : h, p = a.y, v = void 0 === p ? 0 : p, g = \"function\" == typeof u ? u({ x: d, y: v }) : { x: d, y: v }; d = g.x, v = g.y; var m = a.hasOwnProperty(\"x\"), y = a.hasOwnProperty(\"y\"), b = to, k = tn, w = window; if (c) { var $ = tq(n), A = \"clientHeight\", E = \"clientWidth\"; $ === tC(n) && \"static\" !== tH($ = t0(n)).position && \"absolute\" === s && (A = \"scrollHeight\", E = \"scrollWidth\"), (r === tn || (r === to || r === tr) && \"end\" === o) && (k = ti, v -= (f && $ === w && w.visualViewport ? w.visualViewport.height : $[A]) - i.height, v *= l ? 1 : -1), r !== to && (r !== tn && r !== ti || \"end\" !== o) || (b = tr, d -= (f && $ === w && w.visualViewport ? w.visualViewport.width : $[E]) - i.width, d *= l ? 1 : -1) } var C, T, x, O, _, L, S = Object.assign({ position: s }, c && t1), D = !0 === u ? (C = { x: d, y: v }, T = tC(n), x = C.x, O = C.y, { x: tP(x * (_ = T.devicePixelRatio || 1)) / _ || 0, y: tP(O * _) / _ || 0 }) : { x: d, y: v }; return d = D.x, v = D.y, l ? Object.assign({}, S, ((L = {})[k] = y ? \"0\" : \"\", L[b] = m ? \"0\" : \"\", L.transform = 1 >= (w.devicePixelRatio || 1) ? \"translate(\" + d + \"px, \" + v + \"px)\" : \"translate3d(\" + d + \"px, \" + v + \"px, 0)\", L)) : Object.assign({}, S, ((t = {})[k] = y ? v + \"px\" : \"\", t[b] = m ? d + \"px\" : \"\", t.transform = \"\", t)) } var t3 = { name: \"computeStyles\", enabled: !0, phase: \"beforeWrite\", fn: function e(t) { var n = t.state, i = t.options, r = i.gpuAcceleration, o = i.adaptive, a = i.roundOffsets, s = void 0 === a || a, l = { placement: tL(n.placement), variation: tY(n.placement), popper: n.elements.popper, popperRect: n.rects.popper, gpuAcceleration: void 0 === r || r, isFixed: \"fixed\" === n.options.strategy }; null != n.modifiersData.popperOffsets && (n.styles.popper = Object.assign({}, n.styles.popper, tU(Object.assign({}, l, { offsets: n.modifiersData.popperOffsets, position: n.options.strategy, adaptive: void 0 === o || o, roundOffsets: s })))), null != n.modifiersData.arrow && (n.styles.arrow = Object.assign({}, n.styles.arrow, tU(Object.assign({}, l, { offsets: n.modifiersData.arrow, position: \"absolute\", adaptive: !1, roundOffsets: s })))), n.attributes.popper = Object.assign({}, n.attributes.popper, { \"data-popper-placement\": n.placement }) }, data: {} }, t4 = { passive: !0 }, t9 = { name: \"eventListeners\", enabled: !0, phase: \"write\", fn: function e() { }, effect: function e(t) { var n = t.state, i = t.instance, r = t.options, o = r.scroll, a = void 0 === o || o, s = r.resize, l = void 0 === s || s, c = tC(n.elements.popper), u = [].concat(n.scrollParents.reference, n.scrollParents.popper); return a && u.forEach(function (e) { e.addEventListener(\"scroll\", i.update, t4) }), l && c.addEventListener(\"resize\", i.update, t4), function () { a && u.forEach(function (e) { e.removeEventListener(\"scroll\", i.update, t4) }), l && c.removeEventListener(\"resize\", i.update, t4) } }, data: {} }, t6 = { left: \"right\", right: \"left\", bottom: \"top\", top: \"bottom\" }; function tG(e) { return e.replace(/left|right|bottom|top/g, function (e) { return t6[e] }) } var t2 = { start: \"end\", end: \"start\" }; function tZ(e) { return e.replace(/start|end/g, function (e) { return t2[e] }) } function t7(e) { var t = tC(e); return { scrollLeft: t.pageXOffset, scrollTop: t.pageYOffset } } function tJ(e) { return tM(t0(e)).left + t7(e).scrollLeft } function t5(e) { var t = tH(e), n = t.overflow, i = t.overflowX, r = t.overflowY; return /auto|scroll|overlay|hidden/.test(n + r + i) } function ne(e, t) { void 0 === t && (t = []); var n, i = function e(t) { return [\"html\", \"body\", \"#document\"].indexOf(tE(t)) >= 0 ? t.ownerDocument.body : tx(t) && t5(t) ? t : e(tz(t)) }(e), r = i === (null == (n = e.ownerDocument) ? void 0 : n.body), o = tC(i), a = r ? [o].concat(o.visualViewport || [], t5(i) ? i : []) : i, s = t.concat(a); return r ? s : s.concat(ne(tz(a))) } function nt(e) { return Object.assign({}, e, { left: e.x, top: e.y, right: e.x + e.width, bottom: e.y + e.height }) } function nn(e, t, n) { var i, r, o, a, s, l, c, u, f, h, d, p; return t === tu ? nt(function (e, t) { var n = tC(e), i = t0(e), r = n.visualViewport, o = i.clientWidth, a = i.clientHeight, s = 0, l = 0; if (r) { o = r.width, a = r.height; var c = tN(); (c || !c && \"fixed\" === t) && (s = r.offsetLeft, l = r.offsetTop) } return { width: o, height: a, x: s + tJ(e), y: l } }(e, n)) : tT(t) ? (i = t, (o = tM(i, !1, \"fixed\" === (r = n))).top = o.top + i.clientTop, o.left = o.left + i.clientLeft, o.bottom = o.top + i.clientHeight, o.right = o.left + i.clientWidth, o.width = i.clientWidth, o.height = i.clientHeight, o.x = o.left, o.y = o.top, o) : nt((a = t0(e), l = t0(a), c = t7(a), u = null == (s = a.ownerDocument) ? void 0 : s.body, f = tS(l.scrollWidth, l.clientWidth, u ? u.scrollWidth : 0, u ? u.clientWidth : 0), h = tS(l.scrollHeight, l.clientHeight, u ? u.scrollHeight : 0, u ? u.clientHeight : 0), d = -c.scrollLeft + tJ(a), p = -c.scrollTop, \"rtl\" === tH(u || l).direction && (d += tS(l.clientWidth, u ? u.clientWidth : 0) - f), { width: f, height: h, x: d, y: p })) } function ni(e) { var t, n = e.reference, i = e.element, r = e.placement, o = r ? tL(r) : null, a = r ? tY(r) : null, s = n.x + n.width / 2 - i.width / 2, l = n.y + n.height / 2 - i.height / 2; switch (o) { case tn: t = { x: s, y: n.y - i.height }; break; case ti: t = { x: s, y: n.y + n.height }; break; case tr: t = { x: n.x + n.width, y: l }; break; case to: t = { x: n.x - i.width, y: l }; break; default: t = { x: n.x, y: n.y } }var c = o ? tR(o) : null; if (null != c) { var u = \"y\" === c ? \"height\" : \"width\"; switch (a) { case tl: t[c] = t[c] - (n[u] / 2 - i[u] / 2); break; case \"end\": t[c] = t[c] + (n[u] / 2 - i[u] / 2) } } return t } function nr(e, t) { void 0 === t && (t = {}); var n, i, r, o, a, s, l, c, u, f, h = t, d = h.placement, p = void 0 === d ? e.placement : d, v = h.strategy, g = void 0 === v ? e.strategy : v, m = h.boundary, y = h.rootBoundary, b = h.elementContext, k = void 0 === b ? tf : b, w = h.altBoundary, $ = h.padding, A = void 0 === $ ? 0 : $, E = tK(\"number\" != typeof A ? A : tQ(A, ts)), C = e.rects.popper, T = e.elements[void 0 !== w && w ? k === tf ? th : tf : k], x = (n = tT(T) ? T : T.contextElement || t0(e.elements.popper), i = void 0 === m ? tc : m, r = void 0 === y ? tu : y, o = g, u = (c = [].concat(\"clippingParents\" === i ? (a = n, s = ne(tz(a)), l = [\"absolute\", \"fixed\"].indexOf(tH(a).position) >= 0 && tx(a) ? tq(a) : a, tT(l) ? s.filter(function (e) { return tT(e) && tj(e, l) && \"body\" !== tE(e) }) : []) : [].concat(i), [r]))[0], (f = c.reduce(function (e, t) { var i = nn(n, t, o); return e.top = tS(i.top, e.top), e.right = tD(i.right, e.right), e.bottom = tD(i.bottom, e.bottom), e.left = tS(i.left, e.left), e }, nn(n, u, o))).width = f.right - f.left, f.height = f.bottom - f.top, f.x = f.left, f.y = f.top, f), O = tM(e.elements.reference), _ = ni({ reference: O, element: C, strategy: \"absolute\", placement: p }), L = nt(Object.assign({}, C, _)), S = k === tf ? L : O, D = { top: x.top - S.top + E.top, bottom: S.bottom - x.bottom + E.bottom, left: x.left - S.left + E.left, right: S.right - x.right + E.right }, P = e.modifiersData.offset; if (k === tf && P) { var I = P[p]; Object.keys(D).forEach(function (e) { var t = [tr, ti].indexOf(e) >= 0 ? 1 : -1, n = [tn, ti].indexOf(e) >= 0 ? \"y\" : \"x\"; D[e] += I[n] * t }) } return D } var no = { name: \"flip\", enabled: !0, phase: \"main\", fn: function e(t) { var n = t.state, i = t.options, r = t.name; if (!n.modifiersData[r]._skip) { for (var o = i.mainAxis, a = void 0 === o || o, s = i.altAxis, l = void 0 === s || s, c = i.fallbackPlacements, u = i.padding, f = i.boundary, h = i.rootBoundary, d = i.altBoundary, p = i.flipVariations, v = void 0 === p || p, g = i.allowedAutoPlacements, m = n.options.placement, y = tL(m), b = c || (y !== m && v ? function (e) { if (tL(e) === ta) return []; var t = tG(e); return [tZ(e), t, tZ(t)] }(m) : [tG(m)]), k = [m].concat(b).reduce(function (e, t) { var i, r, o, a, s, l, c, d, p, m, y, b, k, w; return e.concat(tL(t) === ta ? (i = n, r = { placement: t, boundary: f, rootBoundary: h, padding: u, flipVariations: v, allowedAutoPlacements: g }, !1, a = (o = r).placement, s = o.boundary, l = o.rootBoundary, c = o.padding, d = o.flipVariations, m = void 0 === (p = o.allowedAutoPlacements) ? tp : p, 0 === (k = (b = (y = tY(a)) ? d ? td : td.filter(function (e) { return tY(e) === y }) : ts).filter(function (e) { return m.indexOf(e) >= 0 })).length && (k = b), Object.keys(w = k.reduce(function (e, t) { return e[t] = nr(i, { placement: t, boundary: s, rootBoundary: l, padding: c })[tL(t)], e }, {})).sort(function (e, t) { return w[e] - w[t] })) : t) }, []), w = n.rects.reference, $ = n.rects.popper, A = new Map, E = !0, C = k[0], T = 0; T < k.length; T++) { var x = k[T], O = tL(x), _ = tY(x) === tl, L = [tn, ti].indexOf(O) >= 0, S = L ? \"width\" : \"height\", D = nr(n, { placement: x, boundary: f, rootBoundary: h, altBoundary: d, padding: u }), P = L ? _ ? tr : to : _ ? ti : tn; w[S] > $[S] && (P = tG(P)); var I = tG(P), N = []; if (a && N.push(D[O] <= 0), l && N.push(D[P] <= 0, D[I] <= 0), N.every(function (e) { return e })) { C = x, E = !1; break } A.set(x, N) } if (E) for (var M = function e(t) { var n = k.find(function (e) { var n = A.get(e); if (n) return n.slice(0, t).every(function (e) { return e }) }); if (n) return C = n, \"break\" }, F = v ? 3 : 1; F > 0 && \"break\" !== M(F); F--); n.placement !== C && (n.modifiersData[r]._skip = !0, n.placement = C, n.reset = !0) } }, requiresIfExists: [\"offset\"], data: { _skip: !1 } }; function na(e, t, n) { return void 0 === n && (n = { x: 0, y: 0 }), { top: e.top - t.height - n.y, right: e.right - t.width + n.x, bottom: e.bottom - t.height + n.y, left: e.left - t.width - n.x } } function ns(e) { return [tn, tr, ti, to].some(function (t) { return e[t] >= 0 }) } var nl = { name: \"hide\", enabled: !0, phase: \"main\", requiresIfExists: [\"preventOverflow\"], fn: function e(t) { var n = t.state, i = t.name, r = n.rects.reference, o = n.rects.popper, a = n.modifiersData.preventOverflow, s = nr(n, { elementContext: \"reference\" }), l = nr(n, { altBoundary: !0 }), c = na(s, r), u = na(l, o, a), f = ns(c), h = ns(u); n.modifiersData[i] = { referenceClippingOffsets: c, popperEscapeOffsets: u, isReferenceHidden: f, hasPopperEscaped: h }, n.attributes.popper = Object.assign({}, n.attributes.popper, { \"data-popper-reference-hidden\": f, \"data-popper-escaped\": h }) } }, nc = { name: \"offset\", enabled: !0, phase: \"main\", requires: [\"popperOffsets\"], fn: function e(t) { var n = t.state, i = t.options, r = t.name, o = i.offset, a = void 0 === o ? [0, 0] : o, s = tp.reduce(function (e, t) { var i, r, o, s, l, c, u, f; return e[t] = (i = t, r = n.rects, o = a, l = [to, tn].indexOf(s = tL(i)) >= 0 ? -1 : 1, u = (c = \"function\" == typeof o ? o(Object.assign({}, r, { placement: i })) : o)[0], f = c[1], u = u || 0, f = (f || 0) * l, [to, tr].indexOf(s) >= 0 ? { x: f, y: u } : { x: u, y: f }), e }, {}), l = s[n.placement], c = l.x, u = l.y; null != n.modifiersData.popperOffsets && (n.modifiersData.popperOffsets.x += c, n.modifiersData.popperOffsets.y += u), n.modifiersData[r] = s } }, nu = { name: \"popperOffsets\", enabled: !0, phase: \"read\", fn: function e(t) { var n = t.state, i = t.name; n.modifiersData[i] = ni({ reference: n.rects.reference, element: n.rects.popper, strategy: \"absolute\", placement: n.placement }) }, data: {} }, nf = { name: \"preventOverflow\", enabled: !0, phase: \"main\", fn: function e(t) { var n = t.state, i = t.options, r = t.name, o = i.mainAxis, a = i.altAxis, s = i.boundary, l = i.rootBoundary, c = i.altBoundary, u = i.padding, f = i.tether, h = void 0 === f || f, d = i.tetherOffset, p = void 0 === d ? 0 : d, v = nr(n, { boundary: s, rootBoundary: l, padding: u, altBoundary: c }), g = tL(n.placement), m = tY(n.placement), y = !m, b = tR(g), k = \"x\" === b ? \"y\" : \"x\", w = n.modifiersData.popperOffsets, $ = n.rects.reference, A = n.rects.popper, E = \"function\" == typeof p ? p(Object.assign({}, n.rects, { placement: n.placement })) : p, C = \"number\" == typeof E ? { mainAxis: E, altAxis: E } : Object.assign({ mainAxis: 0, altAxis: 0 }, E), T = n.modifiersData.offset ? n.modifiersData.offset[n.placement] : null, x = { x: 0, y: 0 }; if (w) { if (void 0 === o || o) { var O, _ = \"y\" === b ? tn : to, L = \"y\" === b ? ti : tr, S = \"y\" === b ? \"height\" : \"width\", D = w[b], P = D + v[_], I = D - v[L], N = h ? -A[S] / 2 : 0, M = m === tl ? $[S] : A[S], F = m === tl ? -A[S] : -$[S], j = n.elements.arrow, H = h && j ? tF(j) : { width: 0, height: 0 }, W = n.modifiersData[\"arrow#persistent\"] ? n.modifiersData[\"arrow#persistent\"].padding : { top: 0, right: 0, bottom: 0, left: 0 }, z = W[_], B = W[L], q = tV(0, $[S], H[S]), R = y ? $[S] / 2 - N - q - z - C.mainAxis : M - q - z - C.mainAxis, V = y ? -$[S] / 2 + N + q + B + C.mainAxis : F + q + B + C.mainAxis, K = n.elements.arrow && tq(n.elements.arrow), Q = K ? \"y\" === b ? K.clientTop || 0 : K.clientLeft || 0 : 0, X = null != (O = null == T ? void 0 : T[b]) ? O : 0, Y = tV(h ? tD(P, D + R - X - Q) : P, D, h ? tS(I, D + V - X) : I); w[b] = Y, x[b] = Y - D } if (void 0 !== a && a) { var U, G, Z, J, ee, et = w[k], en = \"y\" === k ? \"height\" : \"width\", ei = et + v[\"x\" === b ? tn : to], er = et - v[\"x\" === b ? ti : tr], eo = -1 !== [tn, to].indexOf(g), ea = null != (ee = null == T ? void 0 : T[k]) ? ee : 0, es = eo ? ei : et - $[en] - A[en] - ea + C.altAxis, el = eo ? et + $[en] + A[en] - ea - C.altAxis : er, ec = h && eo ? (U = es, G = et, Z = el, (J = tV(U, G, Z)) > Z ? Z : J) : tV(h ? es : ei, et, h ? el : er); w[k] = ec, x[k] = ec - et } n.modifiersData[r] = x } }, requiresIfExists: [\"offset\"] }, nh = { placement: \"bottom\", modifiers: [], strategy: \"absolute\" }; function nd() { for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)t[n] = arguments[n]; return !t.some(function (e) { return !(e && \"function\" == typeof e.getBoundingClientRect) }) } function np(e) { void 0 === e && (e = {}); var t = e, n = t.defaultModifiers, i = void 0 === n ? [] : n, r = t.defaultOptions, o = void 0 === r ? nh : r; return function (e, t, n) { void 0 === n && (n = o); var r, a, s = { placement: \"bottom\", orderedModifiers: [], options: Object.assign({}, nh, o), modifiersData: {}, elements: { reference: e, popper: t }, attributes: {}, styles: {} }, l = [], c = !1, u = { state: s, setOptions: function n(r) { var a, c, h, d, p, v, g = \"function\" == typeof r ? r(s.options) : r; f(), s.options = Object.assign({}, o, s.options, g), s.scrollParents = { reference: tT(e) ? ne(e) : e.contextElement ? ne(e.contextElement) : [], popper: ne(t) }; var m, y, b = (v = (c = a = Object.keys(y = (m = [].concat(i, s.options.modifiers)).reduce(function (e, t) { var n = e[t.name]; return e[t.name] = n ? Object.assign({}, n, t, { options: Object.assign({}, n.options, t.options), data: Object.assign({}, n.data, t.data) }) : t, e }, {})).map(function (e) { return y[e] }), h = new Map, d = new Set, p = [], c.forEach(function (e) { h.set(e.name, e) }), c.forEach(function (e) { d.has(e.name) || function e(t) { d.add(t.name), [].concat(t.requires || [], t.requiresIfExists || []).forEach(function (t) { if (!d.has(t)) { var n = h.get(t); n && e(n) } }), p.push(t) }(e) }), p), tA.reduce(function (e, t) { return e.concat(v.filter(function (e) { return e.phase === t })) }, [])); return s.orderedModifiers = b.filter(function (e) { return e.enabled }), s.orderedModifiers.forEach(function (e) { var t = e.name, n = e.options, i = e.effect; if (\"function\" == typeof i) { var r = i({ state: s, name: t, instance: u, options: void 0 === n ? {} : n }); l.push(r || function () { }) } }), u.update() }, forceUpdate: function e() { if (!c) { var t, n, i, r, o, a, l, f, h, d, p, v, g, m, y, b = s.elements, k = b.reference, w = b.popper; if (nd(k, w)) { s.rects = { reference: (t = k, n = tq(w), i = \"fixed\" === s.options.strategy, !1, d = tx(n), p = tx(n) && (a = tP((o = (r = n).getBoundingClientRect()).width) / r.offsetWidth || 1, l = tP(o.height) / r.offsetHeight || 1, 1 !== a || 1 !== l), v = t0(n), g = tM(t, p, i), m = { scrollLeft: 0, scrollTop: 0 }, y = { x: 0, y: 0 }, (d || !d && !i) && ((\"body\" !== tE(n) || t5(v)) && (m = (f = n) !== tC(f) && tx(f) ? { scrollLeft: (h = f).scrollLeft, scrollTop: h.scrollTop } : t7(f)), tx(n) ? ((y = tM(n, !0)).x += n.clientLeft, y.y += n.clientTop) : v && (y.x = tJ(v))), { x: g.left + m.scrollLeft - y.x, y: g.top + m.scrollTop - y.y, width: g.width, height: g.height }), popper: tF(w) }, s.reset = !1, s.placement = s.options.placement, s.orderedModifiers.forEach(function (e) { return s.modifiersData[e.name] = Object.assign({}, e.data) }); for (var $ = 0; $ < s.orderedModifiers.length; $++)if (!0 !== s.reset) { var A = s.orderedModifiers[$], E = A.fn, C = A.options, T = void 0 === C ? {} : C, x = A.name; \"function\" == typeof E && (s = E({ state: s, options: T, name: x, instance: u }) || s) } else s.reset = !1, $ = -1 } } }, update: (r = function e() { return new Promise(function (e) { u.forceUpdate(), e(s) }) }, function () { return a || (a = new Promise(function (e) { Promise.resolve().then(function () { a = void 0, e(r()) }) })), a }), destroy: function e() { f(), c = !0 } }; if (!nd(e, t)) return u; function f() { l.forEach(function (e) { return e() }), l = [] } return u.setOptions(n).then(function (e) { !c && n.onFirstUpdate && n.onFirstUpdate(e) }), u } } var nv = np(), ng = np({ defaultModifiers: [t9, nu, t3, t_] }), nm = np({ defaultModifiers: [t9, nu, t3, t_, nc, no, nf, tX, nl] }), n8 = Object.freeze(Object.defineProperty({ __proto__: null, afterMain: tb, afterRead: tm, afterWrite: t$, applyStyles: t_, arrow: tX, auto: ta, basePlacements: ts, beforeMain: t8, beforeRead: tv, beforeWrite: tk, bottom: ti, clippingParents: tc, computeStyles: t3, createPopper: nm, createPopperBase: nv, createPopperLite: ng, detectOverflow: nr, end: \"end\", eventListeners: t9, flip: no, hide: nl, left: to, main: ty, modifierPhases: tA, offset: nc, placements: tp, popper: tf, popperGenerator: np, popperOffsets: nu, preventOverflow: nf, read: tg, reference: th, right: tr, start: tl, top: tn, variationPlacements: td, viewport: tu, write: tw }, Symbol.toStringTag, { value: \"Module\" })), ny = \"dropdown\", nb = \".\".concat(\"bs.dropdown\"), nk = \".data-api\", nw = \"ArrowDown\", n$ = \"hide\".concat(nb), nA = \"hidden\".concat(nb), nE = \"show\".concat(nb), nC = \"shown\".concat(nb), nT = \"click\".concat(nb).concat(nk), nx = \"keydown\".concat(nb).concat(nk), nO = \"keyup\".concat(nb).concat(nk), n_ = \"show\", nL = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)', nS = \"\".concat(nL, \".\").concat(n_), nD = \".dropdown-menu\", nP = P() ? \"top-end\" : \"top-start\", nI = P() ? \"top-start\" : \"top-end\", nN = P() ? \"bottom-end\" : \"bottom-start\", nM = P() ? \"bottom-start\" : \"bottom-end\", nF = P() ? \"left-start\" : \"right-start\", nj = P() ? \"right-start\" : \"left-start\", nH = { autoClose: !0, boundary: \"clippingParents\", display: \"dynamic\", offset: [0, 2], popperConfig: null, reference: \"toggle\" }, nW = { autoClose: \"(boolean|string)\", boundary: \"(string|element)\", display: \"string\", offset: \"(array|string|function)\", popperConfig: \"(null|object|function)\", reference: \"(string|element|object)\" }, n0 = function (e) { function i(e, r) { var o; return n(this, i), (o = t(this, i, [e, r]))._popper = null, o._parent = o._element.parentNode, o._menu = eu.next(o._element, nD)[0] || eu.prev(o._element, nD)[0] || eu.findOne(nD, o._parent), o._inNavbar = o._detectNavbar(), o } return c(i, e), r(i, [{ key: \"toggle\", value: function e() { return this._isShown() ? this.hide() : this.show() } }, { key: \"show\", value: function e() { if (!x(this._element) && !this._isShown()) { var t = { relatedTarget: this._element }; if (!J.trigger(this._element, nE, t).defaultPrevented) { if (this._createPopper(), \"ontouchstart\" in document.documentElement && !this._parent.closest(\".navbar-nav\")) { var n, i, r = o((n = []).concat.apply(n, g(document.body.children))); try { for (r.s(); !(i = r.n()).done;) { var a = i.value; J.on(a, \"mouseover\", _) } } catch (s) { r.e(s) } finally { r.f() } } this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), this._menu.classList.add(n_), this._element.classList.add(n_), J.trigger(this._element, nC, t) } } } }, { key: \"hide\", value: function e() { if (!x(this._element) && this._isShown()) { var t = { relatedTarget: this._element }; this._completeHide(t) } } }, { key: \"dispose\", value: function e() { this._popper && this._popper.destroy(), s(l(i.prototype), \"dispose\", this).call(this) } }, { key: \"update\", value: function e() { this._inNavbar = this._detectNavbar(), this._popper && this._popper.update() } }, { key: \"_completeHide\", value: function e(t) { if (!J.trigger(this._element, n$, t).defaultPrevented) { if (\"ontouchstart\" in document.documentElement) { var n, i, r = o((n = []).concat.apply(n, g(document.body.children))); try { for (r.s(); !(i = r.n()).done;) { var a = i.value; J.off(a, \"mouseover\", _) } } catch (s) { r.e(s) } finally { r.f() } } this._popper && this._popper.destroy(), this._menu.classList.remove(n_), this._element.classList.remove(n_), this._element.setAttribute(\"aria-expanded\", \"false\"), er(this._menu, \"popper\"), J.trigger(this._element, nA, t) } } }, { key: \"_getConfig\", value: function e(t) { if (\"object\" === y((t = s(l(i.prototype), \"_getConfig\", this).call(this, t)).reference) && !E(t.reference) && \"function\" != typeof t.reference.getBoundingClientRect) throw TypeError(\"\".concat(ny.toUpperCase(), ': Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.')); return t } }, { key: \"_createPopper\", value: function e() { if (void 0 === n8) throw TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org/docs/v2/)\"); var t = this._element; \"parent\" === this._config.reference ? t = this._parent : E(this._config.reference) ? t = C(this._config.reference) : \"object\" === y(this._config.reference) && (t = this._config.reference); var n = this._getPopperConfig(); this._popper = nm(t, this._menu, n) } }, { key: \"_isShown\", value: function e() { return this._menu.classList.contains(n_) } }, { key: \"_getPlacement\", value: function e() { var t = this._parent; if (t.classList.contains(\"dropend\")) return nF; if (t.classList.contains(\"dropstart\")) return nj; if (t.classList.contains(\"dropup-center\")) return \"top\"; if (t.classList.contains(\"dropdown-center\")) return \"bottom\"; var n = \"end\" === getComputedStyle(this._menu).getPropertyValue(\"--bs-position\").trim(); return t.classList.contains(\"dropup\") ? n ? nI : nP : n ? nM : nN } }, { key: \"_detectNavbar\", value: function e() { return null !== this._element.closest(\".navbar\") } }, { key: \"_getOffset\", value: function e() { var t = this, n = this._config.offset; return \"string\" == typeof n ? n.split(\",\").map(function (e) { return Number.parseInt(e, 10) }) : \"function\" == typeof n ? function (e) { return n(e, t._element) } : n } }, { key: \"_getPopperConfig\", value: function e() { var t = { placement: this._getPlacement(), modifiers: [{ name: \"preventOverflow\", options: { boundary: this._config.boundary } }, { name: \"offset\", options: { offset: this._getOffset() } }] }; return (this._inNavbar || \"static\" === this._config.display) && (ei(this._menu, \"popper\", \"static\"), t.modifiers = [{ name: \"applyStyles\", enabled: !1 }]), h(h({}, t), N(this._config.popperConfig, [t])) } }, { key: \"_selectMenuItem\", value: function e(t) { var n = t.key, i = t.target, r = eu.find(\".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\", this._menu).filter(function (e) { return T(e) }); r.length && F(r, i, n === nw, !r.includes(i)).focus() } }], [{ key: \"Default\", get: function e() { return nH } }, { key: \"DefaultType\", get: function e() { return nW } }, { key: \"NAME\", get: function e() { return ny } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this, t); if (\"string\" == typeof t) { if (void 0 === e[t]) throw TypeError('No method named \"'.concat(t, '\"')); e[t]() } }) } }, { key: \"clearMenus\", value: function e(t) { if (2 !== t.button && (\"keyup\" !== t.type || \"Tab\" === t.key)) { var n, r = o(eu.find(nS)); try { for (r.s(); !(n = r.n()).done;) { var a = n.value, s = i.getInstance(a); if (s && !1 !== s._config.autoClose) { var l = t.composedPath(), c = l.includes(s._menu); if (!(l.includes(s._element) || \"inside\" === s._config.autoClose && !c || \"outside\" === s._config.autoClose && c || s._menu.contains(t.target) && (\"keyup\" === t.type && \"Tab\" === t.key || /input|select|option|textarea|form/i.test(t.target.tagName)))) { var u = { relatedTarget: s._element }; \"click\" === t.type && (u.clickEvent = t), s._completeHide(u) } } } } catch (f) { r.e(f) } finally { r.f() } } } }, { key: \"dataApiKeydownHandler\", value: function e(t) { var n = /input|textarea/i.test(t.target.tagName), r = \"Escape\" === t.key, o = [\"ArrowUp\", nw].includes(t.key); if ((o || r) && (!n || r)) { t.preventDefault(); var a = this.matches(nL) ? this : eu.prev(this, nL)[0] || eu.next(this, nL)[0] || eu.findOne(nL, t.delegateTarget.parentNode), s = i.getOrCreateInstance(a); if (o) return t.stopPropagation(), s.show(), void s._selectMenuItem(t); s._isShown() && (t.stopPropagation(), s.hide(), a.focus()) } } }]) }(el); J.on(document, nx, nL, n0.dataApiKeydownHandler), J.on(document, nx, nD, n0.dataApiKeydownHandler), J.on(document, nT, n0.clearMenus), J.on(document, nO, n0.clearMenus), J.on(document, nT, nL, function (e) { e.preventDefault(), n0.getOrCreateInstance(this).toggle() }), I(n0); var nz = \"backdrop\", nB = \"show\", nq = \"mousedown.bs.\".concat(nz), nR = { className: \"modal-backdrop\", clickCallback: null, isAnimated: !1, isVisible: !0, rootElement: \"body\" }, nV = { className: \"string\", clickCallback: \"(function|null)\", isAnimated: \"boolean\", isVisible: \"boolean\", rootElement: \"(element|string)\" }, nK = function (e) { function i(e) { var r; return n(this, i), (r = t(this, i))._config = r._getConfig(e), r._isAppended = !1, r._element = null, r } return c(i, e), r(i, [{ key: \"show\", value: function e(t) { if (this._config.isVisible) { this._append(); var n = this._getElement(); this._config.isAnimated && L(n), n.classList.add(nB), this._emulateAnimation(function () { N(t) }) } else N(t) } }, { key: \"hide\", value: function e(t) { var n = this; this._config.isVisible ? (this._getElement().classList.remove(nB), this._emulateAnimation(function () { n.dispose(), N(t) })) : N(t) } }, { key: \"dispose\", value: function e() { this._isAppended && (J.off(this._element, nq), this._element.remove(), this._isAppended = !1) } }, { key: \"_getElement\", value: function e() { if (!this._element) { var t = document.createElement(\"div\"); t.className = this._config.className, this._config.isAnimated && t.classList.add(\"fade\"), this._element = t } return this._element } }, { key: \"_configAfterMerge\", value: function e(t) { return t.rootElement = C(t.rootElement), t } }, { key: \"_append\", value: function e() { var t = this; if (!this._isAppended) { var n = this._getElement(); this._config.rootElement.append(n), J.on(n, nq, function () { N(t._config.clickCallback) }), this._isAppended = !0 } } }, { key: \"_emulateAnimation\", value: function e(t) { M(t, this._getElement(), this._config.isAnimated) } }], [{ key: \"Default\", get: function e() { return nR } }, { key: \"DefaultType\", get: function e() { return nV } }, { key: \"NAME\", get: function e() { return nz } }]) }(es), nQ = \".\".concat(\"bs.focustrap\"), nX = \"focusin\".concat(nQ), nY = \"keydown.tab\".concat(nQ), n1 = \"backward\", nU = { autofocus: !0, trapElement: null }, n3 = { autofocus: \"boolean\", trapElement: \"element\" }, n4 = function (e) { function i(e) { var r; return n(this, i), (r = t(this, i))._config = r._getConfig(e), r._isActive = !1, r._lastTabNavDirection = null, r } return c(i, e), r(i, [{ key: \"activate\", value: function e() { var t = this; this._isActive || (this._config.autofocus && this._config.trapElement.focus(), J.off(document, nQ), J.on(document, nX, function (e) { return t._handleFocusin(e) }), J.on(document, nY, function (e) { return t._handleKeydown(e) }), this._isActive = !0) } }, { key: \"deactivate\", value: function e() { this._isActive && (this._isActive = !1, J.off(document, nQ)) } }, { key: \"_handleFocusin\", value: function e(t) { var n = this._config.trapElement; if (t.target !== document && t.target !== n && !n.contains(t.target)) { var i = eu.focusableChildren(n); 0 === i.length ? n.focus() : this._lastTabNavDirection === n1 ? i[i.length - 1].focus() : i[0].focus() } } }, { key: \"_handleKeydown\", value: function e(t) { \"Tab\" === t.key && (this._lastTabNavDirection = t.shiftKey ? n1 : \"forward\") } }], [{ key: \"Default\", get: function e() { return nU } }, { key: \"DefaultType\", get: function e() { return n3 } }, { key: \"NAME\", get: function e() { return \"focustrap\" } }]) }(es), n9 = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", n6 = \".sticky-top\", nG = \"padding-right\", n2 = \"margin-right\", nZ = r(function e() { n(this, e), this._element = document.body }, [{ key: \"getWidth\", value: function e() { var t = document.documentElement.clientWidth; return Math.abs(window.innerWidth - t) } }, { key: \"hide\", value: function e() { var t = this.getWidth(); this._disableOverFlow(), this._setElementAttributes(this._element, nG, function (e) { return e + t }), this._setElementAttributes(n9, nG, function (e) { return e + t }), this._setElementAttributes(n6, n2, function (e) { return e - t }) } }, { key: \"reset\", value: function e() { this._resetElementAttributes(this._element, \"overflow\"), this._resetElementAttributes(this._element, nG), this._resetElementAttributes(n9, nG), this._resetElementAttributes(n6, n2) } }, { key: \"isOverflowing\", value: function e() { return this.getWidth() > 0 } }, { key: \"_disableOverFlow\", value: function e() { this._saveInitialAttribute(this._element, \"overflow\"), this._element.style.overflow = \"hidden\" } }, { key: \"_setElementAttributes\", value: function e(t, n, i) { var r = this, o = this.getWidth(); this._applyManipulationCallback(t, function (e) { if (!(e !== r._element && window.innerWidth > e.clientWidth + o)) { r._saveInitialAttribute(e, n); var t = window.getComputedStyle(e).getPropertyValue(n); e.style.setProperty(n, \"\".concat(i(Number.parseFloat(t)), \"px\")) } }) } }, { key: \"_saveInitialAttribute\", value: function e(t, n) { var i = t.style.getPropertyValue(n); i && ei(t, n, i) } }, { key: \"_resetElementAttributes\", value: function e(t, n) { this._applyManipulationCallback(t, function (e) { var t = ea(e, n); null !== t ? (er(e, n), e.style.setProperty(n, t)) : e.style.removeProperty(n) }) } }, { key: \"_applyManipulationCallback\", value: function e(t, n) { if (E(t)) n(t); else { var i, r = o(eu.find(t, this._element)); try { for (r.s(); !(i = r.n()).done;)n(i.value) } catch (a) { r.e(a) } finally { r.f() } } } }]), n7 = \".\".concat(\"bs.modal\"), nJ = \"hide\".concat(n7), n5 = \"hidePrevented\".concat(n7), ie = \"hidden\".concat(n7), it = \"show\".concat(n7), ii = \"shown\".concat(n7), ir = \"resize\".concat(n7), io = \"click.dismiss\".concat(n7), ia = \"mousedown.dismiss\".concat(n7), is = \"keydown.dismiss\".concat(n7), il = \"click\".concat(n7).concat(\".data-api\"), ic = \"modal-open\", iu = \"show\", ih = \"modal-static\", id = { backdrop: !0, focus: !0, keyboard: !0 }, ip = { backdrop: \"(boolean|string)\", focus: \"boolean\", keyboard: \"boolean\" }, iv = function (e) { function i(e, r) { var o; return n(this, i), (o = t(this, i, [e, r]))._dialog = eu.findOne(\".modal-dialog\", o._element), o._backdrop = o._initializeBackDrop(), o._focustrap = o._initializeFocusTrap(), o._isShown = !1, o._isTransitioning = !1, o._scrollBar = new nZ, o._addEventListeners(), o } return c(i, e), r(i, [{ key: \"toggle\", value: function e(t) { return this._isShown ? this.hide() : this.show(t) } }, { key: \"show\", value: function e(t) { var n = this; this._isShown || this._isTransitioning || J.trigger(this._element, it, { relatedTarget: t }).defaultPrevented || (this._isShown = !0, this._isTransitioning = !0, this._scrollBar.hide(), document.body.classList.add(ic), this._adjustDialog(), this._backdrop.show(function () { return n._showElement(t) })) } }, { key: \"hide\", value: function e() { var t = this; this._isShown && !this._isTransitioning && (J.trigger(this._element, nJ).defaultPrevented || (this._isShown = !1, this._isTransitioning = !0, this._focustrap.deactivate(), this._element.classList.remove(iu), this._queueCallback(function () { return t._hideModal() }, this._element, this._isAnimated()))) } }, { key: \"dispose\", value: function e() { J.off(window, n7), J.off(this._dialog, n7), this._backdrop.dispose(), this._focustrap.deactivate(), s(l(i.prototype), \"dispose\", this).call(this) } }, { key: \"handleUpdate\", value: function e() { this._adjustDialog() } }, { key: \"_initializeBackDrop\", value: function e() { return new nK({ isVisible: Boolean(this._config.backdrop), isAnimated: this._isAnimated() }) } }, { key: \"_initializeFocusTrap\", value: function e() { return new n4({ trapElement: this._element }) } }, { key: \"_showElement\", value: function e(t) { var n = this; document.body.contains(this._element) || document.body.append(this._element), this._element.style.display = \"block\", this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.scrollTop = 0; var i = eu.findOne(\".modal-body\", this._dialog); i && (i.scrollTop = 0), L(this._element), this._element.classList.add(iu), this._queueCallback(function () { n._config.focus && n._focustrap.activate(), n._isTransitioning = !1, J.trigger(n._element, ii, { relatedTarget: t }) }, this._dialog, this._isAnimated()) } }, { key: \"_addEventListeners\", value: function e() { var t = this; J.on(this._element, is, function (e) { \"Escape\" === e.key && (t._config.keyboard ? t.hide() : t._triggerBackdropTransition()) }), J.on(window, ir, function () { t._isShown && !t._isTransitioning && t._adjustDialog() }), J.on(this._element, ia, function (e) { J.one(t._element, io, function (n) { t._element === e.target && t._element === n.target && (\"static\" !== t._config.backdrop ? t._config.backdrop && t.hide() : t._triggerBackdropTransition()) }) }) } }, { key: \"_hideModal\", value: function e() { var t = this; this._element.style.display = \"none\", this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._backdrop.hide(function () { document.body.classList.remove(ic), t._resetAdjustments(), t._scrollBar.reset(), J.trigger(t._element, ie) }) } }, { key: \"_isAnimated\", value: function e() { return this._element.classList.contains(\"fade\") } }, { key: \"_triggerBackdropTransition\", value: function e() { var t = this; if (!J.trigger(this._element, n5).defaultPrevented) { var n = this._element.scrollHeight > document.documentElement.clientHeight, i = this._element.style.overflowY; \"hidden\" === i || this._element.classList.contains(ih) || (n || (this._element.style.overflowY = \"hidden\"), this._element.classList.add(ih), this._queueCallback(function () { t._element.classList.remove(ih), t._queueCallback(function () { t._element.style.overflowY = i }, t._dialog) }, this._dialog), this._element.focus()) } } }, { key: \"_adjustDialog\", value: function e() { var t = this._element.scrollHeight > document.documentElement.clientHeight, n = this._scrollBar.getWidth(), i = n > 0; if (i && !t) { var r = P() ? \"paddingLeft\" : \"paddingRight\"; this._element.style[r] = \"\".concat(n, \"px\") } if (!i && t) { var o = P() ? \"paddingRight\" : \"paddingLeft\"; this._element.style[o] = \"\".concat(n, \"px\") } } }, { key: \"_resetAdjustments\", value: function e() { this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\" } }], [{ key: \"Default\", get: function e() { return id } }, { key: \"DefaultType\", get: function e() { return ip } }, { key: \"NAME\", get: function e() { return \"modal\" } }, { key: \"jQueryInterface\", value: function e(t, n) { return this.each(function () { var e = i.getOrCreateInstance(this, t); if (\"string\" == typeof t) { if (void 0 === e[t]) throw TypeError('No method named \"'.concat(t, '\"')); e[t](n) } }) } }]) }(el); J.on(document, il, '[data-bs-toggle=\"modal\"]', function (e) { var t = this, n = eu.getElementFromSelector(this);[\"A\", \"AREA\"].includes(this.tagName) && e.preventDefault(), J.one(n, it, function (e) { e.defaultPrevented || J.one(n, ie, function () { T(t) && t.focus() }) }); var i = eu.findOne(\".modal.show\"); i && iv.getInstance(i).hide(), iv.getOrCreateInstance(n).toggle(this) }), ef(iv), I(iv); var ig = \".\".concat(\"bs.offcanvas\"), im = \".data-api\", i8 = \"load\".concat(ig).concat(im), iy = \"show\", ib = \"showing\", ik = \"hiding\", iw = \".offcanvas.show\", i$ = \"show\".concat(ig), iA = \"shown\".concat(ig), iE = \"hide\".concat(ig), iC = \"hidePrevented\".concat(ig), iT = \"hidden\".concat(ig), ix = \"resize\".concat(ig), iO = \"click\".concat(ig).concat(im), i_ = \"keydown.dismiss\".concat(ig), iL = { backdrop: !0, keyboard: !0, scroll: !1 }, iS = { backdrop: \"(boolean|string)\", keyboard: \"boolean\", scroll: \"boolean\" }, iD = function (e) { function i(e, r) { var o; return n(this, i), (o = t(this, i, [e, r]))._isShown = !1, o._backdrop = o._initializeBackDrop(), o._focustrap = o._initializeFocusTrap(), o._addEventListeners(), o } return c(i, e), r(i, [{ key: \"toggle\", value: function e(t) { return this._isShown ? this.hide() : this.show(t) } }, { key: \"show\", value: function e(t) { var n = this; this._isShown || J.trigger(this._element, i$, { relatedTarget: t }).defaultPrevented || (this._isShown = !0, this._backdrop.show(), this._config.scroll || new nZ().hide(), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.classList.add(ib), this._queueCallback(function () { n._config.scroll && !n._config.backdrop || n._focustrap.activate(), n._element.classList.add(iy), n._element.classList.remove(ib), J.trigger(n._element, iA, { relatedTarget: t }) }, this._element, !0)) } }, { key: \"hide\", value: function e() { var t = this; this._isShown && !J.trigger(this._element, iE).defaultPrevented && (this._focustrap.deactivate(), this._element.blur(), this._isShown = !1, this._element.classList.add(ik), this._backdrop.hide(), this._queueCallback(function () { t._element.classList.remove(iy, ik), t._element.removeAttribute(\"aria-modal\"), t._element.removeAttribute(\"role\"), t._config.scroll || new nZ().reset(), J.trigger(t._element, iT) }, this._element, !0)) } }, { key: \"dispose\", value: function e() { this._backdrop.dispose(), this._focustrap.deactivate(), s(l(i.prototype), \"dispose\", this).call(this) } }, { key: \"_initializeBackDrop\", value: function e() { var t = this, n = Boolean(this._config.backdrop); return new nK({ className: \"offcanvas-backdrop\", isVisible: n, isAnimated: !0, rootElement: this._element.parentNode, clickCallback: n ? function () { \"static\" !== t._config.backdrop ? t.hide() : J.trigger(t._element, iC) } : null }) } }, { key: \"_initializeFocusTrap\", value: function e() { return new n4({ trapElement: this._element }) } }, { key: \"_addEventListeners\", value: function e() { var t = this; J.on(this._element, i_, function (e) { \"Escape\" === e.key && (t._config.keyboard ? t.hide() : J.trigger(t._element, iC)) }) } }], [{ key: \"Default\", get: function e() { return iL } }, { key: \"DefaultType\", get: function e() { return iS } }, { key: \"NAME\", get: function e() { return \"offcanvas\" } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this, t); if (\"string\" == typeof t) { if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw TypeError('No method named \"'.concat(t, '\"')); e[t](this) } }) } }]) }(el); J.on(document, iO, '[data-bs-toggle=\"offcanvas\"]', function (e) { var t = this, n = eu.getElementFromSelector(this); if ([\"A\", \"AREA\"].includes(this.tagName) && e.preventDefault(), !x(this)) { J.one(n, iT, function () { T(t) && t.focus() }); var i = eu.findOne(iw); i && i !== n && iD.getInstance(i).hide(), iD.getOrCreateInstance(n).toggle(this) } }), J.on(window, i8, function () { var e, t = o(eu.find(iw)); try { for (t.s(); !(e = t.n()).done;) { var n = e.value; iD.getOrCreateInstance(n).show() } } catch (i) { t.e(i) } finally { t.f() } }), J.on(window, ix, function () { var e, t = o(eu.find(\"[aria-modal][class*=show][class*=offcanvas-]\")); try { for (t.s(); !(e = t.n()).done;) { var n = e.value; \"fixed\" !== getComputedStyle(n).position && iD.getOrCreateInstance(n).hide() } } catch (i) { t.e(i) } finally { t.f() } }), ef(iD), I(iD); var iP = { \"*\": [\"class\", \"dir\", \"id\", \"lang\", \"role\", /^aria-[\\w-]*$/i], a: [\"target\", \"href\", \"title\", \"rel\"], area: [], b: [], br: [], col: [], code: [], dd: [], div: [], dl: [], dt: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: [\"src\", \"srcset\", \"alt\", \"title\", \"width\", \"height\"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] }, iI = new Set([\"background\", \"cite\", \"href\", \"itemtype\", \"longdesc\", \"poster\", \"src\", \"xlink:href\"]), iN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i, iM = function e(t, n) { var i = t.nodeName.toLowerCase(); return n.includes(i) ? !iI.has(i) || Boolean(iN.test(t.nodeValue)) : n.filter(function (e) { return e instanceof RegExp }).some(function (e) { return e.test(i) }) }, iF = { allowList: iP, content: {}, extraClass: \"\", html: !1, sanitize: !0, sanitizeFn: null, template: \"<div></div>\" }, ij = { allowList: \"object\", content: \"object\", extraClass: \"(string|function)\", html: \"boolean\", sanitize: \"boolean\", sanitizeFn: \"(null|function)\", template: \"string\" }, iH = { entry: \"(string|element|function|null)\", selector: \"(string|element)\" }, iW = function (e) { function i(e) { var r; return n(this, i), (r = t(this, i))._config = r._getConfig(e), r } return c(i, e), r(i, [{ key: \"getContent\", value: function e() { var t = this; return Object.values(this._config.content).map(function (e) { return t._resolvePossibleFunction(e) }).filter(Boolean) } }, { key: \"hasContent\", value: function e() { return this.getContent().length > 0 } }, { key: \"changeContent\", value: function e(t) { return this._checkContent(t), this._config.content = h(h({}, this._config.content), t), this } }, { key: \"toHtml\", value: function e() { var t = document.createElement(\"div\"); t.innerHTML = this._maybeSanitize(this._config.template); for (var n = 0, i = Object.entries(this._config.content); n < i.length; n++) { var r = v(i[n], 2), o = r[0], a = r[1]; this._setContent(t, a, o) } var s, l = t.children[0], c = this._resolvePossibleFunction(this._config.extraClass); return c && (s = l.classList).add.apply(s, g(c.split(\" \"))), l } }, { key: \"_typeCheckConfig\", value: function e(t) { s(l(i.prototype), \"_typeCheckConfig\", this).call(this, t), this._checkContent(t.content) } }, { key: \"_checkContent\", value: function e(t) { for (var n = 0, r = Object.entries(t); n < r.length; n++) { var o = v(r[n], 2), a = o[0], c = o[1]; s(l(i.prototype), \"_typeCheckConfig\", this).call(this, { selector: a, entry: c }, iH) } } }, { key: \"_setContent\", value: function e(t, n, i) { var r = eu.findOne(i, t); r && ((n = this._resolvePossibleFunction(n)) ? E(n) ? this._putElementInTemplate(C(n), r) : this._config.html ? r.innerHTML = this._maybeSanitize(n) : r.textContent = n : r.remove()) } }, { key: \"_maybeSanitize\", value: function e(t) { return this._config.sanitize ? function (e, t, n) { if (!e.length) return e; if (n && \"function\" == typeof n) return n(e); var i, r, a = new window.DOMParser().parseFromString(e, \"text/html\"), s = o((i = []).concat.apply(i, g(a.body.querySelectorAll(\"*\")))); try { for (s.s(); !(r = s.n()).done;) { var l, c = r.value, u = c.nodeName.toLowerCase(); if (Object.keys(t).includes(u)) { var f, h = (l = []).concat.apply(l, g(c.attributes)), d = [].concat(t[\"*\"] || [], t[u] || []), p = o(h); try { for (p.s(); !(f = p.n()).done;) { var v = f.value; iM(v, d) || c.removeAttribute(v.nodeName) } } catch (m) { p.e(m) } finally { p.f() } } else c.remove() } } catch (y) { s.e(y) } finally { s.f() } return a.body.innerHTML }(t, this._config.allowList, this._config.sanitizeFn) : t } }, { key: \"_resolvePossibleFunction\", value: function e(t) { return N(t, [this]) } }, { key: \"_putElementInTemplate\", value: function e(t, n) { if (this._config.html) return n.innerHTML = \"\", void n.append(t); n.textContent = t.textContent } }], [{ key: \"Default\", get: function e() { return iF } }, { key: \"DefaultType\", get: function e() { return ij } }, { key: \"NAME\", get: function e() { return \"TemplateFactory\" } }]) }(es), i0 = new Set([\"sanitize\", \"allowList\", \"sanitizeFn\"]), iz = \"fade\", iB = \"show\", iq = \".\".concat(\"modal\"), iR = \"hide.bs.modal\", iV = \"hover\", iK = \"focus\", iQ = { AUTO: \"auto\", TOP: \"top\", RIGHT: P() ? \"left\" : \"right\", BOTTOM: \"bottom\", LEFT: P() ? \"right\" : \"left\" }, iX = { allowList: iP, animation: !0, boundary: \"clippingParents\", container: !1, customClass: \"\", delay: 0, fallbackPlacements: [\"top\", \"right\", \"bottom\", \"left\"], html: !1, offset: [0, 6], placement: \"top\", popperConfig: null, sanitize: !0, sanitizeFn: null, selector: !1, template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>', title: \"\", trigger: \"hover focus\" }, iY = { allowList: \"object\", animation: \"boolean\", boundary: \"(string|element)\", container: \"(string|element|boolean)\", customClass: \"(string|function)\", delay: \"(number|object)\", fallbackPlacements: \"array\", html: \"boolean\", offset: \"(array|string|function)\", placement: \"(string|function)\", popperConfig: \"(null|object|function)\", sanitize: \"boolean\", sanitizeFn: \"(null|function)\", selector: \"(string|boolean)\", template: \"string\", title: \"(string|element|function)\", trigger: \"string\" }, i1 = function (e) { function i(e, r) { var o; if (n(this, i), void 0 === n8) throw TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org/docs/v2/)\"); return (o = t(this, i, [e, r]))._isEnabled = !0, o._timeout = 0, o._isHovered = null, o._activeTrigger = {}, o._popper = null, o._templateFactory = null, o._newContent = null, o.tip = null, o._setListeners(), o._config.selector || o._fixTitle(), o } return c(i, e), r(i, [{ key: \"enable\", value: function e() { this._isEnabled = !0 } }, { key: \"disable\", value: function e() { this._isEnabled = !1 } }, { key: \"toggleEnabled\", value: function e() { this._isEnabled = !this._isEnabled } }, { key: \"toggle\", value: function e() { this._isEnabled && (this._activeTrigger.click = !this._activeTrigger.click, this._isShown() ? this._leave() : this._enter()) } }, { key: \"dispose\", value: function e() { clearTimeout(this._timeout), J.off(this._element.closest(iq), iR, this._hideModalHandler), this._element.getAttribute(\"data-bs-original-title\") && this._element.setAttribute(\"title\", this._element.getAttribute(\"data-bs-original-title\")), this._disposePopper(), s(l(i.prototype), \"dispose\", this).call(this) } }, { key: \"show\", value: function e() { var t = this; if (\"none\" === this._element.style.display) throw Error(\"Please use show on visible elements\"); if (this._isWithContent() && this._isEnabled) { var n = J.trigger(this._element, this.constructor.eventName(\"show\")), i = (O(this._element) || this._element.ownerDocument.documentElement).contains(this._element); if (!n.defaultPrevented && i) { this._disposePopper(); var r = this._getTipElement(); this._element.setAttribute(\"aria-describedby\", r.getAttribute(\"id\")); var a = this._config.container; if (this._element.ownerDocument.documentElement.contains(this.tip) || (a.append(r), J.trigger(this._element, this.constructor.eventName(\"inserted\"))), this._popper = this._createPopper(r), r.classList.add(iB), \"ontouchstart\" in document.documentElement) { var s, l, c = o((s = []).concat.apply(s, g(document.body.children))); try { for (c.s(); !(l = c.n()).done;) { var u = l.value; J.on(u, \"mouseover\", _) } } catch (f) { c.e(f) } finally { c.f() } } this._queueCallback(function () { J.trigger(t._element, t.constructor.eventName(\"shown\")), !1 === t._isHovered && t._leave(), t._isHovered = !1 }, this.tip, this._isAnimated()) } } } }, { key: \"hide\", value: function e() { var t = this; if (this._isShown() && !J.trigger(this._element, this.constructor.eventName(\"hide\")).defaultPrevented) { if (this._getTipElement().classList.remove(iB), \"ontouchstart\" in document.documentElement) { var n, i, r = o((n = []).concat.apply(n, g(document.body.children))); try { for (r.s(); !(i = r.n()).done;) { var a = i.value; J.off(a, \"mouseover\", _) } } catch (s) { r.e(s) } finally { r.f() } } this._activeTrigger.click = !1, this._activeTrigger[iK] = !1, this._activeTrigger[iV] = !1, this._isHovered = null, this._queueCallback(function () { t._isWithActiveTrigger() || (t._isHovered || t._disposePopper(), t._element.removeAttribute(\"aria-describedby\"), J.trigger(t._element, t.constructor.eventName(\"hidden\"))) }, this.tip, this._isAnimated()) } } }, { key: \"update\", value: function e() { this._popper && this._popper.update() } }, { key: \"_isWithContent\", value: function e() { return Boolean(this._getTitle()) } }, { key: \"_getTipElement\", value: function e() { return this.tip || (this.tip = this._createTipElement(this._newContent || this._getContentForTemplate())), this.tip } }, { key: \"_createTipElement\", value: function e(t) { var n = this._getTemplateFactory(t).toHtml(); if (!n) return null; n.classList.remove(iz, iB), n.classList.add(\"bs-\".concat(this.constructor.NAME, \"-auto\")); var i = (function (e) { do e += Math.floor(1e6 * Math.random()); while (document.getElementById(e)); return e })(this.constructor.NAME).toString(); return n.setAttribute(\"id\", i), this._isAnimated() && n.classList.add(iz), n } }, { key: \"setContent\", value: function e(t) { this._newContent = t, this._isShown() && (this._disposePopper(), this.show()) } }, { key: \"_getTemplateFactory\", value: function e(t) { return this._templateFactory ? this._templateFactory.changeContent(t) : this._templateFactory = new iW(h(h({}, this._config), {}, { content: t, extraClass: this._resolvePossibleFunction(this._config.customClass) })), this._templateFactory } }, { key: \"_getContentForTemplate\", value: function e() { return a({}, \".tooltip-inner\", this._getTitle()) } }, { key: \"_getTitle\", value: function e() { return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute(\"data-bs-original-title\") } }, { key: \"_initializeOnDelegatedTarget\", value: function e(t) { return this.constructor.getOrCreateInstance(t.delegateTarget, this._getDelegateConfig()) } }, { key: \"_isAnimated\", value: function e() { return this._config.animation || this.tip && this.tip.classList.contains(iz) } }, { key: \"_isShown\", value: function e() { return this.tip && this.tip.classList.contains(iB) } }, { key: \"_createPopper\", value: function e(t) { var n = iQ[N(this._config.placement, [this, t, this._element]).toUpperCase()]; return nm(this._element, t, this._getPopperConfig(n)) } }, { key: \"_getOffset\", value: function e() { var t = this, n = this._config.offset; return \"string\" == typeof n ? n.split(\",\").map(function (e) { return Number.parseInt(e, 10) }) : \"function\" == typeof n ? function (e) { return n(e, t._element) } : n } }, { key: \"_resolvePossibleFunction\", value: function e(t) { return N(t, [this._element]) } }, { key: \"_getPopperConfig\", value: function e(t) { var n = this, i = { placement: t, modifiers: [{ name: \"flip\", options: { fallbackPlacements: this._config.fallbackPlacements } }, { name: \"offset\", options: { offset: this._getOffset() } }, { name: \"preventOverflow\", options: { boundary: this._config.boundary } }, { name: \"arrow\", options: { element: \".\".concat(this.constructor.NAME, \"-arrow\") } }, { name: \"preSetPlacement\", enabled: !0, phase: \"beforeMain\", fn: function e(t) { n._getTipElement().setAttribute(\"data-popper-placement\", t.state.placement) } }] }; return h(h({}, i), N(this._config.popperConfig, [i])) } }, { key: \"_setListeners\", value: function e() { var t, n = this, i = o(this._config.trigger.split(\" \")); try { for (i.s(); !(t = i.n()).done;) { var r = t.value; if (\"click\" === r) J.on(this._element, this.constructor.eventName(\"click\"), this._config.selector, function (e) { n._initializeOnDelegatedTarget(e).toggle() }); else if (\"manual\" !== r) { var a = r === iV ? this.constructor.eventName(\"mouseenter\") : this.constructor.eventName(\"focusin\"), s = r === iV ? this.constructor.eventName(\"mouseleave\") : this.constructor.eventName(\"focusout\"); J.on(this._element, a, this._config.selector, function (e) { var t = n._initializeOnDelegatedTarget(e); t._activeTrigger[\"focusin\" === e.type ? iK : iV] = !0, t._enter() }), J.on(this._element, s, this._config.selector, function (e) { var t = n._initializeOnDelegatedTarget(e); t._activeTrigger[\"focusout\" === e.type ? iK : iV] = t._element.contains(e.relatedTarget), t._leave() }) } } } catch (l) { i.e(l) } finally { i.f() } this._hideModalHandler = function () { n._element && n.hide() }, J.on(this._element.closest(iq), iR, this._hideModalHandler) } }, { key: \"_fixTitle\", value: function e() { var t = this._element.getAttribute(\"title\"); t && (this._element.getAttribute(\"aria-label\") || this._element.textContent.trim() || this._element.setAttribute(\"aria-label\", t), this._element.setAttribute(\"data-bs-original-title\", t), this._element.removeAttribute(\"title\")) } }, { key: \"_enter\", value: function e() { var t = this; this._isShown() || this._isHovered ? this._isHovered = !0 : (this._isHovered = !0, this._setTimeout(function () { t._isHovered && t.show() }, this._config.delay.show)) } }, { key: \"_leave\", value: function e() { var t = this; this._isWithActiveTrigger() || (this._isHovered = !1, this._setTimeout(function () { t._isHovered || t.hide() }, this._config.delay.hide)) } }, { key: \"_setTimeout\", value: function e(t, n) { clearTimeout(this._timeout), this._timeout = setTimeout(t, n) } }, { key: \"_isWithActiveTrigger\", value: function e() { return Object.values(this._activeTrigger).includes(!0) } }, { key: \"_getConfig\", value: function e(t) { for (var n = eo(this._element), i = 0, r = Object.keys(n); i < r.length; i++) { var o = r[i]; i0.has(o) && delete n[o] } return t = h(h({}, n), \"object\" === y(t) && t ? t : {}), t = this._mergeConfigObj(t), t = this._configAfterMerge(t), this._typeCheckConfig(t), t } }, { key: \"_configAfterMerge\", value: function e(t) { return t.container = !1 === t.container ? document.body : C(t.container), \"number\" == typeof t.delay && (t.delay = { show: t.delay, hide: t.delay }), \"number\" == typeof t.title && (t.title = t.title.toString()), \"number\" == typeof t.content && (t.content = t.content.toString()), t } }, { key: \"_getDelegateConfig\", value: function e() { for (var t = {}, n = 0, i = Object.entries(this._config); n < i.length; n++) { var r = v(i[n], 2), o = r[0], a = r[1]; this.constructor.Default[o] !== a && (t[o] = a) } return t.selector = !1, t.trigger = \"manual\", t } }, { key: \"_disposePopper\", value: function e() { this._popper && (this._popper.destroy(), this._popper = null), this.tip && (this.tip.remove(), this.tip = null) } }], [{ key: \"Default\", get: function e() { return iX } }, { key: \"DefaultType\", get: function e() { return iY } }, { key: \"NAME\", get: function e() { return \"tooltip\" } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this, t); if (\"string\" == typeof t) { if (void 0 === e[t]) throw TypeError('No method named \"'.concat(t, '\"')); e[t]() } }) } }]) }(el); I(i1); var iU = h(h({}, i1.Default), {}, { content: \"\", offset: [0, 8], placement: \"right\", template: '<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>', trigger: \"click\" }), i3 = h(h({}, i1.DefaultType), {}, { content: \"(null|string|element|function)\" }), i4 = function (e) { function i() { return n(this, i), t(this, i, arguments) } return c(i, e), r(i, [{ key: \"_isWithContent\", value: function e() { return this._getTitle() || this._getContent() } }, { key: \"_getContentForTemplate\", value: function e() { return a(a({}, \".popover-header\", this._getTitle()), \".popover-body\", this._getContent()) } }, { key: \"_getContent\", value: function e() { return this._resolvePossibleFunction(this._config.content) } }], [{ key: \"Default\", get: function e() { return iU } }, { key: \"DefaultType\", get: function e() { return i3 } }, { key: \"NAME\", get: function e() { return \"popover\" } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this, t); if (\"string\" == typeof t) { if (void 0 === e[t]) throw TypeError('No method named \"'.concat(t, '\"')); e[t]() } }) } }]) }(i1); I(i4); var i9 = \".\".concat(\"bs.scrollspy\"), i6 = \"activate\".concat(i9), iG = \"click\".concat(i9), i2 = \"load\".concat(i9).concat(\".data-api\"), iZ = \"active\", i7 = \"[href]\", iJ = \".nav-link\", i5 = \"\".concat(iJ, \", \").concat(\".nav-item\", \" > \").concat(iJ, \", \").concat(\".list-group-item\"), re = { offset: null, rootMargin: \"0px 0px -25%\", smoothScroll: !1, target: null, threshold: [.1, .5, 1] }, rt = { offset: \"(number|null)\", rootMargin: \"string\", smoothScroll: \"boolean\", target: \"element\", threshold: \"array\" }, rn = function (e) { function i(e, r) { var o; return n(this, i), (o = t(this, i, [e, r]))._targetLinks = new Map, o._observableSections = new Map, o._rootElement = \"visible\" === getComputedStyle(o._element).overflowY ? null : o._element, o._activeTarget = null, o._observer = null, o._previousScrollData = { visibleEntryTop: 0, parentScrollTop: 0 }, o.refresh(), o } return c(i, e), r(i, [{ key: \"refresh\", value: function e() { this._initializeTargetsAndObservables(), this._maybeEnableSmoothScroll(), this._observer ? this._observer.disconnect() : this._observer = this._getNewObserver(); var t, n = o(this._observableSections.values()); try { for (n.s(); !(t = n.n()).done;) { var i = t.value; this._observer.observe(i) } } catch (r) { n.e(r) } finally { n.f() } } }, { key: \"dispose\", value: function e() { this._observer.disconnect(), s(l(i.prototype), \"dispose\", this).call(this) } }, { key: \"_configAfterMerge\", value: function e(t) { return t.target = C(t.target) || document.body, t.rootMargin = t.offset ? \"\".concat(t.offset, \"px 0px -30%\") : t.rootMargin, \"string\" == typeof t.threshold && (t.threshold = t.threshold.split(\",\").map(function (e) { return Number.parseFloat(e) })), t } }, { key: \"_maybeEnableSmoothScroll\", value: function e() { var t = this; this._config.smoothScroll && (J.off(this._config.target, iG), J.on(this._config.target, iG, i7, function (e) { var n = t._observableSections.get(e.target.hash); if (n) { e.preventDefault(); var i = t._rootElement || window, r = n.offsetTop - t._element.offsetTop; if (i.scrollTo) return void i.scrollTo({ top: r, behavior: \"smooth\" }); i.scrollTop = r } })) } }, { key: \"_getNewObserver\", value: function e() { var t = this, n = { root: this._rootElement, threshold: this._config.threshold, rootMargin: this._config.rootMargin }; return new IntersectionObserver(function (e) { return t._observerCallback(e) }, n) } }, { key: \"_observerCallback\", value: function e(t) { var n = this, i = function e(t) { return n._targetLinks.get(\"#\".concat(t.target.id)) }, r = function e(t) { n._previousScrollData.visibleEntryTop = t.target.offsetTop, n._process(i(t)) }, a = (this._rootElement || document.documentElement).scrollTop, s = a >= this._previousScrollData.parentScrollTop; this._previousScrollData.parentScrollTop = a; var l, c = o(t); try { for (c.s(); !(l = c.n()).done;) { var u = l.value; if (u.isIntersecting) { var f = u.target.offsetTop >= this._previousScrollData.visibleEntryTop; if (s && f) { if (r(u), !a) return } else s || f || r(u) } else this._activeTarget = null, this._clearActiveClass(i(u)) } } catch (h) { c.e(h) } finally { c.f() } } }, { key: \"_initializeTargetsAndObservables\", value: function e() { this._targetLinks = new Map, this._observableSections = new Map; var t, n = o(eu.find(i7, this._config.target)); try { for (n.s(); !(t = n.n()).done;) { var i = t.value; if (i.hash && !x(i)) { var r = eu.findOne(decodeURI(i.hash), this._element); T(r) && (this._targetLinks.set(decodeURI(i.hash), i), this._observableSections.set(i.hash, r)) } } } catch (a) { n.e(a) } finally { n.f() } } }, { key: \"_process\", value: function e(t) { this._activeTarget !== t && (this._clearActiveClass(this._config.target), this._activeTarget = t, t.classList.add(iZ), this._activateParents(t), J.trigger(this._element, i6, { relatedTarget: t })) } }, { key: \"_activateParents\", value: function e(t) { if (t.classList.contains(\"dropdown-item\")) eu.findOne(\".dropdown-toggle\", t.closest(\".dropdown\")).classList.add(iZ); else { var n, i = o(eu.parents(t, \".nav, .list-group\")); try { for (i.s(); !(n = i.n()).done;) { var r, a = n.value, s = o(eu.prev(a, i5)); try { for (s.s(); !(r = s.n()).done;)r.value.classList.add(iZ) } catch (l) { s.e(l) } finally { s.f() } } } catch (c) { i.e(c) } finally { i.f() } } } }, { key: \"_clearActiveClass\", value: function e(t) { t.classList.remove(iZ); var n, i = o(eu.find(\"\".concat(i7, \".\").concat(iZ), t)); try { for (i.s(); !(n = i.n()).done;)n.value.classList.remove(iZ) } catch (r) { i.e(r) } finally { i.f() } } }], [{ key: \"Default\", get: function e() { return re } }, { key: \"DefaultType\", get: function e() { return rt } }, { key: \"NAME\", get: function e() { return \"scrollspy\" } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this, t); if (\"string\" == typeof t) { if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw TypeError('No method named \"'.concat(t, '\"')); e[t]() } }) } }]) }(el); J.on(window, i2, function () { var e, t = o(eu.find('[data-bs-spy=\"scroll\"]')); try { for (t.s(); !(e = t.n()).done;) { var n = e.value; rn.getOrCreateInstance(n) } } catch (i) { t.e(i) } finally { t.f() } }), I(rn); var ri = \".\".concat(\"bs.tab\"), rr = \"hide\".concat(ri), ro = \"hidden\".concat(ri), ra = \"show\".concat(ri), rs = \"shown\".concat(ri), rl = \"click\".concat(ri), rc = \"keydown\".concat(ri), ru = \"load\".concat(ri), rf = \"ArrowRight\", rh = \"ArrowDown\", rd = \"Home\", rp = \"active\", rv = \"fade\", rg = \"show\", rm = \".dropdown-toggle\", r8 = \":not(\".concat(rm, \")\"), ry = \".nav-link\".concat(r8, \", .list-group-item\").concat(r8, ', [role=\"tab\"]').concat(r8), rb = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]', rk = \"\".concat(ry, \", \").concat(rb), rw = \".\".concat(rp, '[data-bs-toggle=\"tab\"], .').concat(rp, '[data-bs-toggle=\"pill\"], .').concat(rp, '[data-bs-toggle=\"list\"]'), r$ = function (e) { function i(e) { var r; return n(this, i), (r = t(this, i, [e]))._parent = r._element.closest('.list-group, .nav, [role=\"tablist\"]'), r._parent ? (r._setInitialAttributes(r._parent, r._getChildren()), J.on(r._element, rc, function (e) { return r._keydown(e) }), r) : d(r) } return c(i, e), r(i, [{ key: \"show\", value: function e() { var t = this._element; if (!this._elemIsActive(t)) { var n = this._getActiveElem(), i = n ? J.trigger(n, rr, { relatedTarget: t }) : null; J.trigger(t, ra, { relatedTarget: n }).defaultPrevented || i && i.defaultPrevented || (this._deactivate(n, t), this._activate(t, n)) } } }, { key: \"_activate\", value: function e(t, n) { var i = this; t && (t.classList.add(rp), this._activate(eu.getElementFromSelector(t)), this._queueCallback(function () { \"tab\" === t.getAttribute(\"role\") ? (t.removeAttribute(\"tabindex\"), t.setAttribute(\"aria-selected\", !0), i._toggleDropDown(t, !0), J.trigger(t, rs, { relatedTarget: n })) : t.classList.add(rg) }, t, t.classList.contains(rv))) } }, { key: \"_deactivate\", value: function e(t, n) { var i = this; t && (t.classList.remove(rp), t.blur(), this._deactivate(eu.getElementFromSelector(t)), this._queueCallback(function () { \"tab\" === t.getAttribute(\"role\") ? (t.setAttribute(\"aria-selected\", !1), t.setAttribute(\"tabindex\", \"-1\"), i._toggleDropDown(t, !1), J.trigger(t, ro, { relatedTarget: n })) : t.classList.remove(rg) }, t, t.classList.contains(rv))) } }, { key: \"_keydown\", value: function e(t) { if ([\"ArrowLeft\", rf, \"ArrowUp\", rh, rd, \"End\"].includes(t.key)) { t.stopPropagation(), t.preventDefault(); var n, r = this._getChildren().filter(function (e) { return !x(e) }); if ([rd, \"End\"].includes(t.key)) n = r[t.key === rd ? 0 : r.length - 1]; else { var o = [rf, rh].includes(t.key); n = F(r, t.target, o, !0) } n && (n.focus({ preventScroll: !0 }), i.getOrCreateInstance(n).show()) } } }, { key: \"_getChildren\", value: function e() { return eu.find(rk, this._parent) } }, { key: \"_getActiveElem\", value: function e() { var t = this; return this._getChildren().find(function (e) { return t._elemIsActive(e) }) || null } }, { key: \"_setInitialAttributes\", value: function e(t, n) { this._setAttributeIfNotExists(t, \"role\", \"tablist\"); var i, r = o(n); try { for (r.s(); !(i = r.n()).done;) { var a = i.value; this._setInitialAttributesOnChild(a) } } catch (s) { r.e(s) } finally { r.f() } } }, { key: \"_setInitialAttributesOnChild\", value: function e(t) { t = this._getInnerElement(t); var n = this._elemIsActive(t), i = this._getOuterElement(t); t.setAttribute(\"aria-selected\", n), i !== t && this._setAttributeIfNotExists(i, \"role\", \"presentation\"), n || t.setAttribute(\"tabindex\", \"-1\"), this._setAttributeIfNotExists(t, \"role\", \"tab\"), this._setInitialAttributesOnTargetPanel(t) } }, { key: \"_setInitialAttributesOnTargetPanel\", value: function e(t) { var n = eu.getElementFromSelector(t); n && (this._setAttributeIfNotExists(n, \"role\", \"tabpanel\"), t.id && this._setAttributeIfNotExists(n, \"aria-labelledby\", \"\".concat(t.id))) } }, { key: \"_toggleDropDown\", value: function e(t, n) { var i = this._getOuterElement(t); if (i.classList.contains(\"dropdown\")) { var r = function e(t, r) { var o = eu.findOne(t, i); o && o.classList.toggle(r, n) }; r(rm, rp), r(\".dropdown-menu\", rg), i.setAttribute(\"aria-expanded\", n) } } }, { key: \"_setAttributeIfNotExists\", value: function e(t, n, i) { t.hasAttribute(n) || t.setAttribute(n, i) } }, { key: \"_elemIsActive\", value: function e(t) { return t.classList.contains(rp) } }, { key: \"_getInnerElement\", value: function e(t) { return t.matches(rk) ? t : eu.findOne(rk, t) } }, { key: \"_getOuterElement\", value: function e(t) { return t.closest(\".nav-item, .list-group-item\") || t } }], [{ key: \"NAME\", get: function e() { return \"tab\" } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this); if (\"string\" == typeof t) { if (void 0 === e[t] || t.startsWith(\"_\") || \"constructor\" === t) throw TypeError('No method named \"'.concat(t, '\"')); e[t]() } }) } }]) }(el); J.on(document, rl, rb, function (e) { [\"A\", \"AREA\"].includes(this.tagName) && e.preventDefault(), x(this) || r$.getOrCreateInstance(this).show() }), J.on(window, ru, function () { var e, t = o(eu.find(rw)); try { for (t.s(); !(e = t.n()).done;) { var n = e.value; r$.getOrCreateInstance(n) } } catch (i) { t.e(i) } finally { t.f() } }), I(r$); var rA = \".\".concat(\"bs.toast\"), rE = \"mouseover\".concat(rA), rC = \"mouseout\".concat(rA), rT = \"focusin\".concat(rA), rx = \"focusout\".concat(rA), rO = \"hide\".concat(rA), r_ = \"hidden\".concat(rA), rL = \"show\".concat(rA), rS = \"shown\".concat(rA), rD = \"hide\", rP = \"show\", rI = \"showing\", rN = { animation: \"boolean\", autohide: \"boolean\", delay: \"number\" }, rM = { animation: !0, autohide: !0, delay: 5e3 }, rF = function (e) { function i(e, r) { var o; return n(this, i), (o = t(this, i, [e, r]))._timeout = null, o._hasMouseInteraction = !1, o._hasKeyboardInteraction = !1, o._setListeners(), o } return c(i, e), r(i, [{ key: \"show\", value: function e() { var t = this; J.trigger(this._element, rL).defaultPrevented || (this._clearTimeout(), this._config.animation && this._element.classList.add(\"fade\"), this._element.classList.remove(rD), L(this._element), this._element.classList.add(rP, rI), this._queueCallback(function () { t._element.classList.remove(rI), J.trigger(t._element, rS), t._maybeScheduleHide() }, this._element, this._config.animation)) } }, { key: \"hide\", value: function e() { var t = this; this.isShown() && !J.trigger(this._element, rO).defaultPrevented && (this._element.classList.add(rI), this._queueCallback(function () { t._element.classList.add(rD), t._element.classList.remove(rI, rP), J.trigger(t._element, r_) }, this._element, this._config.animation)) } }, { key: \"dispose\", value: function e() { this._clearTimeout(), this.isShown() && this._element.classList.remove(rP), s(l(i.prototype), \"dispose\", this).call(this) } }, { key: \"isShown\", value: function e() { return this._element.classList.contains(rP) } }, { key: \"_maybeScheduleHide\", value: function e() { var t = this; this._config.autohide && (this._hasMouseInteraction || this._hasKeyboardInteraction || (this._timeout = setTimeout(function () { t.hide() }, this._config.delay))) } }, { key: \"_onInteraction\", value: function e(t, n) { switch (t.type) { case \"mouseover\": case \"mouseout\": this._hasMouseInteraction = n; break; case \"focusin\": case \"focusout\": this._hasKeyboardInteraction = n }if (n) this._clearTimeout(); else { var i = t.relatedTarget; this._element === i || this._element.contains(i) || this._maybeScheduleHide() } } }, { key: \"_setListeners\", value: function e() { var t = this; J.on(this._element, rE, function (e) { return t._onInteraction(e, !0) }), J.on(this._element, rC, function (e) { return t._onInteraction(e, !1) }), J.on(this._element, rT, function (e) { return t._onInteraction(e, !0) }), J.on(this._element, rx, function (e) { return t._onInteraction(e, !1) }) } }, { key: \"_clearTimeout\", value: function e() { clearTimeout(this._timeout), this._timeout = null } }], [{ key: \"Default\", get: function e() { return rM } }, { key: \"DefaultType\", get: function e() { return rN } }, { key: \"NAME\", get: function e() { return \"toast\" } }, { key: \"jQueryInterface\", value: function e(t) { return this.each(function () { var e = i.getOrCreateInstance(this, t); if (\"string\" == typeof t) { if (void 0 === e[t]) throw TypeError('No method named \"'.concat(t, '\"')); e[t](this) } }) } }]) }(el); return ef(rF), I(rF), { Alert: ev, Button: ey, Carousel: eY, Collapse: tt, Dropdown: n0, Modal: iv, Offcanvas: iD, Popover: i4, ScrollSpy: rn, Tab: r$, Toast: rF, Tooltip: i1 } });"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:04.498Z",
        "time": 47.691999992821366,
        "timings": {
          "blocked": 39.12000003480911,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.3819999939240515,
          "receive": 8.189999964088202,
          "_blocked_queueing": 37.95100003480911,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "321311",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80624
              },
              {
                "functionName": "ajax",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 76166
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 8190
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7757
              },
              {
                "functionName": "",
                "scriptId": "60",
                "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                "lineNumber": 141,
                "columnNumber": 23
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/translation/vie.json?v=1744560244738",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "application/json, text/javascript, */*; q=0.01"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,vi;q=0.8"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Host",
              "value": "v1.awingconnect.vn"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "1744560244738"
            }
          ],
          "cookies": [],
          "headersSize": 678,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "cache-control",
              "value": "public,max-age=604800"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 16:04:03 GMT"
            },
            {
              "name": "etag",
              "value": "\"1db0a78b53433af\""
            },
            {
              "name": "last-modified",
              "value": "Thu, 19 Sep 2024 09:45:49 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 14127,
            "mimeType": "application/json",
            "compression": 8678,
            "text": "{\n  \"Common\": {\n    \"HotlineText\": \"Hotline:\",\n    \"HotlineNumber\": \"097.305.0517\",\n    \"Connecting\": \"Đang kết nối Internet...\"\n  },\n  \"Failed\": {\n    \"heading\": \"Rất tiếc, yêu cầu kết nối của bạn chưa được thực hiện.\",\n    \"p1\": \"Vui lòng liên hệ:\",\n    \"p2\": \"1. {contact_text} {contact_number}\",\n    \"p3\": \"2. Nhân viên tại cửa hàng để được trợ giúp\",\n    \"p4\": \"Xin lỗi vì sự bất tiện này.\"\n  },\n  \"FailedAuthen\": {\n    \"heading\": \"Rất tiếc, yêu cầu kết nối của bạn thực hiện không thành công.\",\n    \"p1\": \"Vui lòng <b>KẾT NỐI LẠI</b> hoặc liên hệ:<br/>{contact_text} <b>{contact_number}</b> hoặc nhân viên tại cửa hàng để được trợ giúp.\",\n    \"p2\": \"Xin lỗi vì sự bất tiện này.\",\n    \"a\": \"KẾT NỐI LẠI\"\n  },\n  \"FailedCookie\": {\n    \"heading\": \"Lỗi! Chưa bật cookie trên trình duyệt web.\",\n    \"p1\": \"1. Để khắc phục, vui lòng vào phần <b>Cài đặt</b> của trình duyệt web bạn đang sử dụng (Safari, Chrome…) để <b>bật cookie</b>, sau đó kết nối lại Internet\",\n    \"p2\": \"2. Hoặc liên hệ {contact_text} {contact_number} để được hỗ trợ.\",\n    \"p3\": \"3. Tham khảo hướng dẫn đăng nhập Free Wi-Fi và cách khắc phục các lỗi thường gặp tại <a href=\\\"http://awifi.vn\\\">awifi.vn</a>\"\n  },\n  \"Connected\": {\n    \"heading\": \"Bạn đã kết nối Internet thành công!\",\n    \"p1\": \"Trong một số trường hợp hiếm gặp, landing page có thể không hiển thị do thiết bị của người dùng đang không hỗ trợ cookie phù hợp.\"\n  },\n  \"Connecting\": {\n    \"SuccessHeading\": \"Bạn đã kết nối Wi-Fi thành công!\",\n    \"SuccessP1\": \"Vui lòng thoát trang và tiếp tục sử dụng Internet\",\n    \"FailHeading\": \"Rất tiếc, yêu cầu kết nối của bạn chưa được thực hiện\",\n    \"FailP1\": \"1. Bấm nút dưới để được chuyển hướng đến trang kết nối Internet\",\n    \"FailBtn\": \"Kết nối Internet ngay\",\n    \"FailP2\": \"2. Hoặc chọn mạng Wi-Fi bạn muốn kết nối và thực hiện lại các thao tác.\",\n    \"FailP3\": \"3. Nếu vẫn chưa kết nối được Internet, vui lòng liên hệ hotline: {contact_number} để được hỗ trợ.\",\n    \"FailP4\": \"Xin lỗi vì sự bất tiện này.\"\n  },\n  \"UnsupportedBrowser\": {\n    \"heading\": \"Trình duyệt web của bạn không được hỗ trợ.\",\n    \"p1\": \"1. Để khắc phục, vui lòng sử dụng trình duyệt web khác (Chrome, Firefox, Microsoft Edge…), sau đó truy cập <a href=\\\"http://awifi.vn\\\">awifi.vn</a> để kết nối lại Internet.\",\n    \"p2\": \"2. Hoặc liên hệ {contact_text} {contact_number} để được hỗ trợ.\",\n    \"p3\": \"3. Tham khảo hướng dẫn đăng nhập Free Wi-Fi và cách khắc phục các lỗi thường gặp tại <a href=\\\"http://awifi.vn\\\">awifi.vn</a>\"\n  },\n  \"Deprecated\": {\n    \"heading\": \"Trang xem trước sử dụng template đã lỗi thời.\",\n    \"p1\": \"Vui lòng cập nhật template hoặc liên hệ người quản trị để thay đổi sang template mới.\"\n  },\n  \"AndroidWaiting\": {\n    \"heading\": \"Bạn đã kết nối Internet thành công!\",\n    \"helper\": \"Vui lòng đợi thêm chút nhé!\"\n  },\n  \"Successed\": {\n    \"h4\": \"Bạn đã kết nối Internet thành công!\"\n  },\n  \"Agreement\": {\n    \"heder-h4\": \"<b>ĐIỀU KHOẢN SỬ DỤNG DỊCH VỤ</b>\",\n\n    \"content-h4-1\": \"<b>Chấp thuận các Điều khoản và Điều kiện sử dụng dịch vụ</b>\",\n    \"content-p1\": \"Điều khoản và Điều kiện sử dụng Wi-Fi này bao gồm các qui định về quyền lợi và trách nhiệm của Bạn và của chúng tôi liên quan đến việc sử dụng mạng dịch vụ truy nhập Wi-Fi (AWING Wi-Fi).\",\n    \"content-p2\": \"Bằng việc nhấn nút Đồng ý tại trang đăng nhập hệ thống để bắt đầu truy nhập vào mạng, bạn đã cam kết rằng:\",\n    \"content-p3\": \"1. Bạn đã Đọc, Hiểu và Đồng ý với tất cả các Điều khoản và Điều kiện nêu ra trong nôi dung này.<br>2. Thời gian hiệu lực của sự thỏa thuận được bắt đầu từ khi Bạn nhấn nút đến khi Bạn không sử dụng dịch vụ nữa.\",\n    \"content-p4\": \"Trách nhiệm của Bạn:\",\n\n    \"content-h4-2\": \"<b>Chính sách sử dụng</b>\",\n    \"content-p5\": \"1. Tuân thủ mọi qui định pháp luật của Nhà nước Cộng hòa Xã hội chủ nghĩa Việt Nam.<br>2. Tự trang bị các thiết bị cá nhân cần thiết để truy nhập được vào hệ thống mạng.<br>3. Thiết bị kết nối Wi- Fi phải đặt chế độ tự động nhận địa chỉ IP và DNS thông qua DHCP.<br>4. Chúng tôi không đảm bảo tính an toàn cho các dữ liệu cá nhân mà Bạn gửi và nhận thông qua hệ thống.\",\n    \"content-p6\": \" 1. Bạn đồng ý không sử dụng dịch vụ Wi-Fi này để:<br><ol type = \\\"a\\\"><li> Mạo danh tổ chức hoặc người nào để tuyên truyền không đúng sự thật hoặc xuyên tạc, chống đối Nhà nước Xã hội chủ nghĩa Việt Nam hoặc một tổ chức hay cá nhân khác.</li><li> Truyền tải bất kỳ tài liệu (đăng lên mạng, gởi thư điện tử hoặc bất kỳ hình thức nào khác) nhằm chống đối, gây hại đến an ninh an toàn, vi phạm pháp luật của Nhà nước Cộng hòa Xã hội chủ nghĩa Việt Nam.</li><li> Tuyên truyền hoặc truyền tải bất kỳ tài liệu nào(đăng lên mạng, gởi thư điện tử hoặc bất kỳ hình thức nào khác) mà Bạn không có quyền cung cấp theo qui định của pháp luật hoặc không được ủy nhiệm.</li><li> Thay đổi, sao chép, giả mạo hoặc sửa đổi định dạng tiêu đề của dịch vụ mạng nhằm che dấu, giả mạo nguồn gốc của bất kỳ tài liệu nào được truyền tải thông qua hệ thống.</li><li> Đe dọa, lạm dụng, quấy nhiễu, phỉ báng, khiêu dâm, xâm phạm đời sống riêng tư của người khác.</li><li> Truyền(đăng lên mạng, gởi thư điện tử hoặc bất kỳ hình thức nào khác) các quảng cáo, “thư rác”, “chuyển tiếp thư” không mong muốn hoặc không được phép.</li><li> Truyền tải bất cứ tài liệu nào (đăng lên mạng, gởi thư điện tử hoặc bất kỳ hình thức nào khác) có chứa virus phần mềm, các tập tin hoặc chương trình được thiết kế để gây cản trở, phá hoại hoặc hạn chế các chức năng của bất kỳ phần mềm hoặc phần cứng trên máy tính hoặc thiết bị viễn thông.</li><li> Cố gắng thu thập hoặc lưu trữ các dữ liệu cá nhân của một bên thứ ba mà không có sự đồng ý.</li><li> Sử dụng hệ thống Wi - Fi để truyền dữ liệu có khối lượng lớn, lưu trữ máy chủ.</li></ol>\",\n    \"content-p7\": \" 2. Bạn hiểu và đồng ý rằng chúng tôi có quyền tiết lộ thông tin cá nhân, lịch sử truy cập mạng của Bạn theo yêu cầu của các cơ quan thẩm quyền của Nhà nước Cộng hòa Xã hội chủ nghĩa Việt Nam khi Bạn có hành vi vi phạm pháp luật.<br>3. Bạn không được sử dụng hệ thống kết nối không dây này để thực hiện các hành vi vi phạm pháp luật.Nếu có, người sử dụng phải chịu hoàn toàn trách nhiệm.<br>4. Chúng tôi chỉ hỗ trợ kết nối và không cam kết, chịu trách nhiệm về chất lượng.<br>5. Bạn sử dụng dịch vụ hoàn toàn miễn phí, không giới hạn thời gian truy cập.Mỗi lần truy cập, Bạn được sử dụng dịch vụ liên tục trong một khoảng thời gian nhất định(\\\"Phiên sử dụng\\\") tùy thuộc vào nhà cung cấp Wi-Fi.<br>- Bạn sẽ phải đăng nhập lại khi: (1) Hết phiên sử dụng, hoặc (2) Không sử dụng mạng Wi-Fi trong một thời gian nhất định.<br>- Để tiếp tục sử dụng Internet, Bạn hãy mở trình duyệt và truy cập vào một website hợp lệ bất kỳ(định dạng http(không https) như http://awifi.vn). <br>6. Bạn sử dụng hệ thống kết nối không dây này, với các điều kiện ở trên là hoàn tự nguyện.\",\n\n    \"content-h4-3\": \"<b>Chấm dứt dịch vụ</b>\",\n    \"content-p8\": \"Bạn đồng ý rằng chúng tôi giữ quyền chấm dứt cung cấp dịch vụ và hủy bỏ hoàn toàn dữ liệu của Bạn trên hệ thống Wi-Fi bất cứ lúc nào mà không cần thông báo lý do bao gồm, nhưng không giới hạn, khi Bạn vi phạm các Điều khoản và Điều kiện đã nêu. Bạn cũng đồng ý rằng, trong trường hợp chấm dứt vì bất kỳ lý do nào, chúng tôi không có bất kỳ trách nhiệm nào với Bạn.\",\n\n    \"content-h4-4\": \"<b>Quyền sửa đổi</b>\",\n    \"content-p9\": \"Chúng tôi có quyền sửa đổi các Điều khoản và Điều kiện bất cứ lúc nào. Các Điều khoản và Điều kiện mới sẽ được đăng trên trang chủ của hệ thống để Bạn dễ nhận biết. Bằng việc tiếp tục sử dụng dịch vụ sau khi truy nhập, Bạn chấp thuận và đồng ý tuân theo các Điều khoản và Điều kiện mới.\",\n\n    \"content-h4-5\": \"<b>Giải quyết sự cố</b>\",\n    \"content-p10\": \"Nếu Bạn gặp sự cố khi truy nhập hoặc sử dụng hệ thống Wi-Fi, xin vui lòng gọi {contact_text} {contact_number}.\",\n\n    \"content-h4-6\": \"<b>Không đảm bảo</b>\",\n    \"content-p11\": \"Chúng tôi không đảm bảo rằng dịch vụ sẽ không bị gián đoạn, không bị lỗi, không có virus hoặc không có các thành phần gây hại khác. Chúng tôi không đảm bảo về các sự cố trong khi cung cấp dịch vụ bao gồm, nhưng không giới hạn, các vấn đề riêng tư, an toàn, bảo mật có khả năng xảy ra khi sử dụng dịch vụ không dây. \"\n  },\n  \"InsecureContent\": {\n    \"box-awing-help-img\": \"<img class=\\\"awing-help-img\\\" src=\\\"./not-allow-insecure/AWING_Help_Vie.png\\\"/>\",\n    \"view1-h2\": \"ÚI! WI-FI CHƯA ĐƯỢC KẾT NỐI\",\n    \"view1-p1\": \"Đừng lo, chỉ cần 1 phút!\",\n    \"view1-p2\": \"Vui lòng xem hướng dẫn bằng cách click vào nút dưới.\",\n    \"view1-btn\": \"XEM HƯỚNG DẪN (CLICK)\",\n\n    \"view2-h2\": \"HƯỚNG DẪN ĐIỀU CHỈNH CÀI ĐẶT TRÊN TRÌNH DUYỆT WEB (KHÔNG QUÁ 30 GIÂY)\",\n    \"view2-i2\": \"Việc điều chỉnh cài đặt này sẽ cho phép “Nội dung không an toàn” được hoạt động (nguyên gốc: “Insecure Content” nên được hiểu là “nội dung không được bảo vệ”). Chú ý: cấu hình tham số này sẽ không ảnh hưởng đến các website khác:\",\n    \"view2-step-1\": \"Bước 1:\",\n    \"view2-step-2\": \"Bước 2:\",\n    \"view2-span1\": \"Sao chép đường dẫn sau đây:\",\n    \"view2-p2\": \"Mở 1 Tab mới\",\n    \"view2-p3\": \"Copy & Paste link dưới vào thanh địa chỉ để đến mục Cài đặt\",\n    \"view2-p4\": \"Kéo xuống để tìm mục <b>“Nội dung không an toàn”</b>\",\n    \"view2-p5\": \"Chọn <b>\\\"Cho phép\\\"</b>\",\n    \"view2-btn\": \"ẤN VÀO ĐÂY ĐỂ TIẾP TỤC KẾT NỐI WI-FI\",\n    \"view2-note\": \"(Nếu vẫn cần trợ giúp, xin vui lòng gọi {contact_text} {contact_number})\",\n    \"view2-image\": \"<img width=\\\"400\\\" height=\\\"225\\\" src=\\\"./not-allow-insecure/thumb-video_VIE.png\\\" awing-modal=\\\"show\\\" />\",\n    \"view2-copy\": \"Sao chép\",\n    \"view2-copied\": \"Đã sao chép\",\n    \"view2-qr\": \"Nếu bạn vẫn cần hỗ trợ thì chúng tôi ở đây:\",\n    \"view2-qr-detail1\": \"Quét để xem hướng dẫn trên điện thoại nè\",\n    \"view2-qr-detail2\": \"Gọi để chúng tôi giúp bạn\",\n    \"view2-warning\": \"Bạn chưa thực hiện đúng/đủ 2 bước trên. Xin vui lòng thực hiện lại.\",\n\n    \"inforPopup\": \"Việc cho phép “Nội dung không an toàn” chỉ phục vụ cho mục đích kết nối Wi-Fi thành công, các website khác ngoài <a class=\\\"link-underline-primary auto-href\\\" id=\\\"a-tooltip\\\" href=\\\"http://acm.awingconnect.vn\\\"></a> sẽ không bị ảnh hưởng bởi sự thay đổi này\",\n    \"errorText\": \"Bạn chưa thực hiện đủ 2 bước rồi &#128546;, hãy dành chỉ 1 phút để làm thử nhé\",\n    \"errorText2\": \" Bạn chưa thực hiện đúng theo hướng dẫn rồi &#128546;, vui lòng thử lại hoặc ấn vào <a class=\\\"underline\\\" onclick=\\\"showHelp()\\\">ĐÂY</a> để được hỗ trợ\",\n    \"success-btn\": \"HOÀN THÀNH\",\n    \"help-text1\": \"Sau đó quay lại Tab này và ấn nút dưới nhé!\",\n    \"help-text2\": \"Bạn chưa làm được? Ấn vào đây để xem thêm video hướng dẫn và được hỗ trợ nha!\"\n  },\n  \"ContentCustomer\": {\n    \"LET-US-IMPROVE\": \"HÃY ĐỂ CHÚNG TÔI\",\n    \"YOUR-EXPERIENCE\": \"PHỤC VỤ BẠN TỐT HƠN!\",\n    \"FIRST-CONTENT\": \"Dành 5s cung cấp thông tin để chúng tôi có thể hiển thị nội dung phù hợp nhất với bạn.\",\n    \"NAME\": \"Tên: \",\n    \"BIRTHDAY\": \"Tuổi (6-90): \",\n    \"AGE-PLACEHOLDER\": \"Ví dụ: 25 (tuổi)\",\n    \"EMAIL\": \"Email: \",\n    \"PHONE\": \"Sdt: \",\n    \"GENDER\": \"Giới tính: \",\n    \"MALE\": \"Nam\",\n    \"FEMALE\": \"Nữ\",\n    \"SUBMIT\": \"XÁC NHẬN\",\n    \"REMIND-ME-LATER\": \"NHẮC TÔI SAU\",\n    \"LAST-CONTENT\": \"(*)Nhấn một trong các nút bên dưới để TIẾP TỤC KẾT NỐI INTERNET. Cửa sổ pop-up này sẽ không hiển thị lại sau khi bạn điền thông tin.\",\n    \"NOTIFICATION\": \"Dữ liệu còn thiếu hoặc không hợp lệ! Xin vui lòng nhập lại!\",\n    \"STILL-SEE-POPUP\": \"TÔI ĐÃ ĐIỀN NHƯNG CỬA SỔ NÀY VẪN<br>HIỂN THỊ?\"\n  }\n}"
          },
          "redirectURL": "",
          "headersSize": 311,
          "bodySize": 5449,
          "_transferSize": 5760,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:04.740Z",
        "time": 577.1720000193454,
        "timings": {
          "blocked": 10.088000035014003,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.23299999999999987,
          "wait": 95.21400000378489,
          "receive": 471.63699998054653,
          "_blocked_queueing": 8.421000035014004,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "321346",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80624
              },
              {
                "functionName": "ajax",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 76166
              },
              {
                "functionName": "verifyContext",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 14306
              },
              {
                "functionName": "entry",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 418
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7398
              },
              {
                "functionName": "startStateMachine",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 3376
              },
              {
                "functionName": "",
                "scriptId": "60",
                "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                "lineNumber": 143,
                "columnNumber": 32
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "POST",
          "url": "http://v1.awingconnect.vn/Home/VerifyUrl",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,vi;q=0.8"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "0"
            },
            {
              "name": "Host",
              "value": "v1.awingconnect.vn"
            },
            {
              "name": "Origin",
              "value": "http://v1.awingconnect.vn"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 668,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 16:04:04 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 3599,
            "mimeType": "application/json",
            "compression": 1760,
            "text": "{\"token\":\"6a7671887f441b5cac67efa64ee3cbde5fe95cf8\",\"captiveContext\":{\"campaignData\":{\"sessionId\":\"f67f01ba-50db-4ec2-b59a-fa8beff1b018\",\"macAddress\":\"26-17-2E-AE-22-79\",\"apMac\":\"CC-2D-E0-0E-00-0A\",\"placeId\":\"5408580173018081493\",\"domainId\":\"5476089696408447131\",\"url\":\"http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\\\170&chap_challenge=\\\\245\\\\345\\\\331\\\\134\\\\150\\\\331\\\\146\\\\353\\\\013\\\\120\\\\162\\\\166\\\\110\\\\312\\\\102\\\\251\",\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\",\"campaignId\":\"0\",\"campaignGroupId\":0,\"campaignAdId\":0,\"campaignType\":0,\"isNetworkCampaign\":false,\"loginId\":\"0\",\"loginHtml\":null,\"welcomeId\":\"0\",\"welcomeHtml\":null},\"customerActions\":[0],\"domain\":{\"domainId\":\"5476089696408447131\",\"domainTariffId\":1,\"directoryPath\":\".0.90.5476089696408447131.\",\"name\":\"Wi - Mesh\",\"joinNetwork\":true,\"description\":\"\",\"license\":\"AvX0ZtUdP4wukxT5af24a9BKVEZih4ieKcQUcHFTwuadEz9v97xzIgfKpjckguFxzdIhS2IfysNUsEgfXzrMQNQZBThUtOQEI62eBW6BOrIjP0LkhTpxZa/Q/7YPzRVte5Z1YN0mQwgAodQN6/hFfu3/fDkTBBN25E+gk9GeyqtQChyQHp9/jN+O9ehEV4m8nHBQ1wf1jf0QwB66pCesz/tD3rlTMmDvxkGe9+OjB160G2Wy8eCZFIGGC4Cr+SJ5Tnb0CLatO1DHvvI9NFjgAEd/EiGJqEKwamrQOgIGjRIb3g3IpcW/cq4ZErUQSsE1JNvhUhC7FHdCzBAV9QytCw==\",\"requiredCustomerData\":null,\"url\":\"\",\"customizeCustomerFormPath\":\"\",\"contactPhoneNumber\":\"\"},\"customer\":null,\"placeCustomerInfoCollections\":[{\"id\":10841,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Gender\",\"timeReminder\":0},{\"id\":10842,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Birthday\",\"timeReminder\":0}],\"pageViewEvents\":[],\"customerRequiredFields\":[],\"contentAuthenForm\":\"<form name=\\\"mikrotik\\\" id=\\\"frmLogin\\\" action=\\\"http://186.186.0.1/login\\\" method=\\\"post\\\" style=\\\"display: none;\\\">\\n    <input type=\\\"hidden\\\" name=\\\"username\\\" value=\\\"awing15-15\\\"/>\\n    <input type=\\\"hidden\\\" name=\\\"password\\\" value=\\\"df4ac9e1a77c84894169c99597eba211\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"dst\\\" value=\\\"http://v1.awingconnect.vn/Success\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"popup\\\" value=\\\"false\\\" />\\n</form>\\n<script>\\n\\n    var authenticationProfileOptionals = [];\\n    function bindOptionalProfileByIndex(idx) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            var mikrotikParamModel = JSON.parse(authenticationProfileOptionals[idx].Params);\\n            $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n            $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n        }\\n    }\\n    function bindOptionalProfileByName(name) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            authenticationProfileOptionals.forEach(function (el) {\\n                if (el.Name.toLowerCase() == name.toLowerCase()) {\\n                    var mikrotikParamModel = JSON.parse(profileOptional.Params);\\n                    $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n                    $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n                }\\n            });\\n        }\\n    }\\n    awingStateMachineContext.setAuthenType(awingConstants.AUTHEN_TYPE.FORM);\\n</script>\\n\",\"createdDate\":\"2025-04-13T23:04:05.1414356+07:00\"}}"
          },
          "redirectURL": "",
          "headersSize": 227,
          "bodySize": 1839,
          "_transferSize": 2066,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:05.339Z",
        "time": 91.80199997353554,
        "timings": {
          "blocked": 2.2859999617785216,
          "dns": 0.04300000000000004,
          "ssl": -1,
          "connect": 8.889,
          "send": 0.2840000000000007,
          "wait": 78.48800000951067,
          "receive": 1.81200000224635,
          "_blocked_queueing": 1.5849999617785215,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "321363",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80624
              },
              {
                "functionName": "ajax",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 76166
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 82991
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 8847
              },
              {
                "functionName": "setDomain",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 13335
              },
              {
                "functionName": "success",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 14394
              },
              {
                "functionName": "c",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 25303
              },
              {
                "functionName": "fireWith",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 26052
              },
              {
                "functionName": "l",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 77781
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80264
              }
            ],
            "parent": {
              "description": "XMLHttpRequest.send",
              "callFrames": [
                {
                  "functionName": "send",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 80624
                },
                {
                  "functionName": "ajax",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 76166
                },
                {
                  "functionName": "verifyContext",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 14306
                },
                {
                  "functionName": "entry",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 418
                },
                {
                  "functionName": "",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 7398
                },
                {
                  "functionName": "startStateMachine",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 3376
                },
                {
                  "functionName": "",
                  "scriptId": "60",
                  "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                  "lineNumber": 143,
                  "columnNumber": 32
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/layout/5197905656409960384/5476089696408447131/Header.html?timestamp=1744560245432",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html, */*; q=0.01"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,vi;q=0.8"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Host",
              "value": "v1.awingconnect.vn"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            }
          ],
          "queryString": [
            {
              "name": "timestamp",
              "value": "1744560245432"
            }
          ],
          "cookies": [],
          "headersSize": 729,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "446"
            },
            {
              "name": "content-type",
              "value": "text/html"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 16:04:05 GMT"
            },
            {
              "name": "etag",
              "value": "\"66988256-1be\""
            },
            {
              "name": "last-modified",
              "value": "Thu, 18 Jul 2024 02:47:50 GMT"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 446,
            "mimeType": "text/html",
            "compression": 0,
            "text": "<style>\n\t.banner-top {\n\t\tmargin-left: 10px;\n\t\tmax-width: 100px;\n\t}\n</style>\n<div class=\"d-flex h-100 justify-content-between p-1 position-relative\">\n\t<div class=\"my-auto\">\n\t\t<img class=\"banner-top\" src=\"/static/Files/layout/5197905656409960384/5476089696408447131/Logo.png\"\n\t\t\talt=\"customer-logo\">\n\t\t</img>\n\t</div>\n\t<div class=\"my-auto h-100\">\n\t\t<img class=\"w-auto h-100\" src=\"/static/images/awinglg.png\" alt=\"Awing-logo\">\n\t\t</img>\n\t</div>\n</div>"
          },
          "redirectURL": "",
          "headersSize": 215,
          "bodySize": 446,
          "_transferSize": 661,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:05.432Z",
        "time": 88.8740000055097,
        "timings": {
          "blocked": 4.10700001417473,
          "dns": 0.008000000000000007,
          "ssl": -1,
          "connect": 3.166,
          "send": 0.1459999999999999,
          "wait": 80.19199998120219,
          "receive": 1.2550000101327896,
          "_blocked_queueing": 1.0950000141747296,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "321355",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80624
              },
              {
                "functionName": "ajax",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 76166
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 82991
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 8944
              },
              {
                "functionName": "setDomain",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 13335
              },
              {
                "functionName": "success",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 14394
              },
              {
                "functionName": "c",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 25303
              },
              {
                "functionName": "fireWith",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 26052
              },
              {
                "functionName": "l",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 77781
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80264
              }
            ],
            "parent": {
              "description": "XMLHttpRequest.send",
              "callFrames": [
                {
                  "functionName": "send",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 80624
                },
                {
                  "functionName": "ajax",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 76166
                },
                {
                  "functionName": "verifyContext",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 14306
                },
                {
                  "functionName": "entry",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 418
                },
                {
                  "functionName": "",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 7398
                },
                {
                  "functionName": "startStateMachine",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 3376
                },
                {
                  "functionName": "",
                  "scriptId": "60",
                  "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                  "lineNumber": 143,
                  "columnNumber": 32
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/layout/5197905656409960384/5476089696408447131/Footer.html?timestamp=1744560245432",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html, */*; q=0.01"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,vi;q=0.8"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Host",
              "value": "v1.awingconnect.vn"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            }
          ],
          "queryString": [
            {
              "name": "timestamp",
              "value": "1744560245432"
            }
          ],
          "cookies": [],
          "headersSize": 729,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "269"
            },
            {
              "name": "content-type",
              "value": "text/html"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 16:04:05 GMT"
            },
            {
              "name": "etag",
              "value": "\"6682829c-10d\""
            },
            {
              "name": "last-modified",
              "value": "Mon, 01 Jul 2024 10:19:08 GMT"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 269,
            "mimeType": "text/html",
            "compression": 0,
            "text": "\n    <div style=\"padding: 0 2%; line-height: revert;\" class=\"d-flex justify-content-between\">\n        <div>\n       <b>QC:</b> 0901.05.05.17, contact@awing.vn\n    </div>\n    <div>\n       <b style=\"float:right;text-align:right;\">Powered by AWING</b>\n    </div>\n    </div>"
          },
          "redirectURL": "",
          "headersSize": 215,
          "bodySize": 269,
          "_transferSize": 484,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:05.432Z",
        "time": 94.60600002818555,
        "timings": {
          "blocked": 3.0870000467151404,
          "dns": 0.04200000000000004,
          "ssl": -1,
          "connect": 3.895,
          "send": 0.25900000000000034,
          "wait": 83.79400000186264,
          "receive": 3.528999979607761,
          "_blocked_queueing": 1.5350000467151403,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "321359",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80624
              },
              {
                "functionName": "ajax",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 76166
              },
              {
                "functionName": "getCustomer",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 15677
              },
              {
                "functionName": "entry",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 1362
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7398
              },
              {
                "functionName": "r",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 13979
              },
              {
                "functionName": "success",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 14488
              },
              {
                "functionName": "c",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 25303
              },
              {
                "functionName": "fireWith",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 26052
              },
              {
                "functionName": "l",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 77781
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80264
              }
            ],
            "parent": {
              "description": "XMLHttpRequest.send",
              "callFrames": [
                {
                  "functionName": "send",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 80624
                },
                {
                  "functionName": "ajax",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 76166
                },
                {
                  "functionName": "verifyContext",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 14306
                },
                {
                  "functionName": "entry",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 418
                },
                {
                  "functionName": "",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 7398
                },
                {
                  "functionName": "startStateMachine",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 3376
                },
                {
                  "functionName": "",
                  "scriptId": "60",
                  "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                  "lineNumber": 143,
                  "columnNumber": 32
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "POST",
          "url": "http://v1.awingconnect.vn/Content/GetCustomer",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,vi;q=0.8"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "3599"
            },
            {
              "name": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "name": "Host",
              "value": "v1.awingconnect.vn"
            },
            {
              "name": "Origin",
              "value": "http://v1.awingconnect.vn"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 739,
          "bodySize": 3599,
          "postData": {
            "mimeType": "application/json; charset=UTF-8",
            "text": "{\"token\":\"6a7671887f441b5cac67efa64ee3cbde5fe95cf8\",\"captiveContext\":{\"campaignData\":{\"sessionId\":\"f67f01ba-50db-4ec2-b59a-fa8beff1b018\",\"macAddress\":\"26-17-2E-AE-22-79\",\"apMac\":\"CC-2D-E0-0E-00-0A\",\"placeId\":\"5408580173018081493\",\"domainId\":\"5476089696408447131\",\"url\":\"http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\\\170&chap_challenge=\\\\245\\\\345\\\\331\\\\134\\\\150\\\\331\\\\146\\\\353\\\\013\\\\120\\\\162\\\\166\\\\110\\\\312\\\\102\\\\251\",\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\",\"campaignId\":\"0\",\"campaignGroupId\":0,\"campaignAdId\":0,\"campaignType\":0,\"isNetworkCampaign\":false,\"loginId\":\"0\",\"loginHtml\":null,\"welcomeId\":\"0\",\"welcomeHtml\":null},\"customerActions\":[0],\"domain\":{\"domainId\":\"5476089696408447131\",\"domainTariffId\":1,\"directoryPath\":\".0.90.5476089696408447131.\",\"name\":\"Wi - Mesh\",\"joinNetwork\":true,\"description\":\"\",\"license\":\"AvX0ZtUdP4wukxT5af24a9BKVEZih4ieKcQUcHFTwuadEz9v97xzIgfKpjckguFxzdIhS2IfysNUsEgfXzrMQNQZBThUtOQEI62eBW6BOrIjP0LkhTpxZa/Q/7YPzRVte5Z1YN0mQwgAodQN6/hFfu3/fDkTBBN25E+gk9GeyqtQChyQHp9/jN+O9ehEV4m8nHBQ1wf1jf0QwB66pCesz/tD3rlTMmDvxkGe9+OjB160G2Wy8eCZFIGGC4Cr+SJ5Tnb0CLatO1DHvvI9NFjgAEd/EiGJqEKwamrQOgIGjRIb3g3IpcW/cq4ZErUQSsE1JNvhUhC7FHdCzBAV9QytCw==\",\"requiredCustomerData\":null,\"url\":\"\",\"customizeCustomerFormPath\":\"\",\"contactPhoneNumber\":\"\"},\"customer\":null,\"placeCustomerInfoCollections\":[{\"id\":10841,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Gender\",\"timeReminder\":0},{\"id\":10842,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Birthday\",\"timeReminder\":0}],\"pageViewEvents\":[],\"customerRequiredFields\":[],\"contentAuthenForm\":\"<form name=\\\"mikrotik\\\" id=\\\"frmLogin\\\" action=\\\"http://186.186.0.1/login\\\" method=\\\"post\\\" style=\\\"display: none;\\\">\\n    <input type=\\\"hidden\\\" name=\\\"username\\\" value=\\\"awing15-15\\\"/>\\n    <input type=\\\"hidden\\\" name=\\\"password\\\" value=\\\"df4ac9e1a77c84894169c99597eba211\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"dst\\\" value=\\\"http://v1.awingconnect.vn/Success\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"popup\\\" value=\\\"false\\\" />\\n</form>\\n<script>\\n\\n    var authenticationProfileOptionals = [];\\n    function bindOptionalProfileByIndex(idx) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            var mikrotikParamModel = JSON.parse(authenticationProfileOptionals[idx].Params);\\n            $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n            $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n        }\\n    }\\n    function bindOptionalProfileByName(name) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            authenticationProfileOptionals.forEach(function (el) {\\n                if (el.Name.toLowerCase() == name.toLowerCase()) {\\n                    var mikrotikParamModel = JSON.parse(profileOptional.Params);\\n                    $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n                    $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n                }\\n            });\\n        }\\n    }\\n    awingStateMachineContext.setAuthenType(awingConstants.AUTHEN_TYPE.FORM);\\n</script>\\n\",\"createdDate\":\"2025-04-13T23:04:05.1414356+07:00\"}}"
          }
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 16:04:04 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 3984,
            "mimeType": "application/json",
            "compression": 1986,
            "text": "{\"token\":\"cf3bfcbd9258033ede37079e6ffcd8ab89f69d34\",\"captiveContext\":{\"campaignData\":{\"sessionId\":\"f67f01ba-50db-4ec2-b59a-fa8beff1b018\",\"macAddress\":\"26-17-2E-AE-22-79\",\"apMac\":\"CC-2D-E0-0E-00-0A\",\"placeId\":\"5408580173018081493\",\"domainId\":\"5476089696408447131\",\"url\":\"http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\\\170&chap_challenge=\\\\245\\\\345\\\\331\\\\134\\\\150\\\\331\\\\146\\\\353\\\\013\\\\120\\\\162\\\\166\\\\110\\\\312\\\\102\\\\251\",\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\",\"campaignId\":\"0\",\"campaignGroupId\":0,\"campaignAdId\":0,\"campaignType\":0,\"isNetworkCampaign\":false,\"loginId\":\"0\",\"loginHtml\":null,\"welcomeId\":\"0\",\"welcomeHtml\":null},\"customerActions\":[0,1],\"domain\":{\"domainId\":\"5476089696408447131\",\"domainTariffId\":1,\"directoryPath\":\".0.90.5476089696408447131.\",\"name\":\"Wi - Mesh\",\"joinNetwork\":true,\"description\":\"\",\"license\":\"AvX0ZtUdP4wukxT5af24a9BKVEZih4ieKcQUcHFTwuadEz9v97xzIgfKpjckguFxzdIhS2IfysNUsEgfXzrMQNQZBThUtOQEI62eBW6BOrIjP0LkhTpxZa/Q/7YPzRVte5Z1YN0mQwgAodQN6/hFfu3/fDkTBBN25E+gk9GeyqtQChyQHp9/jN+O9ehEV4m8nHBQ1wf1jf0QwB66pCesz/tD3rlTMmDvxkGe9+OjB160G2Wy8eCZFIGGC4Cr+SJ5Tnb0CLatO1DHvvI9NFjgAEd/EiGJqEKwamrQOgIGjRIb3g3IpcW/cq4ZErUQSsE1JNvhUhC7FHdCzBAV9QytCw==\",\"requiredCustomerData\":null,\"url\":\"\",\"customizeCustomerFormPath\":\"\",\"contactPhoneNumber\":\"\"},\"customer\":{\"macAddress\":\"26-17-2E-AE-22-79\",\"name\":null,\"phone\":null,\"gender\":true,\"birthday\":{\"seconds\":\"915123600\",\"nanos\":0},\"email\":null,\"device\":{\"deviceName\":\"Windows\",\"brandName\":\"Microsoft\",\"deviceCode\":\"PC\",\"os\":\"Windows NT\",\"osValue\":100,\"language\":\"en-US\"},\"createdDate\":{\"seconds\":\"1740803501\",\"nanos\":998000000},\"lastReminderDate\":{\"seconds\":\"1743764852\",\"nanos\":0},\"reminderCount\":3},\"placeCustomerInfoCollections\":[{\"id\":10841,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Gender\",\"timeReminder\":0},{\"id\":10842,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Birthday\",\"timeReminder\":0}],\"pageViewEvents\":[],\"customerRequiredFields\":[],\"contentAuthenForm\":\"<form name=\\\"mikrotik\\\" id=\\\"frmLogin\\\" action=\\\"http://186.186.0.1/login\\\" method=\\\"post\\\" style=\\\"display: none;\\\">\\n    <input type=\\\"hidden\\\" name=\\\"username\\\" value=\\\"awing15-15\\\"/>\\n    <input type=\\\"hidden\\\" name=\\\"password\\\" value=\\\"df4ac9e1a77c84894169c99597eba211\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"dst\\\" value=\\\"http://v1.awingconnect.vn/Success\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"popup\\\" value=\\\"false\\\" />\\n</form>\\n<script>\\n\\n    var authenticationProfileOptionals = [];\\n    function bindOptionalProfileByIndex(idx) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            var mikrotikParamModel = JSON.parse(authenticationProfileOptionals[idx].Params);\\n            $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n            $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n        }\\n    }\\n    function bindOptionalProfileByName(name) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            authenticationProfileOptionals.forEach(function (el) {\\n                if (el.Name.toLowerCase() == name.toLowerCase()) {\\n                    var mikrotikParamModel = JSON.parse(profileOptional.Params);\\n                    $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n                    $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n                }\\n            });\\n        }\\n    }\\n    awingStateMachineContext.setAuthenType(awingConstants.AUTHEN_TYPE.FORM);\\n</script>\\n\",\"createdDate\":\"2025-04-13T23:04:05.1414356+07:00\"}}"
          },
          "redirectURL": "",
          "headersSize": 227,
          "bodySize": 1998,
          "_transferSize": 2225,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:05.433Z",
        "time": 114.33000003629178,
        "timings": {
          "blocked": 2.7420000314861537,
          "dns": 0.01200000000000001,
          "ssl": -1,
          "connect": 3.3989999999999996,
          "send": 0.2190000000000003,
          "wait": 105.52000000891462,
          "receive": 2.437999995891005,
          "_blocked_queueing": 1.5330000314861536,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [],
            "parent": {
              "description": "Image",
              "callFrames": [
                {
                  "functionName": "Ae",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 36294
                },
                {
                  "functionName": "$e",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 45789
                },
                {
                  "functionName": "append",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 47632
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 48728
                },
                {
                  "functionName": "M",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 29496
                },
                {
                  "functionName": "html",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 48404
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 83073
                },
                {
                  "functionName": "c",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 25303
                },
                {
                  "functionName": "fireWith",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 26052
                },
                {
                  "functionName": "l",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 77781
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 80264
                }
              ],
              "parent": {
                "description": "XMLHttpRequest.send",
                "callFrames": [
                  {
                    "functionName": "send",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 80624
                  },
                  {
                    "functionName": "ajax",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 76166
                  },
                  {
                    "functionName": "",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 82991
                  },
                  {
                    "functionName": "",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 8847
                  },
                  {
                    "functionName": "setDomain",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 13335
                  },
                  {
                    "functionName": "success",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 14394
                  },
                  {
                    "functionName": "c",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 25303
                  },
                  {
                    "functionName": "fireWith",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 26052
                  },
                  {
                    "functionName": "l",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 77781
                  },
                  {
                    "functionName": "",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 80264
                  }
                ],
                "parent": {
                  "description": "XMLHttpRequest.send",
                  "callFrames": [
                    {
                      "functionName": "send",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 80624
                    },
                    {
                      "functionName": "ajax",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 76166
                    },
                    {
                      "functionName": "verifyContext",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 14306
                    },
                    {
                      "functionName": "entry",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 418
                    },
                    {
                      "functionName": "",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 7398
                    },
                    {
                      "functionName": "startStateMachine",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 3376
                    },
                    {
                      "functionName": "",
                      "scriptId": "60",
                      "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                      "lineNumber": 143,
                      "columnNumber": 32
                    }
                  ]
                }
              }
            }
          }
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/layout/5197905656409960384/5476089696408447131/Logo.png",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "19921"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 13:19:49 GMT"
            },
            {
              "name": "etag",
              "value": "\"6640c9d2-4dd1\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "last-modified",
              "value": "Sun, 12 May 2024 13:53:22 GMT"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 19921,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:05.526Z",
        "time": 9.09399997908622,
        "timings": {
          "blocked": 5.6959999646991495,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.44100002469494937,
          "receive": 2.9569999896921217,
          "_blocked_queueing": 4.795999964699149,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [],
            "parent": {
              "description": "Image",
              "callFrames": [
                {
                  "functionName": "Ae",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 36294
                },
                {
                  "functionName": "$e",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 45789
                },
                {
                  "functionName": "append",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 47632
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 48728
                },
                {
                  "functionName": "M",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 29496
                },
                {
                  "functionName": "html",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 48404
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 83073
                },
                {
                  "functionName": "c",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 25303
                },
                {
                  "functionName": "fireWith",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 26052
                },
                {
                  "functionName": "l",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 77781
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 80264
                }
              ],
              "parent": {
                "description": "XMLHttpRequest.send",
                "callFrames": [
                  {
                    "functionName": "send",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 80624
                  },
                  {
                    "functionName": "ajax",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 76166
                  },
                  {
                    "functionName": "",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 82991
                  },
                  {
                    "functionName": "",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 8847
                  },
                  {
                    "functionName": "setDomain",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 13335
                  },
                  {
                    "functionName": "success",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 14394
                  },
                  {
                    "functionName": "c",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 25303
                  },
                  {
                    "functionName": "fireWith",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 26052
                  },
                  {
                    "functionName": "l",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 77781
                  },
                  {
                    "functionName": "",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 80264
                  }
                ],
                "parent": {
                  "description": "XMLHttpRequest.send",
                  "callFrames": [
                    {
                      "functionName": "send",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 80624
                    },
                    {
                      "functionName": "ajax",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 76166
                    },
                    {
                      "functionName": "verifyContext",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 14306
                    },
                    {
                      "functionName": "entry",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 418
                    },
                    {
                      "functionName": "",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 7398
                    },
                    {
                      "functionName": "startStateMachine",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 3376
                    },
                    {
                      "functionName": "",
                      "scriptId": "60",
                      "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                      "lineNumber": 143,
                      "columnNumber": 32
                    }
                  ]
                }
              }
            }
          }
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/images/awinglg.png",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "19209"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 13:19:49 GMT"
            },
            {
              "name": "etag",
              "value": "\"5eb8c10c-4b09\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "last-modified",
              "value": "Mon, 11 May 2020 03:05:48 GMT"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 19209,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:05.526Z",
        "time": 9.001999977044761,
        "timings": {
          "blocked": 5.435999956417829,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.5230000163726508,
          "receive": 3.0430000042542815,
          "_blocked_queueing": 4.878999956417829,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "321372",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80624
              },
              {
                "functionName": "ajax",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 76166
              },
              {
                "functionName": "getCampaign",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 19672
              },
              {
                "functionName": "entry",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 1926
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7398
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 16083
              },
              {
                "functionName": "c",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 25303
              },
              {
                "functionName": "fireWith",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 26052
              },
              {
                "functionName": "l",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 77781
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80264
              }
            ],
            "parent": {
              "description": "XMLHttpRequest.send",
              "callFrames": [
                {
                  "functionName": "send",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 80624
                },
                {
                  "functionName": "ajax",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 76166
                },
                {
                  "functionName": "getCustomer",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 15677
                },
                {
                  "functionName": "entry",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 1362
                },
                {
                  "functionName": "",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 7398
                },
                {
                  "functionName": "r",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 13979
                },
                {
                  "functionName": "success",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 14488
                },
                {
                  "functionName": "c",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 25303
                },
                {
                  "functionName": "fireWith",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 26052
                },
                {
                  "functionName": "l",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 77781
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 80264
                }
              ],
              "parent": {
                "description": "XMLHttpRequest.send",
                "callFrames": [
                  {
                    "functionName": "send",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 80624
                  },
                  {
                    "functionName": "ajax",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 76166
                  },
                  {
                    "functionName": "verifyContext",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 14306
                  },
                  {
                    "functionName": "entry",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 418
                  },
                  {
                    "functionName": "",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 7398
                  },
                  {
                    "functionName": "startStateMachine",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 3376
                  },
                  {
                    "functionName": "",
                    "scriptId": "60",
                    "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                    "lineNumber": 143,
                    "columnNumber": 32
                  }
                ]
              }
            }
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "POST",
          "url": "http://v1.awingconnect.vn/Content/GetCampaignHtml",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,vi;q=0.8"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "4432"
            },
            {
              "name": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "name": "Host",
              "value": "v1.awingconnect.vn"
            },
            {
              "name": "Origin",
              "value": "http://v1.awingconnect.vn"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 743,
          "bodySize": 4432,
          "postData": {
            "mimeType": "application/json; charset=UTF-8",
            "text": "{\"captiveContextDTO\":{\"token\":\"cf3bfcbd9258033ede37079e6ffcd8ab89f69d34\",\"captiveContext\":{\"campaignData\":{\"sessionId\":\"f67f01ba-50db-4ec2-b59a-fa8beff1b018\",\"macAddress\":\"26-17-2E-AE-22-79\",\"apMac\":\"CC-2D-E0-0E-00-0A\",\"placeId\":\"5408580173018081493\",\"domainId\":\"5476089696408447131\",\"url\":\"http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\\\170&chap_challenge=\\\\245\\\\345\\\\331\\\\134\\\\150\\\\331\\\\146\\\\353\\\\013\\\\120\\\\162\\\\166\\\\110\\\\312\\\\102\\\\251\",\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\",\"campaignId\":\"0\",\"campaignGroupId\":0,\"campaignAdId\":0,\"campaignType\":0,\"isNetworkCampaign\":false,\"loginId\":\"0\",\"loginHtml\":null,\"welcomeId\":\"0\",\"welcomeHtml\":null},\"customerActions\":[0,1],\"domain\":{\"domainId\":\"5476089696408447131\",\"domainTariffId\":1,\"directoryPath\":\".0.90.5476089696408447131.\",\"name\":\"Wi - Mesh\",\"joinNetwork\":true,\"description\":\"\",\"license\":\"AvX0ZtUdP4wukxT5af24a9BKVEZih4ieKcQUcHFTwuadEz9v97xzIgfKpjckguFxzdIhS2IfysNUsEgfXzrMQNQZBThUtOQEI62eBW6BOrIjP0LkhTpxZa/Q/7YPzRVte5Z1YN0mQwgAodQN6/hFfu3/fDkTBBN25E+gk9GeyqtQChyQHp9/jN+O9ehEV4m8nHBQ1wf1jf0QwB66pCesz/tD3rlTMmDvxkGe9+OjB160G2Wy8eCZFIGGC4Cr+SJ5Tnb0CLatO1DHvvI9NFjgAEd/EiGJqEKwamrQOgIGjRIb3g3IpcW/cq4ZErUQSsE1JNvhUhC7FHdCzBAV9QytCw==\",\"requiredCustomerData\":null,\"url\":\"\",\"customizeCustomerFormPath\":\"\",\"contactPhoneNumber\":\"\"},\"customer\":{\"macAddress\":\"26-17-2E-AE-22-79\",\"name\":null,\"phone\":null,\"gender\":true,\"birthday\":{\"seconds\":\"915123600\",\"nanos\":0},\"email\":null,\"device\":{\"deviceName\":\"Windows\",\"brandName\":\"Microsoft\",\"deviceCode\":\"PC\",\"os\":\"Windows NT\",\"osValue\":100,\"language\":\"en-US\"},\"createdDate\":{\"seconds\":\"1740803501\",\"nanos\":998000000},\"lastReminderDate\":{\"seconds\":\"1743764852\",\"nanos\":0},\"reminderCount\":3},\"placeCustomerInfoCollections\":[{\"id\":10841,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Gender\",\"timeReminder\":0},{\"id\":10842,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Birthday\",\"timeReminder\":0}],\"pageViewEvents\":[],\"customerRequiredFields\":[],\"contentAuthenForm\":\"<form name=\\\"mikrotik\\\" id=\\\"frmLogin\\\" action=\\\"http://186.186.0.1/login\\\" method=\\\"post\\\" style=\\\"display: none;\\\">\\n    <input type=\\\"hidden\\\" name=\\\"username\\\" value=\\\"awing15-15\\\"/>\\n    <input type=\\\"hidden\\\" name=\\\"password\\\" value=\\\"df4ac9e1a77c84894169c99597eba211\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"dst\\\" value=\\\"http://v1.awingconnect.vn/Success\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"popup\\\" value=\\\"false\\\" />\\n</form>\\n<script>\\n\\n    var authenticationProfileOptionals = [];\\n    function bindOptionalProfileByIndex(idx) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            var mikrotikParamModel = JSON.parse(authenticationProfileOptionals[idx].Params);\\n            $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n            $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n        }\\n    }\\n    function bindOptionalProfileByName(name) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            authenticationProfileOptionals.forEach(function (el) {\\n                if (el.Name.toLowerCase() == name.toLowerCase()) {\\n                    var mikrotikParamModel = JSON.parse(profileOptional.Params);\\n                    $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n                    $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n                }\\n            });\\n        }\\n    }\\n    awingStateMachineContext.setAuthenType(awingConstants.AUTHEN_TYPE.FORM);\\n</script>\\n\",\"createdDate\":\"2025-04-13T23:04:05.1414356+07:00\"}},\"updateCustomerFlag\":false,\"customer\":{\"macAddress\":\"26-17-2E-AE-22-79\",\"name\":null,\"phone\":null,\"gender\":true,\"birthday\":{\"seconds\":\"915123600\",\"nanos\":0},\"email\":null,\"device\":{\"deviceName\":\"Windows\",\"brandName\":\"Microsoft\",\"deviceCode\":\"PC\",\"os\":\"Windows NT\",\"osValue\":100,\"language\":\"en-US\"},\"createdDate\":{\"seconds\":\"1740803501\",\"nanos\":998000000},\"lastReminderDate\":{\"seconds\":\"1743764852\",\"nanos\":0},\"reminderCount\":3}}"
          }
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 16:04:04 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 13964,
            "mimeType": "application/json",
            "compression": 8232,
            "text": "{\"token\":\"4114fb215e1779a10876348f42641a3fbc8c95a7\",\"captiveContext\":{\"campaignData\":{\"sessionId\":\"f67f01ba-50db-4ec2-b59a-fa8beff1b018\",\"macAddress\":\"26-17-2E-AE-22-79\",\"apMac\":\"CC-2D-E0-0E-00-0A\",\"placeId\":\"5408580173018081493\",\"domainId\":\"5476089696408447131\",\"url\":\"http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\\\170&chap_challenge=\\\\245\\\\345\\\\331\\\\134\\\\150\\\\331\\\\146\\\\353\\\\013\\\\120\\\\162\\\\166\\\\110\\\\312\\\\102\\\\251\",\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\",\"campaignId\":\"4961554445594984512\",\"campaignGroupId\":1,\"campaignAdId\":1,\"campaignType\":0,\"isNetworkCampaign\":false,\"loginId\":\"0\",\"loginHtml\":{\"commonHtml\":\"\",\"pageViews\":[{\"contentHtml\":\"<style>\\r\\n    @media (max-width: 768px) {\\r\\n        .header-text {\\r\\n            font-size: 14px;\\r\\n        }\\r\\n        .connect-button {\\r\\n            font-size: 12px;\\r\\n        }\\r\\n        .policy {\\r\\n            font-size: 12px;\\r\\n        }\\r\\n        .logo-img {\\r\\n            margin: 16px !important;\\r\\n        }\\r\\n        .adsbyawing {\\r\\n            font-size: 14px;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @media (max-width: 360px) {\\r\\n        .connect-button {\\r\\n            font-size: 11px;\\r\\n        }\\r\\n        .policy {\\r\\n            font-size: 11px;\\r\\n        }\\r\\n    }\\r\\n    @media (min-width: 1024px) {\\r\\n        .logo-wrapper {\\r\\n            max-width: 700px;\\r\\n        }\\r\\n    }\\r\\n</style>\\r\\n\\r\\n<div class=\\\"container-fluid text-center p-5\\\" style=\\\"background: #f5f5f5;\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n        <div class=\\\"col-md-10 col-lg-5 p-0 logo-wrapper\\\">\\r\\n            <div class=\\\"w-100 shadow-sm p-3 rounded\\\" style=\\\"background: #ffffff;\\\">\\r\\n                <p class=\\\"h5 header-text\\\" style=\\\"font-weight: bold\\\">Wi-Fi miễn phí tài trợ bởi</p>\\r\\n                <img id=\\\"logo\\\" class=\\\"w-75 m-4 logo-img\\\" src=\\\"/static/Files/lgn/5566897871528661947/Untitled-3.png\\\" />\\r\\n                <button id=\\\"logo_button\\\" class=\\\"btn btn-primary connect-button w-75\\\"\\r\\n                    style=\\\"min-height: 45px;\\\" onClick=\\\"awingStateMachineContextActions.nextView()\\\">\\r\\n                    <span>TIẾP TỤC ĐỂ KẾT NỐI INTERNET</span>\\r\\n                </button>\\r\\n                <div class=\\\"mt-1 policy\\\" style=\\\"color: #0000f5\\\">\\r\\n                    <p>Tôi đồng ý các điều khoản sử dụng Wi-Fi <a role=\\\"button\\\" class=\\\"awing-agreement\\\" onClick=\\\"awingUIActions.showAgreement()\\\">tại đây</a>\\r\\n                    </p>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"mt-4\\\" style=\\\"color: #5f6368\\\">\\r\\n                <u class=\\\"adsbyawing fw-bold d-flex justify-content-center align-items-center\\\" data-toggle=\\\"tooltip\\\" title=\\\"Email: contact@awing.vn\\r\\n                Hotline: 0901 05 05 17\\\"\\r\\n                    data-bs-placement=\\\"bottom\\\">Ads by AWING\\r\\n                    <div class=\\\"border border-light rounded-circle bg-secondary text-light mx-1 d-flex justify-content-center align-items-center\\\" style=\\\"width: 16px; height:16px; font-size: 10px;\\\">i</div>\\r\\n                </u>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<script>\\r\\n    let logoVariables = {\\r\\n        button: {\\r\\n            background: \\\"50b848\\\" ? \\\"#50b848\\\" : \\\"#ffffff\\\",\\r\\n            textColor: \\\"ffffff\\\" ? \\\"#ffffff\\\" : \\\"#231f20\\\"\\r\\n        },\\r\\n        options: {\\r\\n            isSquareLogo: false\\r\\n        }\\r\\n    }\\r\\n    $(\\\"#logo_button\\\").css({\\r\\n        background: logoVariables.button.background,\\r\\n        color: logoVariables.button.textColor,\\r\\n        border: logoVariables.button.background == \\\"#ffffff\\\" ? \\\"1px solid #231f20\\\" : \\\"none\\\"\\r\\n    })\\r\\n    if (logoVariables.options.isSquareLogo) {\\r\\n        $(\\\"#logo\\\").removeClass(\\\"w-75\\\")\\r\\n        $(\\\"#logo\\\").addClass(\\\"w-50\\\")\\r\\n    }\\r\\n    function startAnimation() {\\r\\n        $(document).ready(function () {\\r\\n            $('[data-toggle=\\\"tooltip\\\"]').tooltip();\\r\\n        });\\r\\n    }\\r\\n</script>\"},{\"contentHtml\":\"<link\\r\\nrel=\\\"stylesheet\\\"\\r\\nhref=\\\"/static/Files/template/5074619029972904036/swiper-bundle.min.css\\\"\\r\\n/>\\r\\n<script src=\\\"/static/Files/template/5074619029972904036/swiper-bundle.min.js\\\"></script>\\r\\n<link\\r\\nhref=\\\"/static/Files/template/5074619029972904036/template_slide_overflow_v2.1.css?v=2\\\"\\r\\nrel=\\\"stylesheet\\\"\\r\\n/>\\r\\n\\r\\n<style>\\r\\n@media (max-width: 768px) {\\r\\n    .connect-button {\\r\\n    font-size: 12px !important;\\r\\n    min-height: 50px !important;\\r\\n    }\\r\\n}\\r\\n.slide-item {\\r\\n    aspect-ratio: 600/860;\\r\\n}\\r\\n</style>\\r\\n\\r\\n<div id=\\\"slider-container\\\" class=\\\"container-fluid text-center p-0\\\">\\r\\n<div class=\\\"swiper-container p-0\\\">\\r\\n    <div\\r\\n        class=\\\"swiper-wrapper text-center p-0\\\"\\r\\n\\r\\n        id=\\\"slider-image\\\"\\r\\n    ></div>\\r\\n    <div id=\\\"btn-group\\\" class=\\\"w-100 z-3 position-absolute right-0 mb-md-5 mb-lg-3 mt-2 slide-button text-uppercase\\\">\\r\\n        <div class=\\\"swiper-pagination\\\"></div>\\r\\n        <button id=\\\"connectToInternet\\\" class=\\\"btn mt-2 connect-button text-uppercase awing-captive__blur\\\"\\r\\n            style=\\\"width: 80%; min-height: 45px; margin-bottom: 1em;\\\">\\r\\n            <span>\\r\\n                KẾT NỐI INTERNET SAU <br /><i> (CONNECTING IN) </i><i id=\\\"countdowntimer\\\" style=\\\"font-style: normal\\\">6S</i>\\r\\n            </span>\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n</div>\\r\\n<script>\\r\\nlet slideBannerVariables = {\\r\\n    banners: [{\\\"image\\\":\\\"/static/Files/lgn/5566897871528661947/TichDiemUuDai_600x860.png\\\",\\\"color\\\":\\\"fcf7cb\\\"},{\\\"image\\\":\\\"/static/Files/lgn/5566897871528661947/MuaThePhu600x860.png\\\",\\\"color\\\":\\\"58934a\\\"}],\\r\\n    connectButton: {\\r\\n        text: \\\"KẾT NỐI INTERNET\\\",\\r\\n        background: \\\"57bc53\\\" ? \\\"#57bc53\\\" : \\\"#ffffff\\\",\\r\\n        textColor: \\\"ffffff\\\" ? \\\"#ffffff\\\" : \\\"#231f20\\\"\\r\\n    },\\r\\n    slideOptions: {\\r\\n        loop: true,\\r\\n        slideTime: 3 >= 0 ?  3 :  2,\\r\\n        clickable: true,\\r\\n        skipTime: Number(6 || 0)\\r\\n    }\\r\\n}\\r\\nlet slideBannerFunctions = {\\r\\n    autoSwiper: ()=>{\\r\\n        let n = new Swiper(\\\".swiper-container\\\", {\\r\\n        pagination: \\\".swiper-pagination\\\",\\r\\n        nextButton: \\\".swiper-button-next\\\",\\r\\n        loop: slideBannerVariables.slideOptions.loop,\\r\\n        prevButton: !0,\\r\\n        paginationClickable: !0,\\r\\n        spaceBetween: 0,\\r\\n        centeredSlides: !0,\\r\\n        autoplay: {\\r\\n            delay: slideBannerVariables.slideOptions.slideTime * 1000,\\r\\n            stopOnLastSlide: slideBannerVariables.slideOptions.loop ? !1 : !0,\\r\\n        },\\r\\n        autoplayDisableOnInteraction: !1,\\r\\n        autoplayStopOnLast: !0,\\r\\n        preventClicks: !1,\\r\\n        preventClicksPropagation: !1,\\r\\n        pagination: { el: \\\".swiper-pagination\\\", clickable: !0 },\\r\\n        navigation: {\\r\\n            nextEl: \\\".swiper-button-next\\\",\\r\\n            prevEl: \\\".swiper-button-prev\\\",\\r\\n        },\\r\\n        });\\r\\n        $(\\\".swiper-pagination-clickable .swiper-pagination-bullet\\\").css(\\r\\n            \\\"background\\\",\\r\\n            slideBannerVariables.connectButton.background\\r\\n        );\\r\\n        return n;\\r\\n    },\\r\\n    countDown: (isClickable)=>{\\r\\n        let n = slideBannerVariables.slideOptions.skipTime;\\r\\n        e = setInterval(function () {\\r\\n            n--;\\r\\n            let o = document.getElementById(\\\"countdowntimer\\\");\\r\\n            if(o) {o.textContent = n + \\\"S\\\"}\\r\\n            if (n <= 0) {\\r\\n                    clearInterval(e);\\r\\n                    const img = $(\\\".image-next\\\");\\r\\n                    $(\\\"#connectToInternet\\\")\\r\\n                        .removeClass(\\\"disabled\\\")\\r\\n                        .removeClass(\\\"awing-captive__blur\\\")\\r\\n                        .click(function () {\\r\\n                            slideBannerFunctions.connectToWifi();\\r\\n                        });\\r\\n                    $(\\\"#connectToInternet span\\\").html(\\r\\n                        slideBannerVariables.connectButton.text + \\\"<br/><i>(INTERNET ACCESS)</i>\\\"\\r\\n                    );\\r\\n                    if(isClickable) {\\r\\n                    img.css(\\\"cursor\\\", \\\"pointer\\\");\\r\\n                    img.attr(\\\"onclick\\\", \\\"slideBannerFunctions.connectToWifi()\\\");\\r\\n                    }\\r\\n            }\\r\\n        }, n == 0 ? 0 : 1000);\\r\\n    },\\r\\n    connectToWifi: ()=>{\\r\\n        $(\\\".body-container\\\").css(\\\"background\\\", \\\"#F5F5F5\\\");\\r\\n        $(\\\".body-container\\\").css(\\\"min-height\\\", \\\"auto\\\");\\r\\n        awingStateMachineContextActions.nextView();\\r\\n    },\\r\\n}\\r\\nlet slide = document.getElementById(\\\"slider-image\\\");\\r\\nslideBannerVariables.banners.map((bannerItem, index) => {\\r\\n    const wrapper = document.createElement(\\\"div\\\")\\r\\n    wrapper.className += \\\" swiper-slide\\\"\\r\\n    const bodySlide = document.createElement(\\\"div\\\")\\r\\n    bodySlide.className += `body-container body-slide-${index + 1}`\\r\\n    const image = document.createElement(\\\"img\\\")\\r\\n    image.className += \\\" image-next slide-item\\\"\\r\\n    image.src = bannerItem.image\\r\\n    bodySlide.append(image)\\r\\n    const slideSpace = document.createElement(\\\"div\\\")\\r\\n    slideSpace.style.height = $(\\\"#btn-group\\\").height() + \\\"px\\\"\\r\\n    slideSpace.style.width = \\\"100%\\\";\\r\\n    bodySlide.append(slideSpace)\\r\\n    wrapper.append(bodySlide)\\r\\n    slide.appendChild(wrapper);\\r\\n    $(`.body-slide-${index + 1}`).css(\\\"background\\\", `#${bannerItem.color}`);\\r\\n});\\r\\n$(\\\".connect-button\\\").css({\\r\\n    \\\"background-color\\\": slideBannerVariables.connectButton.background,\\r\\n    color: slideBannerVariables.connectButton.textColor,\\r\\n    border: (slideBannerVariables.connectButton.background == \\\"#ffffff\\\" && slideBannerVariables.connectButton.textColor == '#231f20') ? \\\"1px solid #231f20\\\" : \\\"none\\\",\\r\\n})\\r\\n\\r\\nfunction startAnimation() {\\r\\n    $(\\\"header\\\").addClass(\\\"d-none\\\");\\r\\n    const n = slideBannerFunctions.autoSwiper();\\r\\n    slideBannerFunctions.countDown(slideBannerVariables.slideOptions.clickable);\\r\\n    n.imagesToLoad[0].onload = function () {\\r\\n        $(\\\"#btn-group\\\").css(\\\"top\\\", `${$(this).height()}px`)\\r\\n    };\\r\\n    $('.body-container').css(\\\"min-height\\\", `calc(100svh - ${$('footer').height()}px)`);\\r\\n}\\r\\n</script>\"}]},\"welcomeId\":\"0\",\"welcomeHtml\":{\"commonHtml\":\"\",\"pageViews\":[{\"contentHtml\":\"<script>\\r\\n    $('#layoutHeader').hide();\\r\\n    awingCaptiveUtils.openLandingpageV2(encodeURIComponent(\\\"https://mywifi.vn/download\\\"), encodeURIComponent(\\\"https://mywifi.vn/download\\\"));\\r\\n</script>\"}]}},\"customerActions\":[0,1,2],\"domain\":{\"domainId\":\"5476089696408447131\",\"domainTariffId\":1,\"directoryPath\":\".0.90.5476089696408447131.\",\"name\":\"Wi - Mesh\",\"joinNetwork\":true,\"description\":\"\",\"license\":\"AvX0ZtUdP4wukxT5af24a9BKVEZih4ieKcQUcHFTwuadEz9v97xzIgfKpjckguFxzdIhS2IfysNUsEgfXzrMQNQZBThUtOQEI62eBW6BOrIjP0LkhTpxZa/Q/7YPzRVte5Z1YN0mQwgAodQN6/hFfu3/fDkTBBN25E+gk9GeyqtQChyQHp9/jN+O9ehEV4m8nHBQ1wf1jf0QwB66pCesz/tD3rlTMmDvxkGe9+OjB160G2Wy8eCZFIGGC4Cr+SJ5Tnb0CLatO1DHvvI9NFjgAEd/EiGJqEKwamrQOgIGjRIb3g3IpcW/cq4ZErUQSsE1JNvhUhC7FHdCzBAV9QytCw==\",\"requiredCustomerData\":null,\"url\":\"\",\"customizeCustomerFormPath\":\"\",\"contactPhoneNumber\":\"\"},\"customer\":{\"macAddress\":\"26-17-2E-AE-22-79\",\"name\":null,\"phone\":null,\"gender\":true,\"birthday\":{\"seconds\":\"915123600\",\"nanos\":0},\"email\":null,\"device\":{\"deviceName\":\"Windows\",\"brandName\":\"Microsoft\",\"deviceCode\":\"PC\",\"os\":\"Windows NT\",\"osValue\":100,\"language\":\"en-US\"},\"createdDate\":{\"seconds\":\"1740803501\",\"nanos\":998000000},\"lastReminderDate\":{\"seconds\":\"1743764852\",\"nanos\":0},\"reminderCount\":3},\"placeCustomerInfoCollections\":[{\"id\":10841,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Gender\",\"timeReminder\":0},{\"id\":10842,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Birthday\",\"timeReminder\":0}],\"pageViewEvents\":[],\"customerRequiredFields\":[],\"contentAuthenForm\":\"<form name=\\\"mikrotik\\\" id=\\\"frmLogin\\\" action=\\\"http://186.186.0.1/login\\\" method=\\\"post\\\" style=\\\"display: none;\\\">\\n    <input type=\\\"hidden\\\" name=\\\"username\\\" value=\\\"awing15-15\\\"/>\\n    <input type=\\\"hidden\\\" name=\\\"password\\\" value=\\\"df4ac9e1a77c84894169c99597eba211\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"dst\\\" value=\\\"http://v1.awingconnect.vn/Success\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"popup\\\" value=\\\"false\\\" />\\n</form>\\n<script>\\n\\n    var authenticationProfileOptionals = [];\\n    function bindOptionalProfileByIndex(idx) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            var mikrotikParamModel = JSON.parse(authenticationProfileOptionals[idx].Params);\\n            $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n            $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n        }\\n    }\\n    function bindOptionalProfileByName(name) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            authenticationProfileOptionals.forEach(function (el) {\\n                if (el.Name.toLowerCase() == name.toLowerCase()) {\\n                    var mikrotikParamModel = JSON.parse(profileOptional.Params);\\n                    $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n                    $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n                }\\n            });\\n        }\\n    }\\n    awingStateMachineContext.setAuthenType(awingConstants.AUTHEN_TYPE.FORM);\\n</script>\\n\",\"createdDate\":\"2025-04-13T23:04:05.1414356+07:00\"}}"
          },
          "redirectURL": "",
          "headersSize": 227,
          "bodySize": 5732,
          "_transferSize": 5959,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:05.556Z",
        "time": 792.6020000563412,
        "timings": {
          "blocked": 5.773000051364303,
          "dns": 0.031000000000000028,
          "ssl": -1,
          "connect": 4.7989999999999995,
          "send": 1.4540000000000006,
          "wait": 405.77299999485166,
          "receive": 374.77200001012534,
          "_blocked_queueing": 5.052000051364303,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 10820
              },
              {
                "functionName": "UIActions.preloadResources",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 11132
              },
              {
                "functionName": "renderPage",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20419
              },
              {
                "functionName": "r",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 19153
              }
            ],
            "parent": {
              "description": "postMessage",
              "callFrames": [
                {
                  "functionName": "completeEvent",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 26115
                },
                {
                  "functionName": "",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 20108
                },
                {
                  "functionName": "c",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 25303
                },
                {
                  "functionName": "fireWith",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 26052
                },
                {
                  "functionName": "l",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 77781
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 80264
                }
              ],
              "parent": {
                "description": "XMLHttpRequest.send",
                "callFrames": [
                  {
                    "functionName": "send",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 80624
                  },
                  {
                    "functionName": "ajax",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 76166
                  },
                  {
                    "functionName": "getCampaign",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 19672
                  },
                  {
                    "functionName": "entry",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 1926
                  },
                  {
                    "functionName": "",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 7398
                  },
                  {
                    "functionName": "",
                    "scriptId": "18",
                    "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                    "lineNumber": 0,
                    "columnNumber": 16083
                  },
                  {
                    "functionName": "c",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 25303
                  },
                  {
                    "functionName": "fireWith",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 26052
                  },
                  {
                    "functionName": "l",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 77781
                  },
                  {
                    "functionName": "",
                    "scriptId": "16",
                    "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                    "lineNumber": 1,
                    "columnNumber": 80264
                  }
                ],
                "parent": {
                  "description": "XMLHttpRequest.send",
                  "callFrames": [
                    {
                      "functionName": "send",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 80624
                    },
                    {
                      "functionName": "ajax",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 76166
                    },
                    {
                      "functionName": "getCustomer",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 15677
                    },
                    {
                      "functionName": "entry",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 1362
                    },
                    {
                      "functionName": "",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 7398
                    },
                    {
                      "functionName": "r",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 13979
                    },
                    {
                      "functionName": "success",
                      "scriptId": "18",
                      "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                      "lineNumber": 0,
                      "columnNumber": 14488
                    },
                    {
                      "functionName": "c",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 25303
                    },
                    {
                      "functionName": "fireWith",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 26052
                    },
                    {
                      "functionName": "l",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 77781
                    },
                    {
                      "functionName": "",
                      "scriptId": "16",
                      "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                      "lineNumber": 1,
                      "columnNumber": 80264
                    }
                  ],
                  "parent": {
                    "description": "XMLHttpRequest.send",
                    "callFrames": [
                      {
                        "functionName": "send",
                        "scriptId": "16",
                        "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                        "lineNumber": 1,
                        "columnNumber": 80624
                      },
                      {
                        "functionName": "ajax",
                        "scriptId": "16",
                        "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                        "lineNumber": 1,
                        "columnNumber": 76166
                      },
                      {
                        "functionName": "verifyContext",
                        "scriptId": "18",
                        "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                        "lineNumber": 0,
                        "columnNumber": 14306
                      },
                      {
                        "functionName": "entry",
                        "scriptId": "18",
                        "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                        "lineNumber": 0,
                        "columnNumber": 418
                      },
                      {
                        "functionName": "",
                        "scriptId": "18",
                        "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                        "lineNumber": 0,
                        "columnNumber": 7398
                      },
                      {
                        "functionName": "startStateMachine",
                        "scriptId": "18",
                        "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                        "lineNumber": 0,
                        "columnNumber": 3376
                      },
                      {
                        "functionName": "",
                        "scriptId": "60",
                        "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                        "lineNumber": 143,
                        "columnNumber": 32
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "image",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/lgn/5566897871528661947/Untitled-3.png",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "8846"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 17:41:44 GMT"
            },
            {
              "name": "etag",
              "value": "\"64f8285e-228e\""
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "last-modified",
              "value": "Wed, 06 Sep 2023 07:21:02 GMT"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 8846,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:06.350Z",
        "time": 3.0610000248998404,
        "timings": {
          "blocked": 1.566000021789223,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.6650000277161598,
          "receive": 0.8299999753944576,
          "_blocked_queueing": 1.096000021789223,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 10820
              },
              {
                "functionName": "UIActions.preloadResources",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 10971
              },
              {
                "functionName": "moveNextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 21320
              },
              {
                "functionName": "actions",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2190
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7238
              },
              {
                "functionName": "nextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20922
              },
              {
                "functionName": "displayLoginPage",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20504
              },
              {
                "functionName": "entry",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2105
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7398
              },
              {
                "functionName": "r",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 19466
              }
            ],
            "parent": {
              "description": "postMessage",
              "callFrames": [
                {
                  "functionName": "completeEvent",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 26184
                },
                {
                  "functionName": "",
                  "scriptId": "57",
                  "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                  "lineNumber": 46,
                  "columnNumber": 44
                },
                {
                  "functionName": "dispatch",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 40034
                },
                {
                  "functionName": "ce.event.add.v.handle",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 38005
                }
              ]
            }
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/template/5074619029972904036/swiper-bundle.min.css",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "16591"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 17:41:45 GMT"
            },
            {
              "name": "etag",
              "value": "\"661f8f10-40cf\""
            },
            {
              "name": "content-type",
              "value": "text/css"
            },
            {
              "name": "last-modified",
              "value": "Wed, 17 Apr 2024 08:57:52 GMT"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 16591,
            "mimeType": "text/css",
            "text": "/**\r\n * Swiper 6.5.6\r\n * Most modern mobile touch slider and framework with hardware accelerated transitions\r\n * https://swiperjs.com\r\n *\r\n * Copyright 2014-2021 Vladimir Kharlampidi\r\n *\r\n * Released under the MIT License\r\n *\r\n * Released on: April 9, 2021\r\n */\r\n\r\n@font-face {\r\n    font-family: swiper-icons;\r\n    src: url('data:application/font-woff;charset=utf-8;base64, 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') format('woff');\r\n    font-weight: 400;\r\n    font-style: normal\r\n}\r\n\r\n:root {\r\n    --swiper-theme-color: #007aff\r\n}\r\n\r\n.swiper-container {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    position: relative;\r\n    overflow: hidden;\r\n    list-style: none;\r\n    padding: 0;\r\n    z-index: 1\r\n}\r\n\r\n.swiper-container-vertical>.swiper-wrapper {\r\n    flex-direction: column\r\n}\r\n\r\n.swiper-wrapper {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 1;\r\n    display: flex;\r\n    transition-property: transform;\r\n    box-sizing: content-box\r\n}\r\n\r\n.swiper-container-android .swiper-slide,\r\n.swiper-wrapper {\r\n    transform: translate3d(0px, 0, 0)\r\n}\r\n\r\n.swiper-container-multirow>.swiper-wrapper {\r\n    flex-wrap: wrap\r\n}\r\n\r\n.swiper-container-multirow-column>.swiper-wrapper {\r\n    flex-wrap: wrap;\r\n    flex-direction: column\r\n}\r\n\r\n.swiper-container-free-mode>.swiper-wrapper {\r\n    transition-timing-function: ease-out;\r\n    margin: 0 auto\r\n}\r\n\r\n.swiper-container-pointer-events {\r\n    touch-action: pan-y\r\n}\r\n\r\n.swiper-container-pointer-events.swiper-container-vertical {\r\n    touch-action: pan-x\r\n}\r\n\r\n.swiper-slide {\r\n    flex-shrink: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    transition-property: transform\r\n}\r\n\r\n.swiper-slide-invisible-blank {\r\n    visibility: hidden\r\n}\r\n\r\n.swiper-container-autoheight,\r\n.swiper-container-autoheight .swiper-slide {\r\n    height: auto\r\n}\r\n\r\n.swiper-container-autoheight .swiper-wrapper {\r\n    align-items: flex-start;\r\n    transition-property: transform, height\r\n}\r\n\r\n.swiper-container-3d {\r\n    perspective: 1200px\r\n}\r\n\r\n.swiper-container-3d .swiper-cube-shadow,\r\n.swiper-container-3d .swiper-slide,\r\n.swiper-container-3d .swiper-slide-shadow-bottom,\r\n.swiper-container-3d .swiper-slide-shadow-left,\r\n.swiper-container-3d .swiper-slide-shadow-right,\r\n.swiper-container-3d .swiper-slide-shadow-top,\r\n.swiper-container-3d .swiper-wrapper {\r\n    transform-style: preserve-3d\r\n}\r\n\r\n.swiper-container-3d .swiper-slide-shadow-bottom,\r\n.swiper-container-3d .swiper-slide-shadow-left,\r\n.swiper-container-3d .swiper-slide-shadow-right,\r\n.swiper-container-3d .swiper-slide-shadow-top {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    pointer-events: none;\r\n    z-index: 10\r\n}\r\n\r\n.swiper-container-3d .swiper-slide-shadow-left {\r\n    background-image: linear-gradient(to left, rgba(0, 0, 0, .5), rgba(0, 0, 0, 0))\r\n}\r\n\r\n.swiper-container-3d .swiper-slide-shadow-right {\r\n    background-image: linear-gradient(to right, rgba(0, 0, 0, .5), rgba(0, 0, 0, 0))\r\n}\r\n\r\n.swiper-container-3d .swiper-slide-shadow-top {\r\n    background-image: linear-gradient(to top, rgba(0, 0, 0, .5), rgba(0, 0, 0, 0))\r\n}\r\n\r\n.swiper-container-3d .swiper-slide-shadow-bottom {\r\n    background-image: linear-gradient(to bottom, rgba(0, 0, 0, .5), rgba(0, 0, 0, 0))\r\n}\r\n\r\n.swiper-container-css-mode>.swiper-wrapper {\r\n    overflow: auto;\r\n    scrollbar-width: none;\r\n    -ms-overflow-style: none\r\n}\r\n\r\n.swiper-container-css-mode>.swiper-wrapper::-webkit-scrollbar {\r\n    display: none\r\n}\r\n\r\n.swiper-container-css-mode>.swiper-wrapper>.swiper-slide {\r\n    scroll-snap-align: start start\r\n}\r\n\r\n.swiper-container-horizontal.swiper-container-css-mode>.swiper-wrapper {\r\n    scroll-snap-type: x mandatory\r\n}\r\n\r\n.swiper-container-vertical.swiper-container-css-mode>.swiper-wrapper {\r\n    scroll-snap-type: y mandatory\r\n}\r\n\r\n:root {\r\n    --swiper-navigation-size: 44px\r\n}\r\n\r\n.swiper-button-next,\r\n.swiper-button-prev {\r\n    position: absolute;\r\n    top: 50%;\r\n    width: calc(var(--swiper-navigation-size)/ 44 * 27);\r\n    height: var(--swiper-navigation-size);\r\n    margin-top: calc(0px - (var(--swiper-navigation-size)/ 2));\r\n    z-index: 10;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: var(--swiper-navigation-color, var(--swiper-theme-color))\r\n}\r\n\r\n.swiper-button-next.swiper-button-disabled,\r\n.swiper-button-prev.swiper-button-disabled {\r\n    opacity: .35;\r\n    cursor: auto;\r\n    pointer-events: none\r\n}\r\n\r\n.swiper-button-next:after,\r\n.swiper-button-prev:after {\r\n    font-family: swiper-icons;\r\n    font-size: var(--swiper-navigation-size);\r\n    text-transform: none !important;\r\n    letter-spacing: 0;\r\n    text-transform: none;\r\n    font-variant: initial;\r\n    line-height: 1\r\n}\r\n\r\n.swiper-button-prev,\r\n.swiper-container-rtl .swiper-button-next {\r\n    left: 10px;\r\n    right: auto\r\n}\r\n\r\n.swiper-button-prev:after,\r\n.swiper-container-rtl .swiper-button-next:after {\r\n    content: 'prev'\r\n}\r\n\r\n.swiper-button-next,\r\n.swiper-container-rtl .swiper-button-prev {\r\n    right: 10px;\r\n    left: auto\r\n}\r\n\r\n.swiper-button-next:after,\r\n.swiper-container-rtl .swiper-button-prev:after {\r\n    content: 'next'\r\n}\r\n\r\n.swiper-button-next.swiper-button-white,\r\n.swiper-button-prev.swiper-button-white {\r\n    --swiper-navigation-color: #ffffff\r\n}\r\n\r\n.swiper-button-next.swiper-button-black,\r\n.swiper-button-prev.swiper-button-black {\r\n    --swiper-navigation-color: #000000\r\n}\r\n\r\n.swiper-button-lock {\r\n    display: none\r\n}\r\n\r\n.swiper-pagination {\r\n    position: absolute;\r\n    text-align: center;\r\n    transition: .3s opacity;\r\n    transform: translate3d(0, 0, 0);\r\n    z-index: 10\r\n}\r\n\r\n.swiper-pagination.swiper-pagination-hidden {\r\n    opacity: 0\r\n}\r\n\r\n.swiper-container-horizontal>.swiper-pagination-bullets,\r\n.swiper-pagination-custom,\r\n.swiper-pagination-fraction {\r\n    bottom: 10px;\r\n    left: 0;\r\n    width: 100%\r\n}\r\n\r\n.swiper-pagination-bullets-dynamic {\r\n    overflow: hidden;\r\n    font-size: 0\r\n}\r\n\r\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\r\n    transform: scale(.33);\r\n    position: relative\r\n}\r\n\r\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active {\r\n    transform: scale(1)\r\n}\r\n\r\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-main {\r\n    transform: scale(1)\r\n}\r\n\r\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev {\r\n    transform: scale(.66)\r\n}\r\n\r\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-prev-prev {\r\n    transform: scale(.33)\r\n}\r\n\r\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next {\r\n    transform: scale(.66)\r\n}\r\n\r\n.swiper-pagination-bullets-dynamic .swiper-pagination-bullet-active-next-next {\r\n    transform: scale(.33)\r\n}\r\n\r\n.swiper-pagination-bullet {\r\n    width: 8px;\r\n    height: 8px;\r\n    display: inline-block;\r\n    border-radius: 50%;\r\n    background: #000;\r\n    opacity: .2\r\n}\r\n\r\nbutton.swiper-pagination-bullet {\r\n    border: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    box-shadow: none;\r\n    -webkit-appearance: none;\r\n    appearance: none\r\n}\r\n\r\n.swiper-pagination-clickable .swiper-pagination-bullet {\r\n    cursor: pointer\r\n}\r\n\r\n.swiper-pagination-bullet-active {\r\n    opacity: 1;\r\n    background: var(--swiper-pagination-color, var(--swiper-theme-color))\r\n}\r\n\r\n.swiper-container-vertical>.swiper-pagination-bullets {\r\n    right: 10px;\r\n    top: 50%;\r\n    transform: translate3d(0px, -50%, 0)\r\n}\r\n\r\n.swiper-container-vertical>.swiper-pagination-bullets .swiper-pagination-bullet {\r\n    margin: 6px 0;\r\n    display: block\r\n}\r\n\r\n.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    width: 8px\r\n}\r\n\r\n.swiper-container-vertical>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\r\n    display: inline-block;\r\n    transition: .2s transform, .2s top\r\n}\r\n\r\n.swiper-container-horizontal>.swiper-pagination-bullets .swiper-pagination-bullet {\r\n    margin: 0 4px\r\n}\r\n\r\n.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic {\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    white-space: nowrap\r\n}\r\n\r\n.swiper-container-horizontal>.swiper-pagination-bullets.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\r\n    transition: .2s transform, .2s left\r\n}\r\n\r\n.swiper-container-horizontal.swiper-container-rtl>.swiper-pagination-bullets-dynamic .swiper-pagination-bullet {\r\n    transition: .2s transform, .2s right\r\n}\r\n\r\n.swiper-pagination-progressbar {\r\n    background: rgba(0, 0, 0, .25);\r\n    position: absolute\r\n}\r\n\r\n.swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\r\n    background: var(--swiper-pagination-color, var(--swiper-theme-color));\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    transform: scale(0);\r\n    transform-origin: left top\r\n}\r\n\r\n.swiper-container-rtl .swiper-pagination-progressbar .swiper-pagination-progressbar-fill {\r\n    transform-origin: right top\r\n}\r\n\r\n.swiper-container-horizontal>.swiper-pagination-progressbar,\r\n.swiper-container-vertical>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite {\r\n    width: 100%;\r\n    height: 4px;\r\n    left: 0;\r\n    top: 0\r\n}\r\n\r\n.swiper-container-horizontal>.swiper-pagination-progressbar.swiper-pagination-progressbar-opposite,\r\n.swiper-container-vertical>.swiper-pagination-progressbar {\r\n    width: 4px;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0\r\n}\r\n\r\n.swiper-pagination-white {\r\n    --swiper-pagination-color: #ffffff\r\n}\r\n\r\n.swiper-pagination-black {\r\n    --swiper-pagination-color: #000000\r\n}\r\n\r\n.swiper-pagination-lock {\r\n    display: none\r\n}\r\n\r\n.swiper-scrollbar {\r\n    border-radius: 10px;\r\n    position: relative;\r\n    -ms-touch-action: none;\r\n    background: rgba(0, 0, 0, .1)\r\n}\r\n\r\n.swiper-container-horizontal>.swiper-scrollbar {\r\n    position: absolute;\r\n    left: 1%;\r\n    bottom: 3px;\r\n    z-index: 50;\r\n    height: 5px;\r\n    width: 98%\r\n}\r\n\r\n.swiper-container-vertical>.swiper-scrollbar {\r\n    position: absolute;\r\n    right: 3px;\r\n    top: 1%;\r\n    z-index: 50;\r\n    width: 5px;\r\n    height: 98%\r\n}\r\n\r\n.swiper-scrollbar-drag {\r\n    height: 100%;\r\n    width: 100%;\r\n    position: relative;\r\n    background: rgba(0, 0, 0, .5);\r\n    border-radius: 10px;\r\n    left: 0;\r\n    top: 0\r\n}\r\n\r\n.swiper-scrollbar-cursor-drag {\r\n    cursor: move\r\n}\r\n\r\n.swiper-scrollbar-lock {\r\n    display: none\r\n}\r\n\r\n.swiper-zoom-container {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center\r\n}\r\n\r\n.swiper-zoom-container>canvas,\r\n.swiper-zoom-container>img,\r\n.swiper-zoom-container>svg {\r\n    max-width: 100%;\r\n    max-height: 100%;\r\n    object-fit: contain\r\n}\r\n\r\n.swiper-slide-zoomed {\r\n    cursor: move\r\n}\r\n\r\n.swiper-lazy-preloader {\r\n    width: 42px;\r\n    height: 42px;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    margin-left: -21px;\r\n    margin-top: -21px;\r\n    z-index: 10;\r\n    transform-origin: 50%;\r\n    animation: swiper-preloader-spin 1s infinite linear;\r\n    box-sizing: border-box;\r\n    border: 4px solid var(--swiper-preloader-color, var(--swiper-theme-color));\r\n    border-radius: 50%;\r\n    border-top-color: transparent\r\n}\r\n\r\n.swiper-lazy-preloader-white {\r\n    --swiper-preloader-color: #fff\r\n}\r\n\r\n.swiper-lazy-preloader-black {\r\n    --swiper-preloader-color: #000\r\n}\r\n\r\n@keyframes swiper-preloader-spin {\r\n    100% {\r\n        transform: rotate(360deg)\r\n    }\r\n}\r\n\r\n.swiper-container .swiper-notification {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    pointer-events: none;\r\n    opacity: 0;\r\n    z-index: -1000\r\n}\r\n\r\n.swiper-container-fade.swiper-container-free-mode .swiper-slide {\r\n    transition-timing-function: ease-out\r\n}\r\n\r\n.swiper-container-fade .swiper-slide {\r\n    pointer-events: none;\r\n    transition-property: opacity\r\n}\r\n\r\n.swiper-container-fade .swiper-slide .swiper-slide {\r\n    pointer-events: none\r\n}\r\n\r\n.swiper-container-fade .swiper-slide-active,\r\n.swiper-container-fade .swiper-slide-active .swiper-slide-active {\r\n    pointer-events: auto\r\n}\r\n\r\n.swiper-container-cube {\r\n    overflow: visible\r\n}\r\n\r\n.swiper-container-cube .swiper-slide {\r\n    pointer-events: none;\r\n    -webkit-backface-visibility: hidden;\r\n    backface-visibility: hidden;\r\n    z-index: 1;\r\n    visibility: hidden;\r\n    transform-origin: 0 0;\r\n    width: 100%;\r\n    height: 100%\r\n}\r\n\r\n.swiper-container-cube .swiper-slide .swiper-slide {\r\n    pointer-events: none\r\n}\r\n\r\n.swiper-container-cube.swiper-container-rtl .swiper-slide {\r\n    transform-origin: 100% 0\r\n}\r\n\r\n.swiper-container-cube .swiper-slide-active,\r\n.swiper-container-cube .swiper-slide-active .swiper-slide-active {\r\n    pointer-events: auto\r\n}\r\n\r\n.swiper-container-cube .swiper-slide-active,\r\n.swiper-container-cube .swiper-slide-next,\r\n.swiper-container-cube .swiper-slide-next+.swiper-slide,\r\n.swiper-container-cube .swiper-slide-prev {\r\n    pointer-events: auto;\r\n    visibility: visible\r\n}\r\n\r\n.swiper-container-cube .swiper-slide-shadow-bottom,\r\n.swiper-container-cube .swiper-slide-shadow-left,\r\n.swiper-container-cube .swiper-slide-shadow-right,\r\n.swiper-container-cube .swiper-slide-shadow-top {\r\n    z-index: 0;\r\n    -webkit-backface-visibility: hidden;\r\n    backface-visibility: hidden\r\n}\r\n\r\n.swiper-container-cube .swiper-cube-shadow {\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 0px;\r\n    width: 100%;\r\n    height: 100%;\r\n    opacity: .6;\r\n    z-index: 0\r\n}\r\n\r\n.swiper-container-cube .swiper-cube-shadow:before {\r\n    content: '';\r\n    background: #000;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    filter: blur(50px)\r\n}\r\n\r\n.swiper-container-flip {\r\n    overflow: visible\r\n}\r\n\r\n.swiper-container-flip .swiper-slide {\r\n    pointer-events: none;\r\n    -webkit-backface-visibility: hidden;\r\n    backface-visibility: hidden;\r\n    z-index: 1\r\n}\r\n\r\n.swiper-container-flip .swiper-slide .swiper-slide {\r\n    pointer-events: none\r\n}\r\n\r\n.swiper-container-flip .swiper-slide-active,\r\n.swiper-container-flip .swiper-slide-active .swiper-slide-active {\r\n    pointer-events: auto\r\n}\r\n\r\n.swiper-container-flip .swiper-slide-shadow-bottom,\r\n.swiper-container-flip .swiper-slide-shadow-left,\r\n.swiper-container-flip .swiper-slide-shadow-right,\r\n.swiper-container-flip .swiper-slide-shadow-top {\r\n    z-index: 0;\r\n    -webkit-backface-visibility: hidden;\r\n    backface-visibility: hidden\r\n}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:06.759Z",
        "time": 32.20999997574836,
        "timings": {
          "blocked": 26.173999988559633,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.666000006634743,
          "receive": 4.369999980553985,
          "_blocked_queueing": 11.915999988559633,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 10820
              },
              {
                "functionName": "UIActions.preloadResources",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 10971
              },
              {
                "functionName": "moveNextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 21320
              },
              {
                "functionName": "actions",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2190
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7238
              },
              {
                "functionName": "nextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20922
              },
              {
                "functionName": "displayLoginPage",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20504
              },
              {
                "functionName": "entry",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2105
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7398
              },
              {
                "functionName": "r",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 19466
              }
            ],
            "parent": {
              "description": "postMessage",
              "callFrames": [
                {
                  "functionName": "completeEvent",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 26184
                },
                {
                  "functionName": "",
                  "scriptId": "57",
                  "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                  "lineNumber": 46,
                  "columnNumber": 44
                },
                {
                  "functionName": "dispatch",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 40034
                },
                {
                  "functionName": "ce.event.add.v.handle",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 38005
                }
              ]
            }
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/template/5074619029972904036/template_slide_overflow_v2.1.css?v=2",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018"
            }
          ],
          "queryString": [
            {
              "name": "v",
              "value": "2"
            }
          ],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "5991"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 17:41:45 GMT"
            },
            {
              "name": "etag",
              "value": "\"66a77cc5-1767\""
            },
            {
              "name": "content-type",
              "value": "text/css"
            },
            {
              "name": "last-modified",
              "value": "Mon, 29 Jul 2024 11:28:05 GMT"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 5991,
            "mimeType": "text/css",
            "text": ".modal {\r\n  z-index: 9999999;\r\n}\r\n\r\n/* * {\r\n  margin: 0 auto;\r\n} */\r\n\r\n.loginpage-container {\r\n  padding-bottom: 32px;\r\n}\r\n\r\nimg {\r\n  max-width: 100%;\r\n  vertical-align: middle;\r\n  height: initial;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.swiper-container {\r\n  max-width: 600px;\r\n  /* height: initial; */\r\n  padding-bottom: 0px;\r\n}\r\n\r\n.body-container {\r\n  max-width: 600px;\r\n  min-height: 880px;\r\n}\r\n\r\n.wa-button,\r\n#banner {\r\n  cursor: pointer;\r\n}\r\n\r\n.wa-button {\r\n  height: 45px;\r\n  font-size: 14px;\r\n}\r\n\r\n.swiper-pagination {\r\n  top: -20px;\r\n  width: 100%;\r\n}\r\n\r\n.wa-button-slide {\r\n  color: rgb(0, 0, 0);\r\n  text-align: center;\r\n  height: 45px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  display: block;\r\n  margin: auto;\r\n  margin-top: 0.2em;\r\n  width: 80%;\r\n  background-color: #ffffff;\r\n  border: 1px solid rgb(0, 0, 0);\r\n}\r\n\r\n.swiper-pagination-clickable .swiper-pagination-bullet {\r\n  outline: none;\r\n  margin: 0 5px;\r\n  background: red;\r\n}\r\n\r\n.blur {\r\n  -webkit-filter: brightness(0.6);\r\n  filter: brightness(0.6);\r\n}\r\n\r\n.user-not-interest {\r\n  text-align: center;\r\n  text-decoration: underline;\r\n  color: blue;\r\n  margin: 10px auto;\r\n}\r\n\r\n/* .banner-container {\r\n  border-radius: 3px;\r\n} */\r\n.wa-button,\r\n#banner {\r\n  cursor: pointer;\r\n}\r\n\r\n.wa-button {\r\n  height: 45px;\r\n  font-size: 14px;\r\n}\r\n\r\n.wa-accept-connection-terms {\r\n  height: 60px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.wa-accept-connection-slide {\r\n  bottom: 0;\r\n  box-sizing: content-box;\r\n  position: absolute;\r\n  z-index: 99999999;\r\n}\r\n\r\n.wa-hotline {\r\n  background: #f5f5f5;\r\n}\r\n\r\n.wa-button-banner-icon {\r\n  position: absolute;\r\n  width: 32px;\r\n  height: 32px;\r\n  display: none;\r\n}\r\n\r\n.wa-button-default .wa-button-banner-icon {\r\n  display: block;\r\n}\r\n\r\n.awing_continue_scroll_2 {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  z-index: 9;\r\n  width: 34px;\r\n  -webkit-animation: sdb06 2s infinite;\r\n  animation: sdb06 2s infinite;\r\n  right: 27%;\r\n  transition: 0.5s;\r\n  -webkit-transition: 0.5s;\r\n}\r\n\r\n.st0 {\r\n  stroke: #000000;\r\n  stroke-width: 16;\r\n  stroke-miterlimit: 10;\r\n}\r\n\r\n.cls-1,\r\n.cls-2 {\r\n  fill: none;\r\n  stroke: #231f20;\r\n  stroke-linecap: round;\r\n  stroke-linejoin: round;\r\n  stroke-width: 3px;\r\n}\r\n\r\n.cls-2 {\r\n  fill-rule: evenodd;\r\n}\r\n\r\n@-webkit-keyframes sdb06 {\r\n  0% {\r\n    -webkit-transform: translate(0, 0);\r\n    opacity: 0;\r\n  }\r\n\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n\r\n  100% {\r\n    -webkit-transform: translate(0, 20px);\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n@keyframes sdb06 {\r\n  0% {\r\n    transform: translate(0, 0);\r\n    opacity: 0;\r\n  }\r\n\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n\r\n  100% {\r\n    transform: translate(0, 20px);\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n/* @media only screen and (max-width: 768px) {\r\n  .wa-accept-connection-slide {\r\n    bottom: 9vw;\r\n  }\r\n}\r\n@media only screen and (max-width: 1024px) and (min-device-width: 769px) {\r\n  .wa-accept-connection-slide {\r\n    bottom: 7vw;\r\n  }\r\n} */\r\n@media only screen and (orientation:portrait) and (max-device-width: 1024px) and (min-device-width: 769px) {\r\n  .wa-accept-connection-slide {\r\n    top: 79.2vw;\r\n  }\r\n}\r\n\r\n@media only screen and (orientation:portrait) and (max-device-width: 768px) and (min-device-width: 651px) {\r\n  .wa-accept-connection-slide {\r\n    top: 105.2vw;\r\n  }\r\n}\r\n\r\n@media only screen and (orientation:landscape) and (max-device-width: 1024px) {\r\n  .wa-accept-connection-slide {\r\n    bottom: 0px;\r\n  }\r\n}\r\n\r\n@media (max-width: 800px) {\r\n  .wa-button-maxview {\r\n    width: 80%;\r\n  }\r\n\r\n  .wa-button-maxview-continue {\r\n    width: 67%;\r\n  }\r\n\r\n  .loginpage-container {\r\n    padding-bottom: 32px;\r\n  }\r\n\r\n  .awing_continue_scroll_2 {\r\n    right: 0px;\r\n  }\r\n\r\n  @media (max-aspect-ratio: 5/8) {\r\n    .banner-container {\r\n      position: absolute;\r\n      width: 100vw;\r\n      min-height: 147vw;\r\n      /* top: 0;\r\n      bottom: 32.4px; */\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 640px) {\r\n  img {\r\n    height: initial;\r\n  }\r\n\r\n  .swiper-slide {\r\n    background-size: contain !important;\r\n    background-repeat: no-repeat;\r\n    background-position: 0 50px !important;\r\n  }\r\n\r\n  .swiper-container {\r\n    width: 320px;\r\n    min-width: 100%;\r\n  }\r\n\r\n  .wa-button-slide {\r\n    width: 80%;\r\n    font-size: 14px;\r\n    margin-top: 5px;\r\n  }\r\n\r\n  .loginpage-container {\r\n    padding-bottom: 32px;\r\n  }\r\n\r\n  .wa-accept-connection-slide {\r\n    padding-bottom: 5px;\r\n    top: 133.5vw;\r\n  }\r\n\r\n  #continue_text {\r\n    font-size: 12px;\r\n  }\r\n\r\n  .user-not-interest {\r\n    font-size: 11px;\r\n  }\r\n}\r\n\r\n@media (max-width: 426px) {\r\n  .awing_continue_scroll_2 {\r\n    right: 0px;\r\n  }\r\n\r\n  .banner-container {\r\n    margin: 0 auto !important;\r\n    border-radius: 0 !important;\r\n  }\r\n\r\n  .loginpage-container {\r\n    padding-bottom: 32px;\r\n  }\r\n\r\n  .wa-accept-connection-terms {\r\n    margin-top: 20px;\r\n    padding-bottom: 20px;\r\n  }\r\n\r\n  .wa-hotline {\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n@media (max-width: 375px) {\r\n  .wa-button {\r\n    font-size: 12px !important;\r\n  }\r\n}\r\n\r\n@media (max-width: 320px) {\r\n  .wa-button {\r\n    height: 35px;\r\n    font-size: 10px !important;\r\n    margin-top: 2px;\r\n  }\r\n\r\n  .swiper-container-horizontal .swiper-pagination .swiper-pagination-bullet {\r\n    margin: 0px 3px;\r\n  }\r\n\r\n  .swiper-pagination-bullet {\r\n    width: 5px;\r\n    height: 5px;\r\n  }\r\n\r\n  .btn-arrow-right-icon {\r\n    max-width: 28px;\r\n  }\r\n}\r\n\r\n@media only screen and (orientation: landscape) {\r\n  .banner-container {\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    min-height: 880px !important;\r\n  }\r\n\r\n  .wa-button-maxview {\r\n    font-size: 14px !important;\r\n  }\r\n}\r\n\r\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) {\r\n  .awing_continue_scroll_2 {\r\n    right: 0px;\r\n  }\r\n}\r\n\r\n@media only screen and (min-device-width: 800px) and (max-device-width: 1366px) and (orientation: portrait) {\r\n  .awing_continue_scroll_2 {\r\n    right: 0px;\r\n  }\r\n}\r\n\r\n@media (max-width: 970px) and (min-width: 800px) {\r\n  .awing_continue_scroll_2 {\r\n    right: 0px;\r\n  }\r\n}\r\n\r\n@media (max-width: 1024px) {\r\n  .body-container {\r\n    min-height: 87vh;\r\n  }\r\n}"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:06.759Z",
        "time": 31.054000020958483,
        "timings": {
          "blocked": 26.79500001855567,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.7029999918267134,
          "receive": 3.556000010576099,
          "_blocked_queueing": 13.724000018555671,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "i",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 10820
              },
              {
                "functionName": "UIActions.preloadResources",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 11053
              },
              {
                "functionName": "moveNextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 21320
              },
              {
                "functionName": "actions",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2190
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7238
              },
              {
                "functionName": "nextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20922
              },
              {
                "functionName": "displayLoginPage",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20504
              },
              {
                "functionName": "entry",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2105
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7398
              },
              {
                "functionName": "r",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 19466
              }
            ],
            "parent": {
              "description": "postMessage",
              "callFrames": [
                {
                  "functionName": "completeEvent",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 26184
                },
                {
                  "functionName": "",
                  "scriptId": "57",
                  "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                  "lineNumber": 46,
                  "columnNumber": 44
                },
                {
                  "functionName": "dispatch",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 40034
                },
                {
                  "functionName": "ce.event.add.v.handle",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 38005
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/template/5074619029972904036/swiper-bundle.min.js",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "186680"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 17:41:45 GMT"
            },
            {
              "name": "etag",
              "value": "\"661f8f10-2d938\""
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "last-modified",
              "value": "Wed, 17 Apr 2024 08:57:52 GMT"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 186680,
            "mimeType": "application/javascript",
            "text": "/**\r\n * Swiper 6.5.6\r\n * Most modern mobile touch slider and framework with hardware accelerated transitions\r\n * https://swiperjs.com\r\n *\r\n * Copyright 2014-2021 Vladimir Kharlampidi\r\n *\r\n * Released under the MIT License\r\n *\r\n * Released on: April 9, 2021\r\n */\r\n\r\n! function(e, t) { \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : (e = \"undefined\" != typeof globalThis ? globalThis : e || self).Swiper = t() }(this, (function() { \"use strict\";\r\n\r\n    function e(e, t) { for (var a = 0; a < t.length; a++) { var i = t[a];\r\n            i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }\r\n\r\n    function t() { return (t = Object.assign || function(e) { for (var t = 1; t < arguments.length; t++) { var a = arguments[t]; for (var i in a) Object.prototype.hasOwnProperty.call(a, i) && (e[i] = a[i]) } return e }).apply(this, arguments) }\r\n\r\n    function a(e) { return null !== e && \"object\" == typeof e && \"constructor\" in e && e.constructor === Object }\r\n\r\n    function i(e, t) { void 0 === e && (e = {}), void 0 === t && (t = {}), Object.keys(t).forEach((function(s) { void 0 === e[s] ? e[s] = t[s] : a(t[s]) && a(e[s]) && Object.keys(t[s]).length > 0 && i(e[s], t[s]) })) } var s = { body: {}, addEventListener: function() {}, removeEventListener: function() {}, activeElement: { blur: function() {}, nodeName: \"\" }, querySelector: function() { return null }, querySelectorAll: function() { return [] }, getElementById: function() { return null }, createEvent: function() { return { initEvent: function() {} } }, createElement: function() { return { children: [], childNodes: [], style: {}, setAttribute: function() {}, getElementsByTagName: function() { return [] } } }, createElementNS: function() { return {} }, importNode: function() { return null }, location: { hash: \"\", host: \"\", hostname: \"\", href: \"\", origin: \"\", pathname: \"\", protocol: \"\", search: \"\" } };\r\n\r\n    function r() { var e = \"undefined\" != typeof document ? document : {}; return i(e, s), e } var n = { document: s, navigator: { userAgent: \"\" }, location: { hash: \"\", host: \"\", hostname: \"\", href: \"\", origin: \"\", pathname: \"\", protocol: \"\", search: \"\" }, history: { replaceState: function() {}, pushState: function() {}, go: function() {}, back: function() {} }, CustomEvent: function() { return this }, addEventListener: function() {}, removeEventListener: function() {}, getComputedStyle: function() { return { getPropertyValue: function() { return \"\" } } }, Image: function() {}, Date: function() {}, screen: {}, setTimeout: function() {}, clearTimeout: function() {}, matchMedia: function() { return {} }, requestAnimationFrame: function(e) { return \"undefined\" == typeof setTimeout ? (e(), null) : setTimeout(e, 0) }, cancelAnimationFrame: function(e) { \"undefined\" != typeof setTimeout && clearTimeout(e) } };\r\n\r\n    function o() { var e = \"undefined\" != typeof window ? window : {}; return i(e, n), e }\r\n\r\n    function l(e) { return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) { return e.__proto__ || Object.getPrototypeOf(e) })(e) }\r\n\r\n    function d(e, t) { return (d = Object.setPrototypeOf || function(e, t) { return e.__proto__ = t, e })(e, t) }\r\n\r\n    function p() { if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if (\"function\" == typeof Proxy) return !0; try { return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {}))), !0 } catch (e) { return !1 } }\r\n\r\n    function c(e, t, a) { return (c = p() ? Reflect.construct : function(e, t, a) { var i = [null];\r\n            i.push.apply(i, t); var s = new(Function.bind.apply(e, i)); return a && d(s, a.prototype), s }).apply(null, arguments) }\r\n\r\n    function u(e) { var t = \"function\" == typeof Map ? new Map : void 0; return (u = function(e) { if (null === e || (a = e, -1 === Function.toString.call(a).indexOf(\"[native code]\"))) return e; var a; if (\"function\" != typeof e) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== t) { if (t.has(e)) return t.get(e);\r\n                t.set(e, i) }\r\n\r\n            function i() { return c(e, arguments, l(this).constructor) } return i.prototype = Object.create(e.prototype, { constructor: { value: i, enumerable: !1, writable: !0, configurable: !0 } }), d(i, e) })(e) } var h = function(e) { var t, a;\r\n\r\n        function i(t) { var a, i, s; return a = e.call.apply(e, [this].concat(t)) || this, i = function(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e }(a), s = i.__proto__, Object.defineProperty(i, \"__proto__\", { get: function() { return s }, set: function(e) { s.__proto__ = e } }), a } return a = e, (t = i).prototype = Object.create(a.prototype), t.prototype.constructor = t, t.__proto__ = a, i }(u(Array));\r\n\r\n    function v(e) { void 0 === e && (e = []); var t = []; return e.forEach((function(e) { Array.isArray(e) ? t.push.apply(t, v(e)) : t.push(e) })), t }\r\n\r\n    function f(e, t) { return Array.prototype.filter.call(e, t) }\r\n\r\n    function m(e, t) { var a = o(),\r\n            i = r(),\r\n            s = []; if (!t && e instanceof h) return e; if (!e) return new h(s); if (\"string\" == typeof e) { var n = e.trim(); if (n.indexOf(\"<\") >= 0 && n.indexOf(\">\") >= 0) { var l = \"div\";\r\n                0 === n.indexOf(\"<li\") && (l = \"ul\"), 0 === n.indexOf(\"<tr\") && (l = \"tbody\"), 0 !== n.indexOf(\"<td\") && 0 !== n.indexOf(\"<th\") || (l = \"tr\"), 0 === n.indexOf(\"<tbody\") && (l = \"table\"), 0 === n.indexOf(\"<option\") && (l = \"select\"); var d = i.createElement(l);\r\n                d.innerHTML = n; for (var p = 0; p < d.childNodes.length; p += 1) s.push(d.childNodes[p]) } else s = function(e, t) { if (\"string\" != typeof e) return [e]; for (var a = [], i = t.querySelectorAll(e), s = 0; s < i.length; s += 1) a.push(i[s]); return a }(e.trim(), t || i) } else if (e.nodeType || e === a || e === i) s.push(e);\r\n        else if (Array.isArray(e)) { if (e instanceof h) return e;\r\n            s = e } return new h(function(e) { for (var t = [], a = 0; a < e.length; a += 1) - 1 === t.indexOf(e[a]) && t.push(e[a]); return t }(s)) } m.fn = h.prototype; var g, b, w, y = { addClass: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = v(t.map((function(e) { return e.split(\" \") }))); return this.forEach((function(e) { var t;\r\n                (t = e.classList).add.apply(t, i) })), this }, removeClass: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = v(t.map((function(e) { return e.split(\" \") }))); return this.forEach((function(e) { var t;\r\n                (t = e.classList).remove.apply(t, i) })), this }, hasClass: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = v(t.map((function(e) { return e.split(\" \") }))); return f(this, (function(e) { return i.filter((function(t) { return e.classList.contains(t) })).length > 0 })).length > 0 }, toggleClass: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = v(t.map((function(e) { return e.split(\" \") })));\r\n            this.forEach((function(e) { i.forEach((function(t) { e.classList.toggle(t) })) })) }, attr: function(e, t) { if (1 === arguments.length && \"string\" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0; for (var a = 0; a < this.length; a += 1)\r\n                if (2 === arguments.length) this[a].setAttribute(e, t);\r\n                else\r\n                    for (var i in e) this[a][i] = e[i], this[a].setAttribute(i, e[i]); return this }, removeAttr: function(e) { for (var t = 0; t < this.length; t += 1) this[t].removeAttribute(e); return this }, transform: function(e) { for (var t = 0; t < this.length; t += 1) this[t].style.transform = e; return this }, transition: function(e) { for (var t = 0; t < this.length; t += 1) this[t].style.transitionDuration = \"string\" != typeof e ? e + \"ms\" : e; return this }, on: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = t[0],\r\n                s = t[1],\r\n                r = t[2],\r\n                n = t[3];\r\n\r\n            function o(e) { var t = e.target; if (t) { var a = e.target.dom7EventData || []; if (a.indexOf(e) < 0 && a.unshift(e), m(t).is(s)) r.apply(t, a);\r\n                    else\r\n                        for (var i = m(t).parents(), n = 0; n < i.length; n += 1) m(i[n]).is(s) && r.apply(i[n], a) } }\r\n\r\n            function l(e) { var t = e && e.target && e.target.dom7EventData || [];\r\n                t.indexOf(e) < 0 && t.unshift(e), r.apply(this, t) } \"function\" == typeof t[1] && (i = t[0], r = t[1], n = t[2], s = void 0), n || (n = !1); for (var d, p = i.split(\" \"), c = 0; c < this.length; c += 1) { var u = this[c]; if (s)\r\n                    for (d = 0; d < p.length; d += 1) { var h = p[d];\r\n                        u.dom7LiveListeners || (u.dom7LiveListeners = {}), u.dom7LiveListeners[h] || (u.dom7LiveListeners[h] = []), u.dom7LiveListeners[h].push({ listener: r, proxyListener: o }), u.addEventListener(h, o, n) } else\r\n                        for (d = 0; d < p.length; d += 1) { var v = p[d];\r\n                            u.dom7Listeners || (u.dom7Listeners = {}), u.dom7Listeners[v] || (u.dom7Listeners[v] = []), u.dom7Listeners[v].push({ listener: r, proxyListener: l }), u.addEventListener(v, l, n) } } return this }, off: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = t[0],\r\n                s = t[1],\r\n                r = t[2],\r\n                n = t[3]; \"function\" == typeof t[1] && (i = t[0], r = t[1], n = t[2], s = void 0), n || (n = !1); for (var o = i.split(\" \"), l = 0; l < o.length; l += 1)\r\n                for (var d = o[l], p = 0; p < this.length; p += 1) { var c = this[p],\r\n                        u = void 0; if (!s && c.dom7Listeners ? u = c.dom7Listeners[d] : s && c.dom7LiveListeners && (u = c.dom7LiveListeners[d]), u && u.length)\r\n                        for (var h = u.length - 1; h >= 0; h -= 1) { var v = u[h];\r\n                            r && v.listener === r || r && v.listener && v.listener.dom7proxy && v.listener.dom7proxy === r ? (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1)) : r || (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1)) } }\r\n            return this }, trigger: function() { for (var e = o(), t = arguments.length, a = new Array(t), i = 0; i < t; i++) a[i] = arguments[i]; for (var s = a[0].split(\" \"), r = a[1], n = 0; n < s.length; n += 1)\r\n                for (var l = s[n], d = 0; d < this.length; d += 1) { var p = this[d]; if (e.CustomEvent) { var c = new e.CustomEvent(l, { detail: r, bubbles: !0, cancelable: !0 });\r\n                        p.dom7EventData = a.filter((function(e, t) { return t > 0 })), p.dispatchEvent(c), p.dom7EventData = [], delete p.dom7EventData } }\r\n            return this }, transitionEnd: function(e) { var t = this; return e && t.on(\"transitionend\", (function a(i) { i.target === this && (e.call(this, i), t.off(\"transitionend\", a)) })), this }, outerWidth: function(e) { if (this.length > 0) { if (e) { var t = this.styles(); return this[0].offsetWidth + parseFloat(t.getPropertyValue(\"margin-right\")) + parseFloat(t.getPropertyValue(\"margin-left\")) } return this[0].offsetWidth } return null }, outerHeight: function(e) { if (this.length > 0) { if (e) { var t = this.styles(); return this[0].offsetHeight + parseFloat(t.getPropertyValue(\"margin-top\")) + parseFloat(t.getPropertyValue(\"margin-bottom\")) } return this[0].offsetHeight } return null }, styles: function() { var e = o(); return this[0] ? e.getComputedStyle(this[0], null) : {} }, offset: function() { if (this.length > 0) { var e = o(),\r\n                    t = r(),\r\n                    a = this[0],\r\n                    i = a.getBoundingClientRect(),\r\n                    s = t.body,\r\n                    n = a.clientTop || s.clientTop || 0,\r\n                    l = a.clientLeft || s.clientLeft || 0,\r\n                    d = a === e ? e.scrollY : a.scrollTop,\r\n                    p = a === e ? e.scrollX : a.scrollLeft; return { top: i.top + d - n, left: i.left + p - l } } return null }, css: function(e, t) { var a, i = o(); if (1 === arguments.length) { if (\"string\" != typeof e) { for (a = 0; a < this.length; a += 1)\r\n                        for (var s in e) this[a].style[s] = e[s]; return this } if (this[0]) return i.getComputedStyle(this[0], null).getPropertyValue(e) } if (2 === arguments.length && \"string\" == typeof e) { for (a = 0; a < this.length; a += 1) this[a].style[e] = t; return this } return this }, each: function(e) { return e ? (this.forEach((function(t, a) { e.apply(t, [t, a]) })), this) : this }, html: function(e) { if (void 0 === e) return this[0] ? this[0].innerHTML : null; for (var t = 0; t < this.length; t += 1) this[t].innerHTML = e; return this }, text: function(e) { if (void 0 === e) return this[0] ? this[0].textContent.trim() : null; for (var t = 0; t < this.length; t += 1) this[t].textContent = e; return this }, is: function(e) { var t, a, i = o(),\r\n                s = r(),\r\n                n = this[0]; if (!n || void 0 === e) return !1; if (\"string\" == typeof e) { if (n.matches) return n.matches(e); if (n.webkitMatchesSelector) return n.webkitMatchesSelector(e); if (n.msMatchesSelector) return n.msMatchesSelector(e); for (t = m(e), a = 0; a < t.length; a += 1)\r\n                    if (t[a] === n) return !0; return !1 } if (e === s) return n === s; if (e === i) return n === i; if (e.nodeType || e instanceof h) { for (t = e.nodeType ? [e] : e, a = 0; a < t.length; a += 1)\r\n                    if (t[a] === n) return !0; return !1 } return !1 }, index: function() { var e, t = this[0]; if (t) { for (e = 0; null !== (t = t.previousSibling);) 1 === t.nodeType && (e += 1); return e } }, eq: function(e) { if (void 0 === e) return this; var t = this.length; if (e > t - 1) return m([]); if (e < 0) { var a = t + e; return m(a < 0 ? [] : [this[a]]) } return m([this[e]]) }, append: function() { for (var e, t = r(), a = 0; a < arguments.length; a += 1) { e = a < 0 || arguments.length <= a ? void 0 : arguments[a]; for (var i = 0; i < this.length; i += 1)\r\n                    if (\"string\" == typeof e) { var s = t.createElement(\"div\"); for (s.innerHTML = e; s.firstChild;) this[i].appendChild(s.firstChild) } else if (e instanceof h)\r\n                    for (var n = 0; n < e.length; n += 1) this[i].appendChild(e[n]);\r\n                else this[i].appendChild(e) } return this }, prepend: function(e) { var t, a, i = r(); for (t = 0; t < this.length; t += 1)\r\n                if (\"string\" == typeof e) { var s = i.createElement(\"div\"); for (s.innerHTML = e, a = s.childNodes.length - 1; a >= 0; a -= 1) this[t].insertBefore(s.childNodes[a], this[t].childNodes[0]) } else if (e instanceof h)\r\n                for (a = 0; a < e.length; a += 1) this[t].insertBefore(e[a], this[t].childNodes[0]);\r\n            else this[t].insertBefore(e, this[t].childNodes[0]); return this }, next: function(e) { return this.length > 0 ? e ? this[0].nextElementSibling && m(this[0].nextElementSibling).is(e) ? m([this[0].nextElementSibling]) : m([]) : this[0].nextElementSibling ? m([this[0].nextElementSibling]) : m([]) : m([]) }, nextAll: function(e) { var t = [],\r\n                a = this[0]; if (!a) return m([]); for (; a.nextElementSibling;) { var i = a.nextElementSibling;\r\n                e ? m(i).is(e) && t.push(i) : t.push(i), a = i } return m(t) }, prev: function(e) { if (this.length > 0) { var t = this[0]; return e ? t.previousElementSibling && m(t.previousElementSibling).is(e) ? m([t.previousElementSibling]) : m([]) : t.previousElementSibling ? m([t.previousElementSibling]) : m([]) } return m([]) }, prevAll: function(e) { var t = [],\r\n                a = this[0]; if (!a) return m([]); for (; a.previousElementSibling;) { var i = a.previousElementSibling;\r\n                e ? m(i).is(e) && t.push(i) : t.push(i), a = i } return m(t) }, parent: function(e) { for (var t = [], a = 0; a < this.length; a += 1) null !== this[a].parentNode && (e ? m(this[a].parentNode).is(e) && t.push(this[a].parentNode) : t.push(this[a].parentNode)); return m(t) }, parents: function(e) { for (var t = [], a = 0; a < this.length; a += 1)\r\n                for (var i = this[a].parentNode; i;) e ? m(i).is(e) && t.push(i) : t.push(i), i = i.parentNode; return m(t) }, closest: function(e) { var t = this; return void 0 === e ? m([]) : (t.is(e) || (t = t.parents(e).eq(0)), t) }, find: function(e) { for (var t = [], a = 0; a < this.length; a += 1) { try { var i = this[a].querySelectorAll(e) } catch (t) { console.log(e) } for (var s = 0; s < i.length; s += 1) t.push(i[s]) } return m(t) }, children: function(e) { for (var t = [], a = 0; a < this.length; a += 1)\r\n                for (var i = this[a].children, s = 0; s < i.length; s += 1) e && !m(i[s]).is(e) || t.push(i[s]); return m(t) }, filter: function(e) { return m(f(this, e)) }, remove: function() { for (var e = 0; e < this.length; e += 1) this[e].parentNode && this[e].parentNode.removeChild(this[e]); return this } };\r\n\r\n    function E(e, t) { return void 0 === t && (t = 0), setTimeout(e, t) }\r\n\r\n    function x() { return Date.now() }\r\n\r\n    function T(e, t) { void 0 === t && (t = \"x\"); var a, i, s, r = o(),\r\n            n = function(e) { var t, a = o(); return a.getComputedStyle && (t = a.getComputedStyle(e, null)), !t && e.currentStyle && (t = e.currentStyle), t || (t = e.style), t }(e); return r.WebKitCSSMatrix ? ((i = n.transform || n.webkitTransform).split(\",\").length > 6 && (i = i.split(\", \").map((function(e) { return e.replace(\",\", \".\") })).join(\", \")), s = new r.WebKitCSSMatrix(\"none\" === i ? \"\" : i)) : a = (s = n.MozTransform || n.OTransform || n.MsTransform || n.msTransform || n.transform || n.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\")).toString().split(\",\"), \"x\" === t && (i = r.WebKitCSSMatrix ? s.m41 : 16 === a.length ? parseFloat(a[12]) : parseFloat(a[4])), \"y\" === t && (i = r.WebKitCSSMatrix ? s.m42 : 16 === a.length ? parseFloat(a[13]) : parseFloat(a[5])), i || 0 }\r\n\r\n    function S(e) { return \"object\" == typeof e && null !== e && e.constructor && \"Object\" === Object.prototype.toString.call(e).slice(8, -1) }\r\n\r\n    function C() { for (var e = Object(arguments.length <= 0 ? void 0 : arguments[0]), t = [\"__proto__\", \"constructor\", \"prototype\"], a = 1; a < arguments.length; a += 1) { var i = a < 0 || arguments.length <= a ? void 0 : arguments[a]; if (null != i)\r\n                for (var s = Object.keys(Object(i)).filter((function(e) { return t.indexOf(e) < 0 })), r = 0, n = s.length; r < n; r += 1) { var o = s[r],\r\n                        l = Object.getOwnPropertyDescriptor(i, o);\r\n                    void 0 !== l && l.enumerable && (S(e[o]) && S(i[o]) ? i[o].__swiper__ ? e[o] = i[o] : C(e[o], i[o]) : !S(e[o]) && S(i[o]) ? (e[o] = {}, i[o].__swiper__ ? e[o] = i[o] : C(e[o], i[o])) : e[o] = i[o]) } } return e }\r\n\r\n    function M(e, t) { Object.keys(t).forEach((function(a) { S(t[a]) && Object.keys(t[a]).forEach((function(i) { \"function\" == typeof t[a][i] && (t[a][i] = t[a][i].bind(e)) })), e[a] = t[a] })) }\r\n\r\n    function z(e) { return void 0 === e && (e = \"\"), \".\" + e.trim().replace(/([\\.:\\/])/g, \"\\\\$1\").replace(/ /g, \".\") }\r\n\r\n    function P() { return g || (g = function() { var e = o(),\r\n                t = r(); return { touch: !!(\"ontouchstart\" in e || e.DocumentTouch && t instanceof e.DocumentTouch), pointerEvents: !!e.PointerEvent && \"maxTouchPoints\" in e.navigator && e.navigator.maxTouchPoints >= 0, observer: \"MutationObserver\" in e || \"WebkitMutationObserver\" in e, passiveListener: function() { var t = !1; try { var a = Object.defineProperty({}, \"passive\", { get: function() { t = !0 } });\r\n                        e.addEventListener(\"testPassiveListener\", null, a) } catch (e) {} return t }(), gestures: \"ongesturestart\" in e } }()), g }\r\n\r\n    function k(e) { return void 0 === e && (e = {}), b || (b = function(e) { var t = (void 0 === e ? {} : e).userAgent,\r\n                a = P(),\r\n                i = o(),\r\n                s = i.navigator.platform,\r\n                r = t || i.navigator.userAgent,\r\n                n = { ios: !1, android: !1 },\r\n                l = i.screen.width,\r\n                d = i.screen.height,\r\n                p = r.match(/(Android);?[\\s\\/]+([\\d.]+)?/),\r\n                c = r.match(/(iPad).*OS\\s([\\d_]+)/),\r\n                u = r.match(/(iPod)(.*OS\\s([\\d_]+))?/),\r\n                h = !c && r.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/),\r\n                v = \"Win32\" === s,\r\n                f = \"MacIntel\" === s; return !c && f && a.touch && [\"1024x1366\", \"1366x1024\", \"834x1194\", \"1194x834\", \"834x1112\", \"1112x834\", \"768x1024\", \"1024x768\", \"820x1180\", \"1180x820\", \"810x1080\", \"1080x810\"].indexOf(l + \"x\" + d) >= 0 && ((c = r.match(/(Version)\\/([\\d.]+)/)) || (c = [0, 1, \"13_0_0\"]), f = !1), p && !v && (n.os = \"android\", n.android = !0), (c || h || u) && (n.os = \"ios\", n.ios = !0), n }(e)), b }\r\n\r\n    function L() { return w || (w = function() { var e, t = o(); return { isEdge: !!t.navigator.userAgent.match(/Edge/g), isSafari: (e = t.navigator.userAgent.toLowerCase(), e.indexOf(\"safari\") >= 0 && e.indexOf(\"chrome\") < 0 && e.indexOf(\"android\") < 0), isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent) } }()), w } Object.keys(y).forEach((function(e) { Object.defineProperty(m.fn, e, { value: y[e], writable: !0 }) })); var $ = { name: \"resize\", create: function() { var e = this;\r\n                C(e, { resize: { observer: null, createObserver: function() { e && !e.destroyed && e.initialized && (e.resize.observer = new ResizeObserver((function(t) { var a = e.width,\r\n                                    i = e.height,\r\n                                    s = a,\r\n                                    r = i;\r\n                                t.forEach((function(t) { var a = t.contentBoxSize,\r\n                                        i = t.contentRect,\r\n                                        n = t.target;\r\n                                    n && n !== e.el || (s = i ? i.width : (a[0] || a).inlineSize, r = i ? i.height : (a[0] || a).blockSize) })), s === a && r === i || e.resize.resizeHandler() })), e.resize.observer.observe(e.el)) }, removeObserver: function() { e.resize.observer && e.resize.observer.unobserve && e.el && (e.resize.observer.unobserve(e.el), e.resize.observer = null) }, resizeHandler: function() { e && !e.destroyed && e.initialized && (e.emit(\"beforeResize\"), e.emit(\"resize\")) }, orientationChangeHandler: function() { e && !e.destroyed && e.initialized && e.emit(\"orientationchange\") } } }) }, on: { init: function(e) { var t = o();\r\n                    e.params.resizeObserver && void 0 !== o().ResizeObserver ? e.resize.createObserver() : (t.addEventListener(\"resize\", e.resize.resizeHandler), t.addEventListener(\"orientationchange\", e.resize.orientationChangeHandler)) }, destroy: function(e) { var t = o();\r\n                    e.resize.removeObserver(), t.removeEventListener(\"resize\", e.resize.resizeHandler), t.removeEventListener(\"orientationchange\", e.resize.orientationChangeHandler) } } },\r\n        I = { attach: function(e, t) { void 0 === t && (t = {}); var a = o(),\r\n                    i = this,\r\n                    s = new(a.MutationObserver || a.WebkitMutationObserver)((function(e) { if (1 !== e.length) { var t = function() { i.emit(\"observerUpdate\", e[0]) };\r\n                            a.requestAnimationFrame ? a.requestAnimationFrame(t) : a.setTimeout(t, 0) } else i.emit(\"observerUpdate\", e[0]) }));\r\n                s.observe(e, { attributes: void 0 === t.attributes || t.attributes, childList: void 0 === t.childList || t.childList, characterData: void 0 === t.characterData || t.characterData }), i.observer.observers.push(s) }, init: function() { var e = this; if (e.support.observer && e.params.observer) { if (e.params.observeParents)\r\n                        for (var t = e.$el.parents(), a = 0; a < t.length; a += 1) e.observer.attach(t[a]);\r\n                    e.observer.attach(e.$el[0], { childList: e.params.observeSlideChildren }), e.observer.attach(e.$wrapperEl[0], { attributes: !1 }) } }, destroy: function() { this.observer.observers.forEach((function(e) { e.disconnect() })), this.observer.observers = [] } },\r\n        O = { name: \"observer\", params: { observer: !1, observeParents: !1, observeSlideChildren: !1 }, create: function() { M(this, { observer: t({}, I, { observers: [] }) }) }, on: { init: function(e) { e.observer.init() }, destroy: function(e) { e.observer.destroy() } } };\r\n\r\n    function A(e) { var t = this,\r\n            a = r(),\r\n            i = o(),\r\n            s = t.touchEventsData,\r\n            n = t.params,\r\n            l = t.touches; if (!t.animating || !n.preventInteractionOnTransition) { var d = e;\r\n            d.originalEvent && (d = d.originalEvent); var p = m(d.target); if (\"wrapper\" !== n.touchEventsTarget || p.closest(t.wrapperEl).length)\r\n                if (s.isTouchEvent = \"touchstart\" === d.type, s.isTouchEvent || !(\"which\" in d) || 3 !== d.which)\r\n                    if (!(!s.isTouchEvent && \"button\" in d && d.button > 0))\r\n                        if (!s.isTouched || !s.isMoved)\r\n                            if (!!n.noSwipingClass && \"\" !== n.noSwipingClass && d.target && d.target.shadowRoot && e.path && e.path[0] && (p = m(e.path[0])), n.noSwiping && p.closest(n.noSwipingSelector ? n.noSwipingSelector : \".\" + n.noSwipingClass)[0]) t.allowClick = !0;\r\n                            else if (!n.swipeHandler || p.closest(n.swipeHandler)[0]) { l.currentX = \"touchstart\" === d.type ? d.targetTouches[0].pageX : d.pageX, l.currentY = \"touchstart\" === d.type ? d.targetTouches[0].pageY : d.pageY; var c = l.currentX,\r\n                    u = l.currentY,\r\n                    h = n.edgeSwipeDetection || n.iOSEdgeSwipeDetection,\r\n                    v = n.edgeSwipeThreshold || n.iOSEdgeSwipeThreshold; if (h && (c <= v || c >= i.innerWidth - v)) { if (\"prevent\" !== h) return;\r\n                    e.preventDefault() } if (C(s, { isTouched: !0, isMoved: !1, allowTouchCallbacks: !0, isScrolling: void 0, startMoving: void 0 }), l.startX = c, l.startY = u, s.touchStartTime = x(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, n.threshold > 0 && (s.allowThresholdMove = !1), \"touchstart\" !== d.type) { var f = !0;\r\n                    p.is(s.formElements) && (f = !1), a.activeElement && m(a.activeElement).is(s.formElements) && a.activeElement !== p[0] && a.activeElement.blur(); var g = f && t.allowTouchMove && n.touchStartPreventDefault;!n.touchStartForcePreventDefault && !g || p[0].isContentEditable || d.preventDefault() } t.emit(\"touchStart\", d) } } }\r\n\r\n    function D(e) { var t = r(),\r\n            a = this,\r\n            i = a.touchEventsData,\r\n            s = a.params,\r\n            n = a.touches,\r\n            o = a.rtlTranslate,\r\n            l = e; if (l.originalEvent && (l = l.originalEvent), i.isTouched) { if (!i.isTouchEvent || \"touchmove\" === l.type) { var d = \"touchmove\" === l.type && l.targetTouches && (l.targetTouches[0] || l.changedTouches[0]),\r\n                    p = \"touchmove\" === l.type ? d.pageX : l.pageX,\r\n                    c = \"touchmove\" === l.type ? d.pageY : l.pageY; if (l.preventedByNestedSwiper) return n.startX = p, void(n.startY = c); if (!a.allowTouchMove) return a.allowClick = !1, void(i.isTouched && (C(n, { startX: p, startY: c, currentX: p, currentY: c }), i.touchStartTime = x())); if (i.isTouchEvent && s.touchReleaseOnEdges && !s.loop)\r\n                    if (a.isVertical()) { if (c < n.startY && a.translate <= a.maxTranslate() || c > n.startY && a.translate >= a.minTranslate()) return i.isTouched = !1, void(i.isMoved = !1) } else if (p < n.startX && a.translate <= a.maxTranslate() || p > n.startX && a.translate >= a.minTranslate()) return; if (i.isTouchEvent && t.activeElement && l.target === t.activeElement && m(l.target).is(i.formElements)) return i.isMoved = !0, void(a.allowClick = !1); if (i.allowTouchCallbacks && a.emit(\"touchMove\", l), !(l.targetTouches && l.targetTouches.length > 1)) { n.currentX = p, n.currentY = c; var u = n.currentX - n.startX,\r\n                        h = n.currentY - n.startY; if (!(a.params.threshold && Math.sqrt(Math.pow(u, 2) + Math.pow(h, 2)) < a.params.threshold)) { var v; if (void 0 === i.isScrolling) a.isHorizontal() && n.currentY === n.startY || a.isVertical() && n.currentX === n.startX ? i.isScrolling = !1 : u * u + h * h >= 25 && (v = 180 * Math.atan2(Math.abs(h), Math.abs(u)) / Math.PI, i.isScrolling = a.isHorizontal() ? v > s.touchAngle : 90 - v > s.touchAngle); if (i.isScrolling && a.emit(\"touchMoveOpposite\", l), void 0 === i.startMoving && (n.currentX === n.startX && n.currentY === n.startY || (i.startMoving = !0)), i.isScrolling) i.isTouched = !1;\r\n                        else if (i.startMoving) { a.allowClick = !1, !s.cssMode && l.cancelable && l.preventDefault(), s.touchMoveStopPropagation && !s.nested && l.stopPropagation(), i.isMoved || (s.loop && a.loopFix(), i.startTranslate = a.getTranslate(), a.setTransition(0), a.animating && a.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\"), i.allowMomentumBounce = !1, !s.grabCursor || !0 !== a.allowSlideNext && !0 !== a.allowSlidePrev || a.setGrabCursor(!0), a.emit(\"sliderFirstMove\", l)), a.emit(\"sliderMove\", l), i.isMoved = !0; var f = a.isHorizontal() ? u : h;\r\n                            n.diff = f, f *= s.touchRatio, o && (f = -f), a.swipeDirection = f > 0 ? \"prev\" : \"next\", i.currentTranslate = f + i.startTranslate; var g = !0,\r\n                                b = s.resistanceRatio; if (s.touchReleaseOnEdges && (b = 0), f > 0 && i.currentTranslate > a.minTranslate() ? (g = !1, s.resistance && (i.currentTranslate = a.minTranslate() - 1 + Math.pow(-a.minTranslate() + i.startTranslate + f, b))) : f < 0 && i.currentTranslate < a.maxTranslate() && (g = !1, s.resistance && (i.currentTranslate = a.maxTranslate() + 1 - Math.pow(a.maxTranslate() - i.startTranslate - f, b))), g && (l.preventedByNestedSwiper = !0), !a.allowSlideNext && \"next\" === a.swipeDirection && i.currentTranslate < i.startTranslate && (i.currentTranslate = i.startTranslate), !a.allowSlidePrev && \"prev\" === a.swipeDirection && i.currentTranslate > i.startTranslate && (i.currentTranslate = i.startTranslate), a.allowSlidePrev || a.allowSlideNext || (i.currentTranslate = i.startTranslate), s.threshold > 0) { if (!(Math.abs(f) > s.threshold || i.allowThresholdMove)) return void(i.currentTranslate = i.startTranslate); if (!i.allowThresholdMove) return i.allowThresholdMove = !0, n.startX = n.currentX, n.startY = n.currentY, i.currentTranslate = i.startTranslate, void(n.diff = a.isHorizontal() ? n.currentX - n.startX : n.currentY - n.startY) } s.followFinger && !s.cssMode && ((s.freeMode || s.watchSlidesProgress || s.watchSlidesVisibility) && (a.updateActiveIndex(), a.updateSlidesClasses()), s.freeMode && (0 === i.velocities.length && i.velocities.push({ position: n[a.isHorizontal() ? \"startX\" : \"startY\"], time: i.touchStartTime }), i.velocities.push({ position: n[a.isHorizontal() ? \"currentX\" : \"currentY\"], time: x() })), a.updateProgress(i.currentTranslate), a.setTranslate(i.currentTranslate)) } } } } } else i.startMoving && i.isScrolling && a.emit(\"touchMoveOpposite\", l) }\r\n\r\n    function N(e) { var t = this,\r\n            a = t.touchEventsData,\r\n            i = t.params,\r\n            s = t.touches,\r\n            r = t.rtlTranslate,\r\n            n = t.$wrapperEl,\r\n            o = t.slidesGrid,\r\n            l = t.snapGrid,\r\n            d = e; if (d.originalEvent && (d = d.originalEvent), a.allowTouchCallbacks && t.emit(\"touchEnd\", d), a.allowTouchCallbacks = !1, !a.isTouched) return a.isMoved && i.grabCursor && t.setGrabCursor(!1), a.isMoved = !1, void(a.startMoving = !1);\r\n        i.grabCursor && a.isMoved && a.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1); var p, c = x(),\r\n            u = c - a.touchStartTime; if (t.allowClick && (t.updateClickedSlide(d), t.emit(\"tap click\", d), u < 300 && c - a.lastClickTime < 300 && t.emit(\"doubleTap doubleClick\", d)), a.lastClickTime = x(), E((function() { t.destroyed || (t.allowClick = !0) })), !a.isTouched || !a.isMoved || !t.swipeDirection || 0 === s.diff || a.currentTranslate === a.startTranslate) return a.isTouched = !1, a.isMoved = !1, void(a.startMoving = !1); if (a.isTouched = !1, a.isMoved = !1, a.startMoving = !1, p = i.followFinger ? r ? t.translate : -t.translate : -a.currentTranslate, !i.cssMode)\r\n            if (i.freeMode) { if (p < -t.minTranslate()) return void t.slideTo(t.activeIndex); if (p > -t.maxTranslate()) return void(t.slides.length < l.length ? t.slideTo(l.length - 1) : t.slideTo(t.slides.length - 1)); if (i.freeModeMomentum) { if (a.velocities.length > 1) { var h = a.velocities.pop(),\r\n                            v = a.velocities.pop(),\r\n                            f = h.position - v.position,\r\n                            m = h.time - v.time;\r\n                        t.velocity = f / m, t.velocity /= 2, Math.abs(t.velocity) < i.freeModeMinimumVelocity && (t.velocity = 0), (m > 150 || x() - h.time > 300) && (t.velocity = 0) } else t.velocity = 0;\r\n                    t.velocity *= i.freeModeMomentumVelocityRatio, a.velocities.length = 0; var g = 1e3 * i.freeModeMomentumRatio,\r\n                        b = t.velocity * g,\r\n                        w = t.translate + b;\r\n                    r && (w = -w); var y, T, S = !1,\r\n                        C = 20 * Math.abs(t.velocity) * i.freeModeMomentumBounceRatio; if (w < t.maxTranslate()) i.freeModeMomentumBounce ? (w + t.maxTranslate() < -C && (w = t.maxTranslate() - C), y = t.maxTranslate(), S = !0, a.allowMomentumBounce = !0) : w = t.maxTranslate(), i.loop && i.centeredSlides && (T = !0);\r\n                    else if (w > t.minTranslate()) i.freeModeMomentumBounce ? (w - t.minTranslate() > C && (w = t.minTranslate() + C), y = t.minTranslate(), S = !0, a.allowMomentumBounce = !0) : w = t.minTranslate(), i.loop && i.centeredSlides && (T = !0);\r\n                    else if (i.freeModeSticky) { for (var M, z = 0; z < l.length; z += 1)\r\n                            if (l[z] > -w) { M = z; break } w = -(w = Math.abs(l[M] - w) < Math.abs(l[M - 1] - w) || \"next\" === t.swipeDirection ? l[M] : l[M - 1]) } if (T && t.once(\"transitionEnd\", (function() { t.loopFix() })), 0 !== t.velocity) { if (g = r ? Math.abs((-w - t.translate) / t.velocity) : Math.abs((w - t.translate) / t.velocity), i.freeModeSticky) { var P = Math.abs((r ? -w : w) - t.translate),\r\n                                k = t.slidesSizesGrid[t.activeIndex];\r\n                            g = P < k ? i.speed : P < 2 * k ? 1.5 * i.speed : 2.5 * i.speed } } else if (i.freeModeSticky) return void t.slideToClosest();\r\n                    i.freeModeMomentumBounce && S ? (t.updateProgress(y), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating = !0, n.transitionEnd((function() { t && !t.destroyed && a.allowMomentumBounce && (t.emit(\"momentumBounce\"), t.setTransition(i.speed), setTimeout((function() { t.setTranslate(y), n.transitionEnd((function() { t && !t.destroyed && t.transitionEnd() })) }), 0)) }))) : t.velocity ? (t.updateProgress(w), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, n.transitionEnd((function() { t && !t.destroyed && t.transitionEnd() })))) : (t.emit(\"_freeModeNoMomentumRelease\"), t.updateProgress(w)), t.updateActiveIndex(), t.updateSlidesClasses() } else { if (i.freeModeSticky) return void t.slideToClosest();\r\n                    i.freeMode && t.emit(\"_freeModeNoMomentumRelease\") }(!i.freeModeMomentum || u >= i.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses()) } else { for (var L = 0, $ = t.slidesSizesGrid[0], I = 0; I < o.length; I += I < i.slidesPerGroupSkip ? 1 : i.slidesPerGroup) { var O = I < i.slidesPerGroupSkip - 1 ? 1 : i.slidesPerGroup;\r\n                    void 0 !== o[I + O] ? p >= o[I] && p < o[I + O] && (L = I, $ = o[I + O] - o[I]) : p >= o[I] && (L = I, $ = o[o.length - 1] - o[o.length - 2]) } var A = (p - o[L]) / $,\r\n                    D = L < i.slidesPerGroupSkip - 1 ? 1 : i.slidesPerGroup; if (u > i.longSwipesMs) { if (!i.longSwipes) return void t.slideTo(t.activeIndex); \"next\" === t.swipeDirection && (A >= i.longSwipesRatio ? t.slideTo(L + D) : t.slideTo(L)), \"prev\" === t.swipeDirection && (A > 1 - i.longSwipesRatio ? t.slideTo(L + D) : t.slideTo(L)) } else { if (!i.shortSwipes) return void t.slideTo(t.activeIndex);\r\n                    t.navigation && (d.target === t.navigation.nextEl || d.target === t.navigation.prevEl) ? d.target === t.navigation.nextEl ? t.slideTo(L + D) : t.slideTo(L) : (\"next\" === t.swipeDirection && t.slideTo(L + D), \"prev\" === t.swipeDirection && t.slideTo(L)) } } }\r\n\r\n    function G() { var e = this,\r\n            t = e.params,\r\n            a = e.el; if (!a || 0 !== a.offsetWidth) { t.breakpoints && e.setBreakpoint(); var i = e.allowSlideNext,\r\n                s = e.allowSlidePrev,\r\n                r = e.snapGrid;\r\n            e.allowSlideNext = !0, e.allowSlidePrev = !0, e.updateSize(), e.updateSlides(), e.updateSlidesClasses(), (\"auto\" === t.slidesPerView || t.slidesPerView > 1) && e.isEnd && !e.isBeginning && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0), e.autoplay && e.autoplay.running && e.autoplay.paused && e.autoplay.run(), e.allowSlidePrev = s, e.allowSlideNext = i, e.params.watchOverflow && r !== e.snapGrid && e.checkOverflow() } }\r\n\r\n    function B(e) { var t = this;\r\n        t.allowClick || (t.params.preventClicks && e.preventDefault(), t.params.preventClicksPropagation && t.animating && (e.stopPropagation(), e.stopImmediatePropagation())) }\r\n\r\n    function H() { var e = this,\r\n            t = e.wrapperEl,\r\n            a = e.rtlTranslate;\r\n        e.previousTranslate = e.translate, e.isHorizontal() ? e.translate = a ? t.scrollWidth - t.offsetWidth - t.scrollLeft : -t.scrollLeft : e.translate = -t.scrollTop, -0 === e.translate && (e.translate = 0), e.updateActiveIndex(), e.updateSlidesClasses(); var i = e.maxTranslate() - e.minTranslate();\r\n        (0 === i ? 0 : (e.translate - e.minTranslate()) / i) !== e.progress && e.updateProgress(a ? -e.translate : e.translate), e.emit(\"setTranslate\", e.translate, !1) } var X = !1;\r\n\r\n    function Y() {} var R = { init: !0, direction: \"horizontal\", touchEventsTarget: \"container\", initialSlide: 0, speed: 300, cssMode: !1, updateOnWindowResize: !0, resizeObserver: !1, nested: !1, width: null, height: null, preventInteractionOnTransition: !1, userAgent: null, url: null, edgeSwipeDetection: !1, edgeSwipeThreshold: 20, freeMode: !1, freeModeMomentum: !0, freeModeMomentumRatio: 1, freeModeMomentumBounce: !0, freeModeMomentumBounceRatio: 1, freeModeMomentumVelocityRatio: 1, freeModeSticky: !1, freeModeMinimumVelocity: .02, autoHeight: !1, setWrapperSize: !1, virtualTranslate: !1, effect: \"slide\", breakpoints: void 0, breakpointsBase: \"window\", spaceBetween: 0, slidesPerView: 1, slidesPerColumn: 1, slidesPerColumnFill: \"column\", slidesPerGroup: 1, slidesPerGroupSkip: 0, centeredSlides: !1, centeredSlidesBounds: !1, slidesOffsetBefore: 0, slidesOffsetAfter: 0, normalizeSlideIndex: !0, centerInsufficientSlides: !1, watchOverflow: !1, roundLengths: !1, touchRatio: 1, touchAngle: 45, simulateTouch: !0, shortSwipes: !0, longSwipes: !0, longSwipesRatio: .5, longSwipesMs: 300, followFinger: !0, allowTouchMove: !0, threshold: 0, touchMoveStopPropagation: !1, touchStartPreventDefault: !0, touchStartForcePreventDefault: !1, touchReleaseOnEdges: !1, uniqueNavElements: !0, resistance: !0, resistanceRatio: .85, watchSlidesProgress: !1, watchSlidesVisibility: !1, grabCursor: !1, preventClicks: !0, preventClicksPropagation: !0, slideToClickedSlide: !1, preloadImages: !0, updateOnImagesReady: !0, loop: !1, loopAdditionalSlides: 0, loopedSlides: null, loopFillGroupWithBlank: !1, loopPreventsSlide: !0, allowSlidePrev: !0, allowSlideNext: !0, swipeHandler: null, noSwiping: !0, noSwipingClass: \"swiper-no-swiping\", noSwipingSelector: null, passiveListeners: !0, containerModifierClass: \"swiper-container-\", slideClass: \"swiper-slide\", slideBlankClass: \"swiper-slide-invisible-blank\", slideActiveClass: \"swiper-slide-active\", slideDuplicateActiveClass: \"swiper-slide-duplicate-active\", slideVisibleClass: \"swiper-slide-visible\", slideDuplicateClass: \"swiper-slide-duplicate\", slideNextClass: \"swiper-slide-next\", slideDuplicateNextClass: \"swiper-slide-duplicate-next\", slidePrevClass: \"swiper-slide-prev\", slideDuplicatePrevClass: \"swiper-slide-duplicate-prev\", wrapperClass: \"swiper-wrapper\", runCallbacksOnInit: !0, _emitClasses: !1 },\r\n        V = { modular: { useParams: function(e) { var t = this;\r\n                    t.modules && Object.keys(t.modules).forEach((function(a) { var i = t.modules[a];\r\n                        i.params && C(e, i.params) })) }, useModules: function(e) { void 0 === e && (e = {}); var t = this;\r\n                    t.modules && Object.keys(t.modules).forEach((function(a) { var i = t.modules[a],\r\n                            s = e[a] || {};\r\n                        i.on && t.on && Object.keys(i.on).forEach((function(e) { t.on(e, i.on[e]) })), i.create && i.create.bind(t)(s) })) } }, eventsEmitter: { on: function(e, t, a) { var i = this; if (\"function\" != typeof t) return i; var s = a ? \"unshift\" : \"push\"; return e.split(\" \").forEach((function(e) { i.eventsListeners[e] || (i.eventsListeners[e] = []), i.eventsListeners[e][s](t) })), i }, once: function(e, t, a) { var i = this; if (\"function\" != typeof t) return i;\r\n\r\n                    function s() { i.off(e, s), s.__emitterProxy && delete s.__emitterProxy; for (var a = arguments.length, r = new Array(a), n = 0; n < a; n++) r[n] = arguments[n];\r\n                        t.apply(i, r) } return s.__emitterProxy = t, i.on(e, s, a) }, onAny: function(e, t) { var a = this; if (\"function\" != typeof e) return a; var i = t ? \"unshift\" : \"push\"; return a.eventsAnyListeners.indexOf(e) < 0 && a.eventsAnyListeners[i](e), a }, offAny: function(e) { var t = this; if (!t.eventsAnyListeners) return t; var a = t.eventsAnyListeners.indexOf(e); return a >= 0 && t.eventsAnyListeners.splice(a, 1), t }, off: function(e, t) { var a = this; return a.eventsListeners ? (e.split(\" \").forEach((function(e) { void 0 === t ? a.eventsListeners[e] = [] : a.eventsListeners[e] && a.eventsListeners[e].forEach((function(i, s) {\r\n                            (i === t || i.__emitterProxy && i.__emitterProxy === t) && a.eventsListeners[e].splice(s, 1) })) })), a) : a }, emit: function() { var e, t, a, i = this; if (!i.eventsListeners) return i; for (var s = arguments.length, r = new Array(s), n = 0; n < s; n++) r[n] = arguments[n]; \"string\" == typeof r[0] || Array.isArray(r[0]) ? (e = r[0], t = r.slice(1, r.length), a = i) : (e = r[0].events, t = r[0].data, a = r[0].context || i), t.unshift(a); var o = Array.isArray(e) ? e : e.split(\" \"); return o.forEach((function(e) { i.eventsAnyListeners && i.eventsAnyListeners.length && i.eventsAnyListeners.forEach((function(i) { i.apply(a, [e].concat(t)) })), i.eventsListeners && i.eventsListeners[e] && i.eventsListeners[e].forEach((function(e) { e.apply(a, t) })) })), i } }, update: { updateSize: function() { var e, t, a = this,\r\n                        i = a.$el;\r\n                    e = void 0 !== a.params.width && null !== a.params.width ? a.params.width : i[0].clientWidth, t = void 0 !== a.params.height && null !== a.params.height ? a.params.height : i[0].clientHeight, 0 === e && a.isHorizontal() || 0 === t && a.isVertical() || (e = e - parseInt(i.css(\"padding-left\") || 0, 10) - parseInt(i.css(\"padding-right\") || 0, 10), t = t - parseInt(i.css(\"padding-top\") || 0, 10) - parseInt(i.css(\"padding-bottom\") || 0, 10), Number.isNaN(e) && (e = 0), Number.isNaN(t) && (t = 0), C(a, { width: e, height: t, size: a.isHorizontal() ? e : t })) }, updateSlides: function() { var e = this,\r\n                        t = function(t) { return e.isHorizontal() ? t : { width: \"height\", \"margin-top\": \"margin-left\", \"margin-bottom \": \"margin-right\", \"margin-left\": \"margin-top\", \"margin-right\": \"margin-bottom\", \"padding-left\": \"padding-top\", \"padding-right\": \"padding-bottom\", marginRight: \"marginBottom\" } [t] },\r\n                        a = function(e, a) { return parseFloat(e.getPropertyValue(t(a)) || 0) },\r\n                        i = e.params,\r\n                        s = e.$wrapperEl,\r\n                        r = e.size,\r\n                        n = e.rtlTranslate,\r\n                        o = e.wrongRTL,\r\n                        l = e.virtual && i.virtual.enabled,\r\n                        d = l ? e.virtual.slides.length : e.slides.length,\r\n                        p = s.children(\".\" + e.params.slideClass),\r\n                        c = l ? e.virtual.slides.length : p.length,\r\n                        u = [],\r\n                        h = [],\r\n                        v = [],\r\n                        f = i.slidesOffsetBefore; \"function\" == typeof f && (f = i.slidesOffsetBefore.call(e)); var m = i.slidesOffsetAfter; \"function\" == typeof m && (m = i.slidesOffsetAfter.call(e)); var g = e.snapGrid.length,\r\n                        b = e.slidesGrid.length,\r\n                        w = i.spaceBetween,\r\n                        y = -f,\r\n                        E = 0,\r\n                        x = 0; if (void 0 !== r) { var T, S; \"string\" == typeof w && w.indexOf(\"%\") >= 0 && (w = parseFloat(w.replace(\"%\", \"\")) / 100 * r), e.virtualSize = -w, n ? p.css({ marginLeft: \"\", marginTop: \"\" }) : p.css({ marginRight: \"\", marginBottom: \"\" }), i.slidesPerColumn > 1 && (T = Math.floor(c / i.slidesPerColumn) === c / e.params.slidesPerColumn ? c : Math.ceil(c / i.slidesPerColumn) * i.slidesPerColumn, \"auto\" !== i.slidesPerView && \"row\" === i.slidesPerColumnFill && (T = Math.max(T, i.slidesPerView * i.slidesPerColumn))); for (var M, z, P, k = i.slidesPerColumn, L = T / k, $ = Math.floor(c / i.slidesPerColumn), I = 0; I < c; I += 1) { S = 0; var O = p.eq(I); if (i.slidesPerColumn > 1) { var A = void 0,\r\n                                    D = void 0,\r\n                                    N = void 0; if (\"row\" === i.slidesPerColumnFill && i.slidesPerGroup > 1) { var G = Math.floor(I / (i.slidesPerGroup * i.slidesPerColumn)),\r\n                                        B = I - i.slidesPerColumn * i.slidesPerGroup * G,\r\n                                        H = 0 === G ? i.slidesPerGroup : Math.min(Math.ceil((c - G * k * i.slidesPerGroup) / k), i.slidesPerGroup);\r\n                                    A = (D = B - (N = Math.floor(B / H)) * H + G * i.slidesPerGroup) + N * T / k, O.css({ \"-webkit-box-ordinal-group\": A, \"-moz-box-ordinal-group\": A, \"-ms-flex-order\": A, \"-webkit-order\": A, order: A }) } else \"column\" === i.slidesPerColumnFill ? (N = I - (D = Math.floor(I / k)) * k, (D > $ || D === $ && N === k - 1) && (N += 1) >= k && (N = 0, D += 1)) : D = I - (N = Math.floor(I / L)) * L;\r\n                                O.css(t(\"margin-top\"), 0 !== N && i.spaceBetween && i.spaceBetween + \"px\") } if (\"none\" !== O.css(\"display\")) { if (\"auto\" === i.slidesPerView) { var X = getComputedStyle(O[0]),\r\n                                        Y = O[0].style.transform,\r\n                                        R = O[0].style.webkitTransform; if (Y && (O[0].style.transform = \"none\"), R && (O[0].style.webkitTransform = \"none\"), i.roundLengths) S = e.isHorizontal() ? O.outerWidth(!0) : O.outerHeight(!0);\r\n                                    else { var V = a(X, \"width\"),\r\n                                            W = a(X, \"padding-left\"),\r\n                                            F = a(X, \"padding-right\"),\r\n                                            _ = a(X, \"margin-left\"),\r\n                                            q = a(X, \"margin-right\"),\r\n                                            j = X.getPropertyValue(\"box-sizing\"); if (j && \"border-box\" === j) S = V + _ + q;\r\n                                        else { var U = O[0],\r\n                                                K = U.clientWidth;\r\n                                            S = V + W + F + _ + q + (U.offsetWidth - K) } } Y && (O[0].style.transform = Y), R && (O[0].style.webkitTransform = R), i.roundLengths && (S = Math.floor(S)) } else S = (r - (i.slidesPerView - 1) * w) / i.slidesPerView, i.roundLengths && (S = Math.floor(S)), p[I] && (p[I].style[t(\"width\")] = S + \"px\");\r\n                                p[I] && (p[I].swiperSlideSize = S), v.push(S), i.centeredSlides ? (y = y + S / 2 + E / 2 + w, 0 === E && 0 !== I && (y = y - r / 2 - w), 0 === I && (y = y - r / 2 - w), Math.abs(y) < .001 && (y = 0), i.roundLengths && (y = Math.floor(y)), x % i.slidesPerGroup == 0 && u.push(y), h.push(y)) : (i.roundLengths && (y = Math.floor(y)), (x - Math.min(e.params.slidesPerGroupSkip, x)) % e.params.slidesPerGroup == 0 && u.push(y), h.push(y), y = y + S + w), e.virtualSize += S + w, E = S, x += 1 } } if (e.virtualSize = Math.max(e.virtualSize, r) + m, n && o && (\"slide\" === i.effect || \"coverflow\" === i.effect) && s.css({ width: e.virtualSize + i.spaceBetween + \"px\" }), i.setWrapperSize) s.css(((z = {})[t(\"width\")] = e.virtualSize + i.spaceBetween + \"px\", z)); if (i.slidesPerColumn > 1)\r\n                            if (e.virtualSize = (S + i.spaceBetween) * T, e.virtualSize = Math.ceil(e.virtualSize / i.slidesPerColumn) - i.spaceBetween, s.css(((P = {})[t(\"width\")] = e.virtualSize + i.spaceBetween + \"px\", P)), i.centeredSlides) { M = []; for (var Z = 0; Z < u.length; Z += 1) { var J = u[Z];\r\n                                    i.roundLengths && (J = Math.floor(J)), u[Z] < e.virtualSize + u[0] && M.push(J) } u = M } if (!i.centeredSlides) { M = []; for (var Q = 0; Q < u.length; Q += 1) { var ee = u[Q];\r\n                                i.roundLengths && (ee = Math.floor(ee)), u[Q] <= e.virtualSize - r && M.push(ee) } u = M, Math.floor(e.virtualSize - r) - Math.floor(u[u.length - 1]) > 1 && u.push(e.virtualSize - r) } if (0 === u.length && (u = [0]), 0 !== i.spaceBetween) { var te, ae = e.isHorizontal() && n ? \"marginLeft\" : t(\"marginRight\");\r\n                            p.filter((function(e, t) { return !i.cssMode || t !== p.length - 1 })).css(((te = {})[ae] = w + \"px\", te)) } if (i.centeredSlides && i.centeredSlidesBounds) { var ie = 0;\r\n                            v.forEach((function(e) { ie += e + (i.spaceBetween ? i.spaceBetween : 0) })); var se = (ie -= i.spaceBetween) - r;\r\n                            u = u.map((function(e) { return e < 0 ? -f : e > se ? se + m : e })) } if (i.centerInsufficientSlides) { var re = 0; if (v.forEach((function(e) { re += e + (i.spaceBetween ? i.spaceBetween : 0) })), (re -= i.spaceBetween) < r) { var ne = (r - re) / 2;\r\n                                u.forEach((function(e, t) { u[t] = e - ne })), h.forEach((function(e, t) { h[t] = e + ne })) } } C(e, { slides: p, snapGrid: u, slidesGrid: h, slidesSizesGrid: v }), c !== d && e.emit(\"slidesLengthChange\"), u.length !== g && (e.params.watchOverflow && e.checkOverflow(), e.emit(\"snapGridLengthChange\")), h.length !== b && e.emit(\"slidesGridLengthChange\"), (i.watchSlidesProgress || i.watchSlidesVisibility) && e.updateSlidesOffset() } }, updateAutoHeight: function(e) { var t, a = this,\r\n                        i = [],\r\n                        s = 0; if (\"number\" == typeof e ? a.setTransition(e) : !0 === e && a.setTransition(a.params.speed), \"auto\" !== a.params.slidesPerView && a.params.slidesPerView > 1)\r\n                        if (a.params.centeredSlides) a.visibleSlides.each((function(e) { i.push(e) }));\r\n                        else\r\n                            for (t = 0; t < Math.ceil(a.params.slidesPerView); t += 1) { var r = a.activeIndex + t; if (r > a.slides.length) break;\r\n                                i.push(a.slides.eq(r)[0]) } else i.push(a.slides.eq(a.activeIndex)[0]); for (t = 0; t < i.length; t += 1)\r\n                        if (void 0 !== i[t]) { var n = i[t].offsetHeight;\r\n                            s = n > s ? n : s } s && a.$wrapperEl.css(\"height\", s + \"px\") }, updateSlidesOffset: function() { for (var e = this.slides, t = 0; t < e.length; t += 1) e[t].swiperSlideOffset = this.isHorizontal() ? e[t].offsetLeft : e[t].offsetTop }, updateSlidesProgress: function(e) { void 0 === e && (e = this && this.translate || 0); var t = this,\r\n                        a = t.params,\r\n                        i = t.slides,\r\n                        s = t.rtlTranslate; if (0 !== i.length) { void 0 === i[0].swiperSlideOffset && t.updateSlidesOffset(); var r = -e;\r\n                        s && (r = e), i.removeClass(a.slideVisibleClass), t.visibleSlidesIndexes = [], t.visibleSlides = []; for (var n = 0; n < i.length; n += 1) { var o = i[n],\r\n                                l = (r + (a.centeredSlides ? t.minTranslate() : 0) - o.swiperSlideOffset) / (o.swiperSlideSize + a.spaceBetween); if (a.watchSlidesVisibility || a.centeredSlides && a.autoHeight) { var d = -(r - o.swiperSlideOffset),\r\n                                    p = d + t.slidesSizesGrid[n];\r\n                                (d >= 0 && d < t.size - 1 || p > 1 && p <= t.size || d <= 0 && p >= t.size) && (t.visibleSlides.push(o), t.visibleSlidesIndexes.push(n), i.eq(n).addClass(a.slideVisibleClass)) } o.progress = s ? -l : l } t.visibleSlides = m(t.visibleSlides) } }, updateProgress: function(e) { var t = this; if (void 0 === e) { var a = t.rtlTranslate ? -1 : 1;\r\n                        e = t && t.translate && t.translate * a || 0 } var i = t.params,\r\n                        s = t.maxTranslate() - t.minTranslate(),\r\n                        r = t.progress,\r\n                        n = t.isBeginning,\r\n                        o = t.isEnd,\r\n                        l = n,\r\n                        d = o;\r\n                    0 === s ? (r = 0, n = !0, o = !0) : (n = (r = (e - t.minTranslate()) / s) <= 0, o = r >= 1), C(t, { progress: r, isBeginning: n, isEnd: o }), (i.watchSlidesProgress || i.watchSlidesVisibility || i.centeredSlides && i.autoHeight) && t.updateSlidesProgress(e), n && !l && t.emit(\"reachBeginning toEdge\"), o && !d && t.emit(\"reachEnd toEdge\"), (l && !n || d && !o) && t.emit(\"fromEdge\"), t.emit(\"progress\", r) }, updateSlidesClasses: function() { var e, t = this,\r\n                        a = t.slides,\r\n                        i = t.params,\r\n                        s = t.$wrapperEl,\r\n                        r = t.activeIndex,\r\n                        n = t.realIndex,\r\n                        o = t.virtual && i.virtual.enabled;\r\n                    a.removeClass(i.slideActiveClass + \" \" + i.slideNextClass + \" \" + i.slidePrevClass + \" \" + i.slideDuplicateActiveClass + \" \" + i.slideDuplicateNextClass + \" \" + i.slideDuplicatePrevClass), (e = o ? t.$wrapperEl.find(\".\" + i.slideClass + '[data-swiper-slide-index=\"' + r + '\"]') : a.eq(r)).addClass(i.slideActiveClass), i.loop && (e.hasClass(i.slideDuplicateClass) ? s.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + n + '\"]').addClass(i.slideDuplicateActiveClass) : s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + n + '\"]').addClass(i.slideDuplicateActiveClass)); var l = e.nextAll(\".\" + i.slideClass).eq(0).addClass(i.slideNextClass);\r\n                    i.loop && 0 === l.length && (l = a.eq(0)).addClass(i.slideNextClass); var d = e.prevAll(\".\" + i.slideClass).eq(0).addClass(i.slidePrevClass);\r\n                    i.loop && 0 === d.length && (d = a.eq(-1)).addClass(i.slidePrevClass), i.loop && (l.hasClass(i.slideDuplicateClass) ? s.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + l.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicateNextClass) : s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + l.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicateNextClass), d.hasClass(i.slideDuplicateClass) ? s.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + d.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicatePrevClass) : s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + d.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicatePrevClass)), t.emitSlidesClasses() }, updateActiveIndex: function(e) { var t, a = this,\r\n                        i = a.rtlTranslate ? a.translate : -a.translate,\r\n                        s = a.slidesGrid,\r\n                        r = a.snapGrid,\r\n                        n = a.params,\r\n                        o = a.activeIndex,\r\n                        l = a.realIndex,\r\n                        d = a.snapIndex,\r\n                        p = e; if (void 0 === p) { for (var c = 0; c < s.length; c += 1) void 0 !== s[c + 1] ? i >= s[c] && i < s[c + 1] - (s[c + 1] - s[c]) / 2 ? p = c : i >= s[c] && i < s[c + 1] && (p = c + 1) : i >= s[c] && (p = c);\r\n                        n.normalizeSlideIndex && (p < 0 || void 0 === p) && (p = 0) } if (r.indexOf(i) >= 0) t = r.indexOf(i);\r\n                    else { var u = Math.min(n.slidesPerGroupSkip, p);\r\n                        t = u + Math.floor((p - u) / n.slidesPerGroup) } if (t >= r.length && (t = r.length - 1), p !== o) { var h = parseInt(a.slides.eq(p).attr(\"data-swiper-slide-index\") || p, 10);\r\n                        C(a, { snapIndex: t, realIndex: h, previousIndex: o, activeIndex: p }), a.emit(\"activeIndexChange\"), a.emit(\"snapIndexChange\"), l !== h && a.emit(\"realIndexChange\"), (a.initialized || a.params.runCallbacksOnInit) && a.emit(\"slideChange\") } else t !== d && (a.snapIndex = t, a.emit(\"snapIndexChange\")) }, updateClickedSlide: function(e) { var t, a = this,\r\n                        i = a.params,\r\n                        s = m(e.target).closest(\".\" + i.slideClass)[0],\r\n                        r = !1; if (s)\r\n                        for (var n = 0; n < a.slides.length; n += 1)\r\n                            if (a.slides[n] === s) { r = !0, t = n; break } if (!s || !r) return a.clickedSlide = void 0, void(a.clickedIndex = void 0);\r\n                    a.clickedSlide = s, a.virtual && a.params.virtual.enabled ? a.clickedIndex = parseInt(m(s).attr(\"data-swiper-slide-index\"), 10) : a.clickedIndex = t, i.slideToClickedSlide && void 0 !== a.clickedIndex && a.clickedIndex !== a.activeIndex && a.slideToClickedSlide() } }, translate: { getTranslate: function(e) { void 0 === e && (e = this.isHorizontal() ? \"x\" : \"y\"); var t = this,\r\n                        a = t.params,\r\n                        i = t.rtlTranslate,\r\n                        s = t.translate,\r\n                        r = t.$wrapperEl; if (a.virtualTranslate) return i ? -s : s; if (a.cssMode) return s; var n = T(r[0], e); return i && (n = -n), n || 0 }, setTranslate: function(e, t) { var a = this,\r\n                        i = a.rtlTranslate,\r\n                        s = a.params,\r\n                        r = a.$wrapperEl,\r\n                        n = a.wrapperEl,\r\n                        o = a.progress,\r\n                        l = 0,\r\n                        d = 0;\r\n                    a.isHorizontal() ? l = i ? -e : e : d = e, s.roundLengths && (l = Math.floor(l), d = Math.floor(d)), s.cssMode ? n[a.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = a.isHorizontal() ? -l : -d : s.virtualTranslate || r.transform(\"translate3d(\" + l + \"px, \" + d + \"px, 0px)\"), a.previousTranslate = a.translate, a.translate = a.isHorizontal() ? l : d; var p = a.maxTranslate() - a.minTranslate();\r\n                    (0 === p ? 0 : (e - a.minTranslate()) / p) !== o && a.updateProgress(e), a.emit(\"setTranslate\", a.translate, t) }, minTranslate: function() { return -this.snapGrid[0] }, maxTranslate: function() { return -this.snapGrid[this.snapGrid.length - 1] }, translateTo: function(e, t, a, i, s) { void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0), void 0 === i && (i = !0); var r = this,\r\n                        n = r.params,\r\n                        o = r.wrapperEl; if (r.animating && n.preventInteractionOnTransition) return !1; var l, d = r.minTranslate(),\r\n                        p = r.maxTranslate(); if (l = i && e > d ? d : i && e < p ? p : e, r.updateProgress(l), n.cssMode) { var c, u = r.isHorizontal(); if (0 === t) o[u ? \"scrollLeft\" : \"scrollTop\"] = -l;\r\n                        else if (o.scrollTo) o.scrollTo(((c = {})[u ? \"left\" : \"top\"] = -l, c.behavior = \"smooth\", c));\r\n                        else o[u ? \"scrollLeft\" : \"scrollTop\"] = -l; return !0 } return 0 === t ? (r.setTransition(0), r.setTranslate(l), a && (r.emit(\"beforeTransitionStart\", t, s), r.emit(\"transitionEnd\"))) : (r.setTransition(t), r.setTranslate(l), a && (r.emit(\"beforeTransitionStart\", t, s), r.emit(\"transitionStart\")), r.animating || (r.animating = !0, r.onTranslateToWrapperTransitionEnd || (r.onTranslateToWrapperTransitionEnd = function(e) { r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener(\"transitionend\", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", r.onTranslateToWrapperTransitionEnd), r.onTranslateToWrapperTransitionEnd = null, delete r.onTranslateToWrapperTransitionEnd, a && r.emit(\"transitionEnd\")) }), r.$wrapperEl[0].addEventListener(\"transitionend\", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", r.onTranslateToWrapperTransitionEnd))), !0 } }, transition: { setTransition: function(e, t) { var a = this;\r\n                    a.params.cssMode || a.$wrapperEl.transition(e), a.emit(\"setTransition\", e, t) }, transitionStart: function(e, t) { void 0 === e && (e = !0); var a = this,\r\n                        i = a.activeIndex,\r\n                        s = a.params,\r\n                        r = a.previousIndex; if (!s.cssMode) { s.autoHeight && a.updateAutoHeight(); var n = t; if (n || (n = i > r ? \"next\" : i < r ? \"prev\" : \"reset\"), a.emit(\"transitionStart\"), e && i !== r) { if (\"reset\" === n) return void a.emit(\"slideResetTransitionStart\");\r\n                            a.emit(\"slideChangeTransitionStart\"), \"next\" === n ? a.emit(\"slideNextTransitionStart\") : a.emit(\"slidePrevTransitionStart\") } } }, transitionEnd: function(e, t) { void 0 === e && (e = !0); var a = this,\r\n                        i = a.activeIndex,\r\n                        s = a.previousIndex,\r\n                        r = a.params; if (a.animating = !1, !r.cssMode) { a.setTransition(0); var n = t; if (n || (n = i > s ? \"next\" : i < s ? \"prev\" : \"reset\"), a.emit(\"transitionEnd\"), e && i !== s) { if (\"reset\" === n) return void a.emit(\"slideResetTransitionEnd\");\r\n                            a.emit(\"slideChangeTransitionEnd\"), \"next\" === n ? a.emit(\"slideNextTransitionEnd\") : a.emit(\"slidePrevTransitionEnd\") } } } }, slide: { slideTo: function(e, t, a, i) { if (void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0), \"number\" != typeof e && \"string\" != typeof e) throw new Error(\"The 'index' argument cannot have type other than 'number' or 'string'. [\" + typeof e + \"] given.\"); if (\"string\" == typeof e) { var s = parseInt(e, 10); if (!isFinite(s)) throw new Error(\"The passed-in 'index' (string) couldn't be converted to 'number'. [\" + e + \"] given.\");\r\n                        e = s } var r = this,\r\n                        n = e;\r\n                    n < 0 && (n = 0); var o = r.params,\r\n                        l = r.snapGrid,\r\n                        d = r.slidesGrid,\r\n                        p = r.previousIndex,\r\n                        c = r.activeIndex,\r\n                        u = r.rtlTranslate,\r\n                        h = r.wrapperEl; if (r.animating && o.preventInteractionOnTransition) return !1; var v = Math.min(r.params.slidesPerGroupSkip, n),\r\n                        f = v + Math.floor((n - v) / r.params.slidesPerGroup);\r\n                    f >= l.length && (f = l.length - 1), (c || o.initialSlide || 0) === (p || 0) && a && r.emit(\"beforeSlideChangeStart\"); var m, g = -l[f]; if (r.updateProgress(g), o.normalizeSlideIndex)\r\n                        for (var b = 0; b < d.length; b += 1) { var w = -Math.floor(100 * g),\r\n                                y = Math.floor(100 * d[b]),\r\n                                E = Math.floor(100 * d[b + 1]);\r\n                            void 0 !== d[b + 1] ? w >= y && w < E - (E - y) / 2 ? n = b : w >= y && w < E && (n = b + 1) : w >= y && (n = b) }\r\n                    if (r.initialized && n !== c) { if (!r.allowSlideNext && g < r.translate && g < r.minTranslate()) return !1; if (!r.allowSlidePrev && g > r.translate && g > r.maxTranslate() && (c || 0) !== n) return !1 } if (m = n > c ? \"next\" : n < c ? \"prev\" : \"reset\", u && -g === r.translate || !u && g === r.translate) return r.updateActiveIndex(n), o.autoHeight && r.updateAutoHeight(), r.updateSlidesClasses(), \"slide\" !== o.effect && r.setTranslate(g), \"reset\" !== m && (r.transitionStart(a, m), r.transitionEnd(a, m)), !1; if (o.cssMode) { var x, T = r.isHorizontal(),\r\n                            S = -g; if (u && (S = h.scrollWidth - h.offsetWidth - S), 0 === t) h[T ? \"scrollLeft\" : \"scrollTop\"] = S;\r\n                        else if (h.scrollTo) h.scrollTo(((x = {})[T ? \"left\" : \"top\"] = S, x.behavior = \"smooth\", x));\r\n                        else h[T ? \"scrollLeft\" : \"scrollTop\"] = S; return !0 } return 0 === t ? (r.setTransition(0), r.setTranslate(g), r.updateActiveIndex(n), r.updateSlidesClasses(), r.emit(\"beforeTransitionStart\", t, i), r.transitionStart(a, m), r.transitionEnd(a, m)) : (r.setTransition(t), r.setTranslate(g), r.updateActiveIndex(n), r.updateSlidesClasses(), r.emit(\"beforeTransitionStart\", t, i), r.transitionStart(a, m), r.animating || (r.animating = !0, r.onSlideToWrapperTransitionEnd || (r.onSlideToWrapperTransitionEnd = function(e) { r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener(\"transitionend\", r.onSlideToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", r.onSlideToWrapperTransitionEnd), r.onSlideToWrapperTransitionEnd = null, delete r.onSlideToWrapperTransitionEnd, r.transitionEnd(a, m)) }), r.$wrapperEl[0].addEventListener(\"transitionend\", r.onSlideToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", r.onSlideToWrapperTransitionEnd))), !0 }, slideToLoop: function(e, t, a, i) { void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0); var s = this,\r\n                        r = e; return s.params.loop && (r += s.loopedSlides), s.slideTo(r, t, a, i) }, slideNext: function(e, t, a) { void 0 === e && (e = this.params.speed), void 0 === t && (t = !0); var i = this,\r\n                        s = i.params,\r\n                        r = i.animating,\r\n                        n = i.activeIndex < s.slidesPerGroupSkip ? 1 : s.slidesPerGroup; if (s.loop) { if (r && s.loopPreventsSlide) return !1;\r\n                        i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft } return i.slideTo(i.activeIndex + n, e, t, a) }, slidePrev: function(e, t, a) { void 0 === e && (e = this.params.speed), void 0 === t && (t = !0); var i = this,\r\n                        s = i.params,\r\n                        r = i.animating,\r\n                        n = i.snapGrid,\r\n                        o = i.slidesGrid,\r\n                        l = i.rtlTranslate; if (s.loop) { if (r && s.loopPreventsSlide) return !1;\r\n                        i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft }\r\n\r\n                    function d(e) { return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e) } var p = d(l ? i.translate : -i.translate),\r\n                        c = n.map((function(e) { return d(e) }));\r\n                    n[c.indexOf(p)]; var u, h = n[c.indexOf(p) - 1]; return void 0 === h && s.cssMode && n.forEach((function(e) {!h && p >= e && (h = e) })), void 0 !== h && (u = o.indexOf(h)) < 0 && (u = i.activeIndex - 1), i.slideTo(u, e, t, a) }, slideReset: function(e, t, a) { return void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), this.slideTo(this.activeIndex, e, t, a) }, slideToClosest: function(e, t, a, i) { void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), void 0 === i && (i = .5); var s = this,\r\n                        r = s.activeIndex,\r\n                        n = Math.min(s.params.slidesPerGroupSkip, r),\r\n                        o = n + Math.floor((r - n) / s.params.slidesPerGroup),\r\n                        l = s.rtlTranslate ? s.translate : -s.translate; if (l >= s.snapGrid[o]) { var d = s.snapGrid[o];\r\n                        l - d > (s.snapGrid[o + 1] - d) * i && (r += s.params.slidesPerGroup) } else { var p = s.snapGrid[o - 1];\r\n                        l - p <= (s.snapGrid[o] - p) * i && (r -= s.params.slidesPerGroup) } return r = Math.max(r, 0), r = Math.min(r, s.slidesGrid.length - 1), s.slideTo(r, e, t, a) }, slideToClickedSlide: function() { var e, t = this,\r\n                        a = t.params,\r\n                        i = t.$wrapperEl,\r\n                        s = \"auto\" === a.slidesPerView ? t.slidesPerViewDynamic() : a.slidesPerView,\r\n                        r = t.clickedIndex; if (a.loop) { if (t.animating) return;\r\n                        e = parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"), 10), a.centeredSlides ? r < t.loopedSlides - s / 2 || r > t.slides.length - t.loopedSlides + s / 2 ? (t.loopFix(), r = i.children(\".\" + a.slideClass + '[data-swiper-slide-index=\"' + e + '\"]:not(.' + a.slideDuplicateClass + \")\").eq(0).index(), E((function() { t.slideTo(r) }))) : t.slideTo(r) : r > t.slides.length - s ? (t.loopFix(), r = i.children(\".\" + a.slideClass + '[data-swiper-slide-index=\"' + e + '\"]:not(.' + a.slideDuplicateClass + \")\").eq(0).index(), E((function() { t.slideTo(r) }))) : t.slideTo(r) } else t.slideTo(r) } }, loop: { loopCreate: function() { var e = this,\r\n                        t = r(),\r\n                        a = e.params,\r\n                        i = e.$wrapperEl;\r\n                    i.children(\".\" + a.slideClass + \".\" + a.slideDuplicateClass).remove(); var s = i.children(\".\" + a.slideClass); if (a.loopFillGroupWithBlank) { var n = a.slidesPerGroup - s.length % a.slidesPerGroup; if (n !== a.slidesPerGroup) { for (var o = 0; o < n; o += 1) { var l = m(t.createElement(\"div\")).addClass(a.slideClass + \" \" + a.slideBlankClass);\r\n                                i.append(l) } s = i.children(\".\" + a.slideClass) } } \"auto\" !== a.slidesPerView || a.loopedSlides || (a.loopedSlides = s.length), e.loopedSlides = Math.ceil(parseFloat(a.loopedSlides || a.slidesPerView, 10)), e.loopedSlides += a.loopAdditionalSlides, e.loopedSlides > s.length && (e.loopedSlides = s.length); var d = [],\r\n                        p = [];\r\n                    s.each((function(t, a) { var i = m(t);\r\n                        a < e.loopedSlides && p.push(t), a < s.length && a >= s.length - e.loopedSlides && d.push(t), i.attr(\"data-swiper-slide-index\", a) })); for (var c = 0; c < p.length; c += 1) i.append(m(p[c].cloneNode(!0)).addClass(a.slideDuplicateClass)); for (var u = d.length - 1; u >= 0; u -= 1) i.prepend(m(d[u].cloneNode(!0)).addClass(a.slideDuplicateClass)) }, loopFix: function() { var e = this;\r\n                    e.emit(\"beforeLoopFix\"); var t, a = e.activeIndex,\r\n                        i = e.slides,\r\n                        s = e.loopedSlides,\r\n                        r = e.allowSlidePrev,\r\n                        n = e.allowSlideNext,\r\n                        o = e.snapGrid,\r\n                        l = e.rtlTranslate;\r\n                    e.allowSlidePrev = !0, e.allowSlideNext = !0; var d = -o[a] - e.getTranslate(); if (a < s) t = i.length - 3 * s + a, t += s, e.slideTo(t, 0, !1, !0) && 0 !== d && e.setTranslate((l ? -e.translate : e.translate) - d);\r\n                    else if (a >= i.length - s) { t = -i.length + a + s, t += s, e.slideTo(t, 0, !1, !0) && 0 !== d && e.setTranslate((l ? -e.translate : e.translate) - d) } e.allowSlidePrev = r, e.allowSlideNext = n, e.emit(\"loopFix\") }, loopDestroy: function() { var e = this,\r\n                        t = e.$wrapperEl,\r\n                        a = e.params,\r\n                        i = e.slides;\r\n                    t.children(\".\" + a.slideClass + \".\" + a.slideDuplicateClass + \",.\" + a.slideClass + \".\" + a.slideBlankClass).remove(), i.removeAttr(\"data-swiper-slide-index\") } }, grabCursor: { setGrabCursor: function(e) { var t = this; if (!(t.support.touch || !t.params.simulateTouch || t.params.watchOverflow && t.isLocked || t.params.cssMode)) { var a = t.el;\r\n                        a.style.cursor = \"move\", a.style.cursor = e ? \"-webkit-grabbing\" : \"-webkit-grab\", a.style.cursor = e ? \"-moz-grabbin\" : \"-moz-grab\", a.style.cursor = e ? \"grabbing\" : \"grab\" } }, unsetGrabCursor: function() { var e = this;\r\n                    e.support.touch || e.params.watchOverflow && e.isLocked || e.params.cssMode || (e.el.style.cursor = \"\") } }, manipulation: { appendSlide: function(e) { var t = this,\r\n                        a = t.$wrapperEl,\r\n                        i = t.params; if (i.loop && t.loopDestroy(), \"object\" == typeof e && \"length\" in e)\r\n                        for (var s = 0; s < e.length; s += 1) e[s] && a.append(e[s]);\r\n                    else a.append(e);\r\n                    i.loop && t.loopCreate(), i.observer && t.support.observer || t.update() }, prependSlide: function(e) { var t = this,\r\n                        a = t.params,\r\n                        i = t.$wrapperEl,\r\n                        s = t.activeIndex;\r\n                    a.loop && t.loopDestroy(); var r = s + 1; if (\"object\" == typeof e && \"length\" in e) { for (var n = 0; n < e.length; n += 1) e[n] && i.prepend(e[n]);\r\n                        r = s + e.length } else i.prepend(e);\r\n                    a.loop && t.loopCreate(), a.observer && t.support.observer || t.update(), t.slideTo(r, 0, !1) }, addSlide: function(e, t) { var a = this,\r\n                        i = a.$wrapperEl,\r\n                        s = a.params,\r\n                        r = a.activeIndex;\r\n                    s.loop && (r -= a.loopedSlides, a.loopDestroy(), a.slides = i.children(\".\" + s.slideClass)); var n = a.slides.length; if (e <= 0) a.prependSlide(t);\r\n                    else if (e >= n) a.appendSlide(t);\r\n                    else { for (var o = r > e ? r + 1 : r, l = [], d = n - 1; d >= e; d -= 1) { var p = a.slides.eq(d);\r\n                            p.remove(), l.unshift(p) } if (\"object\" == typeof t && \"length\" in t) { for (var c = 0; c < t.length; c += 1) t[c] && i.append(t[c]);\r\n                            o = r > e ? r + t.length : r } else i.append(t); for (var u = 0; u < l.length; u += 1) i.append(l[u]);\r\n                        s.loop && a.loopCreate(), s.observer && a.support.observer || a.update(), s.loop ? a.slideTo(o + a.loopedSlides, 0, !1) : a.slideTo(o, 0, !1) } }, removeSlide: function(e) { var t = this,\r\n                        a = t.params,\r\n                        i = t.$wrapperEl,\r\n                        s = t.activeIndex;\r\n                    a.loop && (s -= t.loopedSlides, t.loopDestroy(), t.slides = i.children(\".\" + a.slideClass)); var r, n = s; if (\"object\" == typeof e && \"length\" in e) { for (var o = 0; o < e.length; o += 1) r = e[o], t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1);\r\n                        n = Math.max(n, 0) } else r = e, t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1), n = Math.max(n, 0);\r\n                    a.loop && t.loopCreate(), a.observer && t.support.observer || t.update(), a.loop ? t.slideTo(n + t.loopedSlides, 0, !1) : t.slideTo(n, 0, !1) }, removeAllSlides: function() { for (var e = [], t = 0; t < this.slides.length; t += 1) e.push(t);\r\n                    this.removeSlide(e) } }, events: { attachEvents: function() { var e = this,\r\n                        t = r(),\r\n                        a = e.params,\r\n                        i = e.touchEvents,\r\n                        s = e.el,\r\n                        n = e.wrapperEl,\r\n                        o = e.device,\r\n                        l = e.support;\r\n                    e.onTouchStart = A.bind(e), e.onTouchMove = D.bind(e), e.onTouchEnd = N.bind(e), a.cssMode && (e.onScroll = H.bind(e)), e.onClick = B.bind(e); var d = !!a.nested; if (!l.touch && l.pointerEvents) s.addEventListener(i.start, e.onTouchStart, !1), t.addEventListener(i.move, e.onTouchMove, d), t.addEventListener(i.end, e.onTouchEnd, !1);\r\n                    else { if (l.touch) { var p = !(\"touchstart\" !== i.start || !l.passiveListener || !a.passiveListeners) && { passive: !0, capture: !1 };\r\n                            s.addEventListener(i.start, e.onTouchStart, p), s.addEventListener(i.move, e.onTouchMove, l.passiveListener ? { passive: !1, capture: d } : d), s.addEventListener(i.end, e.onTouchEnd, p), i.cancel && s.addEventListener(i.cancel, e.onTouchEnd, p), X || (t.addEventListener(\"touchstart\", Y), X = !0) }(a.simulateTouch && !o.ios && !o.android || a.simulateTouch && !l.touch && o.ios) && (s.addEventListener(\"mousedown\", e.onTouchStart, !1), t.addEventListener(\"mousemove\", e.onTouchMove, d), t.addEventListener(\"mouseup\", e.onTouchEnd, !1)) }(a.preventClicks || a.preventClicksPropagation) && s.addEventListener(\"click\", e.onClick, !0), a.cssMode && n.addEventListener(\"scroll\", e.onScroll), a.updateOnWindowResize ? e.on(o.ios || o.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", G, !0) : e.on(\"observerUpdate\", G, !0) }, detachEvents: function() { var e = this,\r\n                        t = r(),\r\n                        a = e.params,\r\n                        i = e.touchEvents,\r\n                        s = e.el,\r\n                        n = e.wrapperEl,\r\n                        o = e.device,\r\n                        l = e.support,\r\n                        d = !!a.nested; if (!l.touch && l.pointerEvents) s.removeEventListener(i.start, e.onTouchStart, !1), t.removeEventListener(i.move, e.onTouchMove, d), t.removeEventListener(i.end, e.onTouchEnd, !1);\r\n                    else { if (l.touch) { var p = !(\"onTouchStart\" !== i.start || !l.passiveListener || !a.passiveListeners) && { passive: !0, capture: !1 };\r\n                            s.removeEventListener(i.start, e.onTouchStart, p), s.removeEventListener(i.move, e.onTouchMove, d), s.removeEventListener(i.end, e.onTouchEnd, p), i.cancel && s.removeEventListener(i.cancel, e.onTouchEnd, p) }(a.simulateTouch && !o.ios && !o.android || a.simulateTouch && !l.touch && o.ios) && (s.removeEventListener(\"mousedown\", e.onTouchStart, !1), t.removeEventListener(\"mousemove\", e.onTouchMove, d), t.removeEventListener(\"mouseup\", e.onTouchEnd, !1)) }(a.preventClicks || a.preventClicksPropagation) && s.removeEventListener(\"click\", e.onClick, !0), a.cssMode && n.removeEventListener(\"scroll\", e.onScroll), e.off(o.ios || o.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", G) } }, breakpoints: { setBreakpoint: function() { var e = this,\r\n                        t = e.activeIndex,\r\n                        a = e.initialized,\r\n                        i = e.loopedSlides,\r\n                        s = void 0 === i ? 0 : i,\r\n                        r = e.params,\r\n                        n = e.$el,\r\n                        o = r.breakpoints; if (o && (!o || 0 !== Object.keys(o).length)) { var l = e.getBreakpoint(o, e.params.breakpointsBase, e.el); if (l && e.currentBreakpoint !== l) { var d = l in o ? o[l] : void 0;\r\n                            d && [\"slidesPerView\", \"spaceBetween\", \"slidesPerGroup\", \"slidesPerGroupSkip\", \"slidesPerColumn\"].forEach((function(e) { var t = d[e];\r\n                                void 0 !== t && (d[e] = \"slidesPerView\" !== e || \"AUTO\" !== t && \"auto\" !== t ? \"slidesPerView\" === e ? parseFloat(t) : parseInt(t, 10) : \"auto\") })); var p = d || e.originalParams,\r\n                                c = r.slidesPerColumn > 1,\r\n                                u = p.slidesPerColumn > 1;\r\n                            c && !u ? (n.removeClass(r.containerModifierClass + \"multirow \" + r.containerModifierClass + \"multirow-column\"), e.emitContainerClasses()) : !c && u && (n.addClass(r.containerModifierClass + \"multirow\"), \"column\" === p.slidesPerColumnFill && n.addClass(r.containerModifierClass + \"multirow-column\"), e.emitContainerClasses()); var h = p.direction && p.direction !== r.direction,\r\n                                v = r.loop && (p.slidesPerView !== r.slidesPerView || h);\r\n                            h && a && e.changeDirection(), C(e.params, p), C(e, { allowTouchMove: e.params.allowTouchMove, allowSlideNext: e.params.allowSlideNext, allowSlidePrev: e.params.allowSlidePrev }), e.currentBreakpoint = l, e.emit(\"_beforeBreakpoint\", p), v && a && (e.loopDestroy(), e.loopCreate(), e.updateSlides(), e.slideTo(t - s + e.loopedSlides, 0, !1)), e.emit(\"breakpoint\", p) } } }, getBreakpoint: function(e, t, a) { if (void 0 === t && (t = \"window\"), e && (\"container\" !== t || a)) { var i = !1,\r\n                            s = o(),\r\n                            r = \"window\" === t ? s.innerWidth : a.clientWidth,\r\n                            n = \"window\" === t ? s.innerHeight : a.clientHeight,\r\n                            l = Object.keys(e).map((function(e) { if (\"string\" == typeof e && 0 === e.indexOf(\"@\")) { var t = parseFloat(e.substr(1)); return { value: n * t, point: e } } return { value: e, point: e } }));\r\n                        l.sort((function(e, t) { return parseInt(e.value, 10) - parseInt(t.value, 10) })); for (var d = 0; d < l.length; d += 1) { var p = l[d],\r\n                                c = p.point;\r\n                            p.value <= r && (i = c) } return i || \"max\" } } }, checkOverflow: { checkOverflow: function() { var e = this,\r\n                        t = e.params,\r\n                        a = e.isLocked,\r\n                        i = e.slides.length > 0 && t.slidesOffsetBefore + t.spaceBetween * (e.slides.length - 1) + e.slides[0].offsetWidth * e.slides.length;\r\n                    t.slidesOffsetBefore && t.slidesOffsetAfter && i ? e.isLocked = i <= e.size : e.isLocked = 1 === e.snapGrid.length, e.allowSlideNext = !e.isLocked, e.allowSlidePrev = !e.isLocked, a !== e.isLocked && e.emit(e.isLocked ? \"lock\" : \"unlock\"), a && a !== e.isLocked && (e.isEnd = !1, e.navigation && e.navigation.update()) } }, classes: { addClasses: function() { var e, t, a, i = this,\r\n                        s = i.classNames,\r\n                        r = i.params,\r\n                        n = i.rtl,\r\n                        o = i.$el,\r\n                        l = i.device,\r\n                        d = i.support,\r\n                        p = (e = [\"initialized\", r.direction, { \"pointer-events\": d.pointerEvents && !d.touch }, { \"free-mode\": r.freeMode }, { autoheight: r.autoHeight }, { rtl: n }, { multirow: r.slidesPerColumn > 1 }, { \"multirow-column\": r.slidesPerColumn > 1 && \"column\" === r.slidesPerColumnFill }, { android: l.android }, { ios: l.ios }, { \"css-mode\": r.cssMode }], t = r.containerModifierClass, a = [], e.forEach((function(e) { \"object\" == typeof e ? Object.keys(e).forEach((function(i) { e[i] && a.push(t + i) })) : \"string\" == typeof e && a.push(t + e) })), a);\r\n                    s.push.apply(s, p), o.addClass([].concat(s).join(\" \")), i.emitContainerClasses() }, removeClasses: function() { var e = this,\r\n                        t = e.$el,\r\n                        a = e.classNames;\r\n                    t.removeClass(a.join(\" \")), e.emitContainerClasses() } }, images: { loadImage: function(e, t, a, i, s, r) { var n, l = o();\r\n\r\n                    function d() { r && r() } m(e).parent(\"picture\")[0] || e.complete && s ? d() : t ? ((n = new l.Image).onload = d, n.onerror = d, i && (n.sizes = i), a && (n.srcset = a), t && (n.src = t)) : d() }, preloadImages: function() { var e = this;\r\n\r\n                    function t() { null != e && e && !e.destroyed && (void 0 !== e.imagesLoaded && (e.imagesLoaded += 1), e.imagesLoaded === e.imagesToLoad.length && (e.params.updateOnImagesReady && e.update(), e.emit(\"imagesReady\"))) } e.imagesToLoad = e.$el.find(\"img\"); for (var a = 0; a < e.imagesToLoad.length; a += 1) { var i = e.imagesToLoad[a];\r\n                        e.loadImage(i, i.currentSrc || i.getAttribute(\"src\"), i.srcset || i.getAttribute(\"srcset\"), i.sizes || i.getAttribute(\"sizes\"), !0, t) } } } },\r\n        W = {},\r\n        F = function() {\r\n            function t() { for (var e, a, i = arguments.length, s = new Array(i), r = 0; r < i; r++) s[r] = arguments[r]; if (1 === s.length && s[0].constructor && \"Object\" === Object.prototype.toString.call(s[0]).slice(8, -1) ? a = s[0] : (e = s[0], a = s[1]), a || (a = {}), a = C({}, a), e && !a.el && (a.el = e), a.el && m(a.el).length > 1) { var n = []; return m(a.el).each((function(e) { var i = C({}, a, { el: e });\r\n                        n.push(new t(i)) })), n } var o = this;\r\n                o.__swiper__ = !0, o.support = P(), o.device = k({ userAgent: a.userAgent }), o.browser = L(), o.eventsListeners = {}, o.eventsAnyListeners = [], void 0 === o.modules && (o.modules = {}), Object.keys(o.modules).forEach((function(e) { var t = o.modules[e]; if (t.params) { var i = Object.keys(t.params)[0],\r\n                            s = t.params[i]; if (\"object\" != typeof s || null === s) return; if (!(i in a) || !(\"enabled\" in s)) return;!0 === a[i] && (a[i] = { enabled: !0 }), \"object\" != typeof a[i] || \"enabled\" in a[i] || (a[i].enabled = !0), a[i] || (a[i] = { enabled: !1 }) } })); var l, d, p = C({}, R); return o.useParams(p), o.params = C({}, p, W, a), o.originalParams = C({}, o.params), o.passedParams = C({}, a), o.params && o.params.on && Object.keys(o.params.on).forEach((function(e) { o.on(e, o.params.on[e]) })), o.params && o.params.onAny && o.onAny(o.params.onAny), o.$ = m, C(o, { el: e, classNames: [], slides: m(), slidesGrid: [], snapGrid: [], slidesSizesGrid: [], isHorizontal: function() { return \"horizontal\" === o.params.direction }, isVertical: function() { return \"vertical\" === o.params.direction }, activeIndex: 0, realIndex: 0, isBeginning: !0, isEnd: !1, translate: 0, previousTranslate: 0, progress: 0, velocity: 0, animating: !1, allowSlideNext: o.params.allowSlideNext, allowSlidePrev: o.params.allowSlidePrev, touchEvents: (l = [\"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"], d = [\"mousedown\", \"mousemove\", \"mouseup\"], o.support.pointerEvents && (d = [\"pointerdown\", \"pointermove\", \"pointerup\"]), o.touchEventsTouch = { start: l[0], move: l[1], end: l[2], cancel: l[3] }, o.touchEventsDesktop = { start: d[0], move: d[1], end: d[2] }, o.support.touch || !o.params.simulateTouch ? o.touchEventsTouch : o.touchEventsDesktop), touchEventsData: { isTouched: void 0, isMoved: void 0, allowTouchCallbacks: void 0, touchStartTime: void 0, isScrolling: void 0, currentTranslate: void 0, startTranslate: void 0, allowThresholdMove: void 0, formElements: \"input, select, option, textarea, button, video, label\", lastClickTime: x(), clickTimeout: void 0, velocities: [], allowMomentumBounce: void 0, isTouchEvent: void 0, startMoving: void 0 }, allowClick: !0, allowTouchMove: o.params.allowTouchMove, touches: { startX: 0, startY: 0, currentX: 0, currentY: 0, diff: 0 }, imagesToLoad: [], imagesLoaded: 0 }), o.useModules(), o.emit(\"_swiper\"), o.params.init && o.init(), o } var a, i, s, r = t.prototype; return r.emitContainerClasses = function() { var e = this; if (e.params._emitClasses && e.el) { var t = e.el.className.split(\" \").filter((function(t) { return 0 === t.indexOf(\"swiper-container\") || 0 === t.indexOf(e.params.containerModifierClass) }));\r\n                    e.emit(\"_containerClasses\", t.join(\" \")) } }, r.getSlideClasses = function(e) { var t = this; return e.className.split(\" \").filter((function(e) { return 0 === e.indexOf(\"swiper-slide\") || 0 === e.indexOf(t.params.slideClass) })).join(\" \") }, r.emitSlidesClasses = function() { var e = this; if (e.params._emitClasses && e.el) { var t = [];\r\n                    e.slides.each((function(a) { var i = e.getSlideClasses(a);\r\n                        t.push({ slideEl: a, classNames: i }), e.emit(\"_slideClass\", a, i) })), e.emit(\"_slideClasses\", t) } }, r.slidesPerViewDynamic = function() { var e = this,\r\n                    t = e.params,\r\n                    a = e.slides,\r\n                    i = e.slidesGrid,\r\n                    s = e.size,\r\n                    r = e.activeIndex,\r\n                    n = 1; if (t.centeredSlides) { for (var o, l = a[r].swiperSlideSize, d = r + 1; d < a.length; d += 1) a[d] && !o && (n += 1, (l += a[d].swiperSlideSize) > s && (o = !0)); for (var p = r - 1; p >= 0; p -= 1) a[p] && !o && (n += 1, (l += a[p].swiperSlideSize) > s && (o = !0)) } else\r\n                    for (var c = r + 1; c < a.length; c += 1) i[c] - i[r] < s && (n += 1); return n }, r.update = function() { var e = this; if (e && !e.destroyed) { var t = e.snapGrid,\r\n                        a = e.params;\r\n                    a.breakpoints && e.setBreakpoint(), e.updateSize(), e.updateSlides(), e.updateProgress(), e.updateSlidesClasses(), e.params.freeMode ? (i(), e.params.autoHeight && e.updateAutoHeight()) : ((\"auto\" === e.params.slidesPerView || e.params.slidesPerView > 1) && e.isEnd && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0)) || i(), a.watchOverflow && t !== e.snapGrid && e.checkOverflow(), e.emit(\"update\") }\r\n\r\n                function i() { var t = e.rtlTranslate ? -1 * e.translate : e.translate,\r\n                        a = Math.min(Math.max(t, e.maxTranslate()), e.minTranslate());\r\n                    e.setTranslate(a), e.updateActiveIndex(), e.updateSlidesClasses() } }, r.changeDirection = function(e, t) { void 0 === t && (t = !0); var a = this,\r\n                    i = a.params.direction; return e || (e = \"horizontal\" === i ? \"vertical\" : \"horizontal\"), e === i || \"horizontal\" !== e && \"vertical\" !== e || (a.$el.removeClass(\"\" + a.params.containerModifierClass + i).addClass(\"\" + a.params.containerModifierClass + e), a.emitContainerClasses(), a.params.direction = e, a.slides.each((function(t) { \"vertical\" === e ? t.style.width = \"\" : t.style.height = \"\" })), a.emit(\"changeDirection\"), t && a.update()), a }, r.mount = function(e) { var t = this; if (t.mounted) return !0; var a, i = m(e || t.params.el); return !!(e = i[0]) && (e.swiper = t, e && e.shadowRoot && e.shadowRoot.querySelector ? (a = m(e.shadowRoot.querySelector(\".\" + t.params.wrapperClass))).children = function(e) { return i.children(e) } : a = i.children(\".\" + t.params.wrapperClass), C(t, { $el: i, el: e, $wrapperEl: a, wrapperEl: a[0], mounted: !0, rtl: \"rtl\" === e.dir.toLowerCase() || \"rtl\" === i.css(\"direction\"), rtlTranslate: \"horizontal\" === t.params.direction && (\"rtl\" === e.dir.toLowerCase() || \"rtl\" === i.css(\"direction\")), wrongRTL: \"-webkit-box\" === a.css(\"display\") }), !0) }, r.init = function(e) { var t = this; return t.initialized || !1 === t.mount(e) || (t.emit(\"beforeInit\"), t.params.breakpoints && t.setBreakpoint(), t.addClasses(), t.params.loop && t.loopCreate(), t.updateSize(), t.updateSlides(), t.params.watchOverflow && t.checkOverflow(), t.params.grabCursor && t.setGrabCursor(), t.params.preloadImages && t.preloadImages(), t.params.loop ? t.slideTo(t.params.initialSlide + t.loopedSlides, 0, t.params.runCallbacksOnInit) : t.slideTo(t.params.initialSlide, 0, t.params.runCallbacksOnInit), t.attachEvents(), t.initialized = !0, t.emit(\"init\"), t.emit(\"afterInit\")), t }, r.destroy = function(e, t) { void 0 === e && (e = !0), void 0 === t && (t = !0); var a, i = this,\r\n                    s = i.params,\r\n                    r = i.$el,\r\n                    n = i.$wrapperEl,\r\n                    o = i.slides; return void 0 === i.params || i.destroyed || (i.emit(\"beforeDestroy\"), i.initialized = !1, i.detachEvents(), s.loop && i.loopDestroy(), t && (i.removeClasses(), r.removeAttr(\"style\"), n.removeAttr(\"style\"), o && o.length && o.removeClass([s.slideVisibleClass, s.slideActiveClass, s.slideNextClass, s.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\")), i.emit(\"destroy\"), Object.keys(i.eventsListeners).forEach((function(e) { i.off(e) })), !1 !== e && (i.$el[0].swiper = null, a = i, Object.keys(a).forEach((function(e) { try { a[e] = null } catch (e) {} try { delete a[e] } catch (e) {} }))), i.destroyed = !0), null }, t.extendDefaults = function(e) { C(W, e) }, t.installModule = function(e) { t.prototype.modules || (t.prototype.modules = {}); var a = e.name || Object.keys(t.prototype.modules).length + \"_\" + x();\r\n                t.prototype.modules[a] = e }, t.use = function(e) { return Array.isArray(e) ? (e.forEach((function(e) { return t.installModule(e) })), t) : (t.installModule(e), t) }, a = t, s = [{ key: \"extendedDefaults\", get: function() { return W } }, { key: \"defaults\", get: function() { return R } }], (i = null) && e(a.prototype, i), s && e(a, s), t }();\r\n    Object.keys(V).forEach((function(e) { Object.keys(V[e]).forEach((function(t) { F.prototype[t] = V[e][t] })) })), F.use([$, O]); var _ = { update: function(e) { var t = this,\r\n                    a = t.params,\r\n                    i = a.slidesPerView,\r\n                    s = a.slidesPerGroup,\r\n                    r = a.centeredSlides,\r\n                    n = t.params.virtual,\r\n                    o = n.addSlidesBefore,\r\n                    l = n.addSlidesAfter,\r\n                    d = t.virtual,\r\n                    p = d.from,\r\n                    c = d.to,\r\n                    u = d.slides,\r\n                    h = d.slidesGrid,\r\n                    v = d.renderSlide,\r\n                    f = d.offset;\r\n                t.updateActiveIndex(); var m, g, b, w = t.activeIndex || 0;\r\n                m = t.rtlTranslate ? \"right\" : t.isHorizontal() ? \"left\" : \"top\", r ? (g = Math.floor(i / 2) + s + l, b = Math.floor(i / 2) + s + o) : (g = i + (s - 1) + l, b = s + o); var y = Math.max((w || 0) - b, 0),\r\n                    E = Math.min((w || 0) + g, u.length - 1),\r\n                    x = (t.slidesGrid[y] || 0) - (t.slidesGrid[0] || 0);\r\n\r\n                function T() { t.updateSlides(), t.updateProgress(), t.updateSlidesClasses(), t.lazy && t.params.lazy.enabled && t.lazy.load() } if (C(t.virtual, { from: y, to: E, offset: x, slidesGrid: t.slidesGrid }), p === y && c === E && !e) return t.slidesGrid !== h && x !== f && t.slides.css(m, x + \"px\"), void t.updateProgress(); if (t.params.virtual.renderExternal) return t.params.virtual.renderExternal.call(t, { offset: x, from: y, to: E, slides: function() { for (var e = [], t = y; t <= E; t += 1) e.push(u[t]); return e }() }), void(t.params.virtual.renderExternalUpdate && T()); var S = [],\r\n                    M = []; if (e) t.$wrapperEl.find(\".\" + t.params.slideClass).remove();\r\n                else\r\n                    for (var z = p; z <= c; z += 1)(z < y || z > E) && t.$wrapperEl.find(\".\" + t.params.slideClass + '[data-swiper-slide-index=\"' + z + '\"]').remove(); for (var P = 0; P < u.length; P += 1) P >= y && P <= E && (void 0 === c || e ? M.push(P) : (P > c && M.push(P), P < p && S.push(P)));\r\n                M.forEach((function(e) { t.$wrapperEl.append(v(u[e], e)) })), S.sort((function(e, t) { return t - e })).forEach((function(e) { t.$wrapperEl.prepend(v(u[e], e)) })), t.$wrapperEl.children(\".swiper-slide\").css(m, x + \"px\"), T() }, renderSlide: function(e, t) { var a = this,\r\n                    i = a.params.virtual; if (i.cache && a.virtual.cache[t]) return a.virtual.cache[t]; var s = i.renderSlide ? m(i.renderSlide.call(a, e, t)) : m('<div class=\"' + a.params.slideClass + '\" data-swiper-slide-index=\"' + t + '\">' + e + \"</div>\"); return s.attr(\"data-swiper-slide-index\") || s.attr(\"data-swiper-slide-index\", t), i.cache && (a.virtual.cache[t] = s), s }, appendSlide: function(e) { var t = this; if (\"object\" == typeof e && \"length\" in e)\r\n                    for (var a = 0; a < e.length; a += 1) e[a] && t.virtual.slides.push(e[a]);\r\n                else t.virtual.slides.push(e);\r\n                t.virtual.update(!0) }, prependSlide: function(e) { var t = this,\r\n                    a = t.activeIndex,\r\n                    i = a + 1,\r\n                    s = 1; if (Array.isArray(e)) { for (var r = 0; r < e.length; r += 1) e[r] && t.virtual.slides.unshift(e[r]);\r\n                    i = a + e.length, s = e.length } else t.virtual.slides.unshift(e); if (t.params.virtual.cache) { var n = t.virtual.cache,\r\n                        o = {};\r\n                    Object.keys(n).forEach((function(e) { var t = n[e],\r\n                            a = t.attr(\"data-swiper-slide-index\");\r\n                        a && t.attr(\"data-swiper-slide-index\", parseInt(a, 10) + 1), o[parseInt(e, 10) + s] = t })), t.virtual.cache = o } t.virtual.update(!0), t.slideTo(i, 0) }, removeSlide: function(e) { var t = this; if (null != e) { var a = t.activeIndex; if (Array.isArray(e))\r\n                        for (var i = e.length - 1; i >= 0; i -= 1) t.virtual.slides.splice(e[i], 1), t.params.virtual.cache && delete t.virtual.cache[e[i]], e[i] < a && (a -= 1), a = Math.max(a, 0);\r\n                    else t.virtual.slides.splice(e, 1), t.params.virtual.cache && delete t.virtual.cache[e], e < a && (a -= 1), a = Math.max(a, 0);\r\n                    t.virtual.update(!0), t.slideTo(a, 0) } }, removeAllSlides: function() { var e = this;\r\n                e.virtual.slides = [], e.params.virtual.cache && (e.virtual.cache = {}), e.virtual.update(!0), e.slideTo(0, 0) } },\r\n        q = { name: \"virtual\", params: { virtual: { enabled: !1, slides: [], cache: !0, renderSlide: null, renderExternal: null, renderExternalUpdate: !0, addSlidesBefore: 0, addSlidesAfter: 0 } }, create: function() { M(this, { virtual: t({}, _, { slides: this.params.virtual.slides, cache: {} }) }) }, on: { beforeInit: function(e) { if (e.params.virtual.enabled) { e.classNames.push(e.params.containerModifierClass + \"virtual\"); var t = { watchSlidesProgress: !0 };\r\n                        C(e.params, t), C(e.originalParams, t), e.params.initialSlide || e.virtual.update() } }, setTranslate: function(e) { e.params.virtual.enabled && e.virtual.update() } } },\r\n        j = { handle: function(e) { var t = this,\r\n                    a = o(),\r\n                    i = r(),\r\n                    s = t.rtlTranslate,\r\n                    n = e;\r\n                n.originalEvent && (n = n.originalEvent); var l = n.keyCode || n.charCode,\r\n                    d = t.params.keyboard.pageUpDown,\r\n                    p = d && 33 === l,\r\n                    c = d && 34 === l,\r\n                    u = 37 === l,\r\n                    h = 39 === l,\r\n                    v = 38 === l,\r\n                    f = 40 === l; if (!t.allowSlideNext && (t.isHorizontal() && h || t.isVertical() && f || c)) return !1; if (!t.allowSlidePrev && (t.isHorizontal() && u || t.isVertical() && v || p)) return !1; if (!(n.shiftKey || n.altKey || n.ctrlKey || n.metaKey || i.activeElement && i.activeElement.nodeName && (\"input\" === i.activeElement.nodeName.toLowerCase() || \"textarea\" === i.activeElement.nodeName.toLowerCase()))) { if (t.params.keyboard.onlyInViewport && (p || c || u || h || v || f)) { var m = !1; if (t.$el.parents(\".\" + t.params.slideClass).length > 0 && 0 === t.$el.parents(\".\" + t.params.slideActiveClass).length) return; var g = t.$el,\r\n                            b = g[0].clientWidth,\r\n                            w = g[0].clientHeight,\r\n                            y = a.innerWidth,\r\n                            E = a.innerHeight,\r\n                            x = t.$el.offset();\r\n                        s && (x.left -= t.$el[0].scrollLeft); for (var T = [\r\n                                [x.left, x.top],\r\n                                [x.left + b, x.top],\r\n                                [x.left, x.top + w],\r\n                                [x.left + b, x.top + w]\r\n                            ], S = 0; S < T.length; S += 1) { var C = T[S]; if (C[0] >= 0 && C[0] <= y && C[1] >= 0 && C[1] <= E) { if (0 === C[0] && 0 === C[1]) continue;\r\n                                m = !0 } } if (!m) return } t.isHorizontal() ? ((p || c || u || h) && (n.preventDefault ? n.preventDefault() : n.returnValue = !1), ((c || h) && !s || (p || u) && s) && t.slideNext(), ((p || u) && !s || (c || h) && s) && t.slidePrev()) : ((p || c || v || f) && (n.preventDefault ? n.preventDefault() : n.returnValue = !1), (c || f) && t.slideNext(), (p || v) && t.slidePrev()), t.emit(\"keyPress\", l) } }, enable: function() { var e = this,\r\n                    t = r();\r\n                e.keyboard.enabled || (m(t).on(\"keydown\", e.keyboard.handle), e.keyboard.enabled = !0) }, disable: function() { var e = this,\r\n                    t = r();\r\n                e.keyboard.enabled && (m(t).off(\"keydown\", e.keyboard.handle), e.keyboard.enabled = !1) } },\r\n        U = { name: \"keyboard\", params: { keyboard: { enabled: !1, onlyInViewport: !0, pageUpDown: !0 } }, create: function() { M(this, { keyboard: t({ enabled: !1 }, j) }) }, on: { init: function(e) { e.params.keyboard.enabled && e.keyboard.enable() }, destroy: function(e) { e.keyboard.enabled && e.keyboard.disable() } } }; var K = { lastScrollTime: x(), lastEventBeforeSnap: void 0, recentWheelEvents: [], event: function() { return o().navigator.userAgent.indexOf(\"firefox\") > -1 ? \"DOMMouseScroll\" : function() { var e = r(),\r\n                        t = \"onwheel\",\r\n                        a = t in e; if (!a) { var i = e.createElement(\"div\");\r\n                        i.setAttribute(t, \"return;\"), a = \"function\" == typeof i.onwheel } return !a && e.implementation && e.implementation.hasFeature && !0 !== e.implementation.hasFeature(\"\", \"\") && (a = e.implementation.hasFeature(\"Events.wheel\", \"3.0\")), a }() ? \"wheel\" : \"mousewheel\" }, normalize: function(e) { var t = 0,\r\n                    a = 0,\r\n                    i = 0,\r\n                    s = 0; return \"detail\" in e && (a = e.detail), \"wheelDelta\" in e && (a = -e.wheelDelta / 120), \"wheelDeltaY\" in e && (a = -e.wheelDeltaY / 120), \"wheelDeltaX\" in e && (t = -e.wheelDeltaX / 120), \"axis\" in e && e.axis === e.HORIZONTAL_AXIS && (t = a, a = 0), i = 10 * t, s = 10 * a, \"deltaY\" in e && (s = e.deltaY), \"deltaX\" in e && (i = e.deltaX), e.shiftKey && !i && (i = s, s = 0), (i || s) && e.deltaMode && (1 === e.deltaMode ? (i *= 40, s *= 40) : (i *= 800, s *= 800)), i && !t && (t = i < 1 ? -1 : 1), s && !a && (a = s < 1 ? -1 : 1), { spinX: t, spinY: a, pixelX: i, pixelY: s } }, handleMouseEnter: function() { this.mouseEntered = !0 }, handleMouseLeave: function() { this.mouseEntered = !1 }, handle: function(e) { var t = e,\r\n                    a = this,\r\n                    i = a.params.mousewheel;\r\n                a.params.cssMode && t.preventDefault(); var s = a.$el; if (\"container\" !== a.params.mousewheel.eventsTarget && (s = m(a.params.mousewheel.eventsTarget)), !a.mouseEntered && !s[0].contains(t.target) && !i.releaseOnEdges) return !0;\r\n                t.originalEvent && (t = t.originalEvent); var r = 0,\r\n                    n = a.rtlTranslate ? -1 : 1,\r\n                    o = K.normalize(t); if (i.forceToAxis)\r\n                    if (a.isHorizontal()) { if (!(Math.abs(o.pixelX) > Math.abs(o.pixelY))) return !0;\r\n                        r = -o.pixelX * n } else { if (!(Math.abs(o.pixelY) > Math.abs(o.pixelX))) return !0;\r\n                        r = -o.pixelY } else r = Math.abs(o.pixelX) > Math.abs(o.pixelY) ? -o.pixelX * n : -o.pixelY; if (0 === r) return !0;\r\n                i.invert && (r = -r); var l = a.getTranslate() + r * i.sensitivity; if (l >= a.minTranslate() && (l = a.minTranslate()), l <= a.maxTranslate() && (l = a.maxTranslate()), (!!a.params.loop || !(l === a.minTranslate() || l === a.maxTranslate())) && a.params.nested && t.stopPropagation(), a.params.freeMode) { var d = { time: x(), delta: Math.abs(r), direction: Math.sign(r) },\r\n                        p = a.mousewheel.lastEventBeforeSnap,\r\n                        c = p && d.time < p.time + 500 && d.delta <= p.delta && d.direction === p.direction; if (!c) { a.mousewheel.lastEventBeforeSnap = void 0, a.params.loop && a.loopFix(); var u = a.getTranslate() + r * i.sensitivity,\r\n                            h = a.isBeginning,\r\n                            v = a.isEnd; if (u >= a.minTranslate() && (u = a.minTranslate()), u <= a.maxTranslate() && (u = a.maxTranslate()), a.setTransition(0), a.setTranslate(u), a.updateProgress(), a.updateActiveIndex(), a.updateSlidesClasses(), (!h && a.isBeginning || !v && a.isEnd) && a.updateSlidesClasses(), a.params.freeModeSticky) { clearTimeout(a.mousewheel.timeout), a.mousewheel.timeout = void 0; var f = a.mousewheel.recentWheelEvents;\r\n                            f.length >= 15 && f.shift(); var g = f.length ? f[f.length - 1] : void 0,\r\n                                b = f[0]; if (f.push(d), g && (d.delta > g.delta || d.direction !== g.direction)) f.splice(0);\r\n                            else if (f.length >= 15 && d.time - b.time < 500 && b.delta - d.delta >= 1 && d.delta <= 6) { var w = r > 0 ? .8 : .2;\r\n                                a.mousewheel.lastEventBeforeSnap = d, f.splice(0), a.mousewheel.timeout = E((function() { a.slideToClosest(a.params.speed, !0, void 0, w) }), 0) } a.mousewheel.timeout || (a.mousewheel.timeout = E((function() { a.mousewheel.lastEventBeforeSnap = d, f.splice(0), a.slideToClosest(a.params.speed, !0, void 0, .5) }), 500)) } if (c || a.emit(\"scroll\", t), a.params.autoplay && a.params.autoplayDisableOnInteraction && a.autoplay.stop(), u === a.minTranslate() || u === a.maxTranslate()) return !0 } } else { var y = { time: x(), delta: Math.abs(r), direction: Math.sign(r), raw: e },\r\n                        T = a.mousewheel.recentWheelEvents;\r\n                    T.length >= 2 && T.shift(); var S = T.length ? T[T.length - 1] : void 0; if (T.push(y), S ? (y.direction !== S.direction || y.delta > S.delta || y.time > S.time + 150) && a.mousewheel.animateSlider(y) : a.mousewheel.animateSlider(y), a.mousewheel.releaseScroll(y)) return !0 } return t.preventDefault ? t.preventDefault() : t.returnValue = !1, !1 }, animateSlider: function(e) { var t = this,\r\n                    a = o(); return !(this.params.mousewheel.thresholdDelta && e.delta < this.params.mousewheel.thresholdDelta) && (!(this.params.mousewheel.thresholdTime && x() - t.mousewheel.lastScrollTime < this.params.mousewheel.thresholdTime) && (e.delta >= 6 && x() - t.mousewheel.lastScrollTime < 60 || (e.direction < 0 ? t.isEnd && !t.params.loop || t.animating || (t.slideNext(), t.emit(\"scroll\", e.raw)) : t.isBeginning && !t.params.loop || t.animating || (t.slidePrev(), t.emit(\"scroll\", e.raw)), t.mousewheel.lastScrollTime = (new a.Date).getTime(), !1))) }, releaseScroll: function(e) { var t = this,\r\n                    a = t.params.mousewheel; if (e.direction < 0) { if (t.isEnd && !t.params.loop && a.releaseOnEdges) return !0 } else if (t.isBeginning && !t.params.loop && a.releaseOnEdges) return !0; return !1 }, enable: function() { var e = this,\r\n                    t = K.event(); if (e.params.cssMode) return e.wrapperEl.removeEventListener(t, e.mousewheel.handle), !0; if (!t) return !1; if (e.mousewheel.enabled) return !1; var a = e.$el; return \"container\" !== e.params.mousewheel.eventsTarget && (a = m(e.params.mousewheel.eventsTarget)), a.on(\"mouseenter\", e.mousewheel.handleMouseEnter), a.on(\"mouseleave\", e.mousewheel.handleMouseLeave), a.on(t, e.mousewheel.handle), e.mousewheel.enabled = !0, !0 }, disable: function() { var e = this,\r\n                    t = K.event(); if (e.params.cssMode) return e.wrapperEl.addEventListener(t, e.mousewheel.handle), !0; if (!t) return !1; if (!e.mousewheel.enabled) return !1; var a = e.$el; return \"container\" !== e.params.mousewheel.eventsTarget && (a = m(e.params.mousewheel.eventsTarget)), a.off(t, e.mousewheel.handle), e.mousewheel.enabled = !1, !0 } },\r\n        Z = { toggleEl: function(e, t) { e[t ? \"addClass\" : \"removeClass\"](this.params.navigation.disabledClass), e[0] && \"BUTTON\" === e[0].tagName && (e[0].disabled = t) }, update: function() { var e = this,\r\n                    t = e.params.navigation,\r\n                    a = e.navigation.toggleEl; if (!e.params.loop) { var i = e.navigation,\r\n                        s = i.$nextEl,\r\n                        r = i.$prevEl;\r\n                    r && r.length > 0 && (e.isBeginning ? a(r, !0) : a(r, !1), r[e.params.watchOverflow && e.isLocked ? \"addClass\" : \"removeClass\"](t.lockClass)), s && s.length > 0 && (e.isEnd ? a(s, !0) : a(s, !1), s[e.params.watchOverflow && e.isLocked ? \"addClass\" : \"removeClass\"](t.lockClass)) } }, onPrevClick: function(e) { var t = this;\r\n                e.preventDefault(), t.isBeginning && !t.params.loop || t.slidePrev() }, onNextClick: function(e) { var t = this;\r\n                e.preventDefault(), t.isEnd && !t.params.loop || t.slideNext() }, init: function() { var e, t, a = this,\r\n                    i = a.params.navigation;\r\n                (i.nextEl || i.prevEl) && (i.nextEl && (e = m(i.nextEl), a.params.uniqueNavElements && \"string\" == typeof i.nextEl && e.length > 1 && 1 === a.$el.find(i.nextEl).length && (e = a.$el.find(i.nextEl))), i.prevEl && (t = m(i.prevEl), a.params.uniqueNavElements && \"string\" == typeof i.prevEl && t.length > 1 && 1 === a.$el.find(i.prevEl).length && (t = a.$el.find(i.prevEl))), e && e.length > 0 && e.on(\"click\", a.navigation.onNextClick), t && t.length > 0 && t.on(\"click\", a.navigation.onPrevClick), C(a.navigation, { $nextEl: e, nextEl: e && e[0], $prevEl: t, prevEl: t && t[0] })) }, destroy: function() { var e = this,\r\n                    t = e.navigation,\r\n                    a = t.$nextEl,\r\n                    i = t.$prevEl;\r\n                a && a.length && (a.off(\"click\", e.navigation.onNextClick), a.removeClass(e.params.navigation.disabledClass)), i && i.length && (i.off(\"click\", e.navigation.onPrevClick), i.removeClass(e.params.navigation.disabledClass)) } },\r\n        J = { update: function() { var e = this,\r\n                    t = e.rtl,\r\n                    a = e.params.pagination; if (a.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) { var i, s = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,\r\n                        r = e.pagination.$el,\r\n                        n = e.params.loop ? Math.ceil((s - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length; if (e.params.loop ? ((i = Math.ceil((e.activeIndex - e.loopedSlides) / e.params.slidesPerGroup)) > s - 1 - 2 * e.loopedSlides && (i -= s - 2 * e.loopedSlides), i > n - 1 && (i -= n), i < 0 && \"bullets\" !== e.params.paginationType && (i = n + i)) : i = void 0 !== e.snapIndex ? e.snapIndex : e.activeIndex || 0, \"bullets\" === a.type && e.pagination.bullets && e.pagination.bullets.length > 0) { var o, l, d, p = e.pagination.bullets; if (a.dynamicBullets && (e.pagination.bulletSize = p.eq(0)[e.isHorizontal() ? \"outerWidth\" : \"outerHeight\"](!0), r.css(e.isHorizontal() ? \"width\" : \"height\", e.pagination.bulletSize * (a.dynamicMainBullets + 4) + \"px\"), a.dynamicMainBullets > 1 && void 0 !== e.previousIndex && (e.pagination.dynamicBulletIndex += i - e.previousIndex, e.pagination.dynamicBulletIndex > a.dynamicMainBullets - 1 ? e.pagination.dynamicBulletIndex = a.dynamicMainBullets - 1 : e.pagination.dynamicBulletIndex < 0 && (e.pagination.dynamicBulletIndex = 0)), o = i - e.pagination.dynamicBulletIndex, d = ((l = o + (Math.min(p.length, a.dynamicMainBullets) - 1)) + o) / 2), p.removeClass(a.bulletActiveClass + \" \" + a.bulletActiveClass + \"-next \" + a.bulletActiveClass + \"-next-next \" + a.bulletActiveClass + \"-prev \" + a.bulletActiveClass + \"-prev-prev \" + a.bulletActiveClass + \"-main\"), r.length > 1) p.each((function(e) { var t = m(e),\r\n                                s = t.index();\r\n                            s === i && t.addClass(a.bulletActiveClass), a.dynamicBullets && (s >= o && s <= l && t.addClass(a.bulletActiveClass + \"-main\"), s === o && t.prev().addClass(a.bulletActiveClass + \"-prev\").prev().addClass(a.bulletActiveClass + \"-prev-prev\"), s === l && t.next().addClass(a.bulletActiveClass + \"-next\").next().addClass(a.bulletActiveClass + \"-next-next\")) }));\r\n                        else { var c = p.eq(i),\r\n                                u = c.index(); if (c.addClass(a.bulletActiveClass), a.dynamicBullets) { for (var h = p.eq(o), v = p.eq(l), f = o; f <= l; f += 1) p.eq(f).addClass(a.bulletActiveClass + \"-main\"); if (e.params.loop)\r\n                                    if (u >= p.length - a.dynamicMainBullets) { for (var g = a.dynamicMainBullets; g >= 0; g -= 1) p.eq(p.length - g).addClass(a.bulletActiveClass + \"-main\");\r\n                                        p.eq(p.length - a.dynamicMainBullets - 1).addClass(a.bulletActiveClass + \"-prev\") } else h.prev().addClass(a.bulletActiveClass + \"-prev\").prev().addClass(a.bulletActiveClass + \"-prev-prev\"), v.next().addClass(a.bulletActiveClass + \"-next\").next().addClass(a.bulletActiveClass + \"-next-next\");\r\n                                else h.prev().addClass(a.bulletActiveClass + \"-prev\").prev().addClass(a.bulletActiveClass + \"-prev-prev\"), v.next().addClass(a.bulletActiveClass + \"-next\").next().addClass(a.bulletActiveClass + \"-next-next\") } } if (a.dynamicBullets) { var b = Math.min(p.length, a.dynamicMainBullets + 4),\r\n                                w = (e.pagination.bulletSize * b - e.pagination.bulletSize) / 2 - d * e.pagination.bulletSize,\r\n                                y = t ? \"right\" : \"left\";\r\n                            p.css(e.isHorizontal() ? y : \"top\", w + \"px\") } } if (\"fraction\" === a.type && (r.find(z(a.currentClass)).text(a.formatFractionCurrent(i + 1)), r.find(z(a.totalClass)).text(a.formatFractionTotal(n))), \"progressbar\" === a.type) { var E;\r\n                        E = a.progressbarOpposite ? e.isHorizontal() ? \"vertical\" : \"horizontal\" : e.isHorizontal() ? \"horizontal\" : \"vertical\"; var x = (i + 1) / n,\r\n                            T = 1,\r\n                            S = 1; \"horizontal\" === E ? T = x : S = x, r.find(z(a.progressbarFillClass)).transform(\"translate3d(0,0,0) scaleX(\" + T + \") scaleY(\" + S + \")\").transition(e.params.speed) } \"custom\" === a.type && a.renderCustom ? (r.html(a.renderCustom(e, i + 1, n)), e.emit(\"paginationRender\", r[0])) : e.emit(\"paginationUpdate\", r[0]), r[e.params.watchOverflow && e.isLocked ? \"addClass\" : \"removeClass\"](a.lockClass) } }, render: function() { var e = this,\r\n                    t = e.params.pagination; if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) { var a = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,\r\n                        i = e.pagination.$el,\r\n                        s = \"\"; if (\"bullets\" === t.type) { var r = e.params.loop ? Math.ceil((a - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length;\r\n                        e.params.freeMode && !e.params.loop && r > a && (r = a); for (var n = 0; n < r; n += 1) t.renderBullet ? s += t.renderBullet.call(e, n, t.bulletClass) : s += \"<\" + t.bulletElement + ' class=\"' + t.bulletClass + '\"></' + t.bulletElement + \">\";\r\n                        i.html(s), e.pagination.bullets = i.find(z(t.bulletClass)) } \"fraction\" === t.type && (s = t.renderFraction ? t.renderFraction.call(e, t.currentClass, t.totalClass) : '<span class=\"' + t.currentClass + '\"></span> / <span class=\"' + t.totalClass + '\"></span>', i.html(s)), \"progressbar\" === t.type && (s = t.renderProgressbar ? t.renderProgressbar.call(e, t.progressbarFillClass) : '<span class=\"' + t.progressbarFillClass + '\"></span>', i.html(s)), \"custom\" !== t.type && e.emit(\"paginationRender\", e.pagination.$el[0]) } }, init: function() { var e = this,\r\n                    t = e.params.pagination; if (t.el) { var a = m(t.el);\r\n                    0 !== a.length && (e.params.uniqueNavElements && \"string\" == typeof t.el && a.length > 1 && (a = e.$el.find(t.el)), \"bullets\" === t.type && t.clickable && a.addClass(t.clickableClass), a.addClass(t.modifierClass + t.type), \"bullets\" === t.type && t.dynamicBullets && (a.addClass(\"\" + t.modifierClass + t.type + \"-dynamic\"), e.pagination.dynamicBulletIndex = 0, t.dynamicMainBullets < 1 && (t.dynamicMainBullets = 1)), \"progressbar\" === t.type && t.progressbarOpposite && a.addClass(t.progressbarOppositeClass), t.clickable && a.on(\"click\", z(t.bulletClass), (function(t) { t.preventDefault(); var a = m(this).index() * e.params.slidesPerGroup;\r\n                        e.params.loop && (a += e.loopedSlides), e.slideTo(a) })), C(e.pagination, { $el: a, el: a[0] })) } }, destroy: function() { var e = this,\r\n                    t = e.params.pagination; if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) { var a = e.pagination.$el;\r\n                    a.removeClass(t.hiddenClass), a.removeClass(t.modifierClass + t.type), e.pagination.bullets && e.pagination.bullets.removeClass(t.bulletActiveClass), t.clickable && a.off(\"click\", z(t.bulletClass)) } } },\r\n        Q = { setTranslate: function() { var e = this; if (e.params.scrollbar.el && e.scrollbar.el) { var t = e.scrollbar,\r\n                        a = e.rtlTranslate,\r\n                        i = e.progress,\r\n                        s = t.dragSize,\r\n                        r = t.trackSize,\r\n                        n = t.$dragEl,\r\n                        o = t.$el,\r\n                        l = e.params.scrollbar,\r\n                        d = s,\r\n                        p = (r - s) * i;\r\n                    a ? (p = -p) > 0 ? (d = s - p, p = 0) : -p + s > r && (d = r + p) : p < 0 ? (d = s + p, p = 0) : p + s > r && (d = r - p), e.isHorizontal() ? (n.transform(\"translate3d(\" + p + \"px, 0, 0)\"), n[0].style.width = d + \"px\") : (n.transform(\"translate3d(0px, \" + p + \"px, 0)\"), n[0].style.height = d + \"px\"), l.hide && (clearTimeout(e.scrollbar.timeout), o[0].style.opacity = 1, e.scrollbar.timeout = setTimeout((function() { o[0].style.opacity = 0, o.transition(400) }), 1e3)) } }, setTransition: function(e) { var t = this;\r\n                t.params.scrollbar.el && t.scrollbar.el && t.scrollbar.$dragEl.transition(e) }, updateSize: function() { var e = this; if (e.params.scrollbar.el && e.scrollbar.el) { var t = e.scrollbar,\r\n                        a = t.$dragEl,\r\n                        i = t.$el;\r\n                    a[0].style.width = \"\", a[0].style.height = \"\"; var s, r = e.isHorizontal() ? i[0].offsetWidth : i[0].offsetHeight,\r\n                        n = e.size / e.virtualSize,\r\n                        o = n * (r / e.size);\r\n                    s = \"auto\" === e.params.scrollbar.dragSize ? r * n : parseInt(e.params.scrollbar.dragSize, 10), e.isHorizontal() ? a[0].style.width = s + \"px\" : a[0].style.height = s + \"px\", i[0].style.display = n >= 1 ? \"none\" : \"\", e.params.scrollbar.hide && (i[0].style.opacity = 0), C(t, { trackSize: r, divider: n, moveDivider: o, dragSize: s }), t.$el[e.params.watchOverflow && e.isLocked ? \"addClass\" : \"removeClass\"](e.params.scrollbar.lockClass) } }, getPointerPosition: function(e) { return this.isHorizontal() ? \"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0].clientX : e.clientX : \"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0].clientY : e.clientY }, setDragPosition: function(e) { var t, a = this,\r\n                    i = a.scrollbar,\r\n                    s = a.rtlTranslate,\r\n                    r = i.$el,\r\n                    n = i.dragSize,\r\n                    o = i.trackSize,\r\n                    l = i.dragStartPos;\r\n                t = (i.getPointerPosition(e) - r.offset()[a.isHorizontal() ? \"left\" : \"top\"] - (null !== l ? l : n / 2)) / (o - n), t = Math.max(Math.min(t, 1), 0), s && (t = 1 - t); var d = a.minTranslate() + (a.maxTranslate() - a.minTranslate()) * t;\r\n                a.updateProgress(d), a.setTranslate(d), a.updateActiveIndex(), a.updateSlidesClasses() }, onDragStart: function(e) { var t = this,\r\n                    a = t.params.scrollbar,\r\n                    i = t.scrollbar,\r\n                    s = t.$wrapperEl,\r\n                    r = i.$el,\r\n                    n = i.$dragEl;\r\n                t.scrollbar.isTouched = !0, t.scrollbar.dragStartPos = e.target === n[0] || e.target === n ? i.getPointerPosition(e) - e.target.getBoundingClientRect()[t.isHorizontal() ? \"left\" : \"top\"] : null, e.preventDefault(), e.stopPropagation(), s.transition(100), n.transition(100), i.setDragPosition(e), clearTimeout(t.scrollbar.dragTimeout), r.transition(0), a.hide && r.css(\"opacity\", 1), t.params.cssMode && t.$wrapperEl.css(\"scroll-snap-type\", \"none\"), t.emit(\"scrollbarDragStart\", e) }, onDragMove: function(e) { var t = this,\r\n                    a = t.scrollbar,\r\n                    i = t.$wrapperEl,\r\n                    s = a.$el,\r\n                    r = a.$dragEl;\r\n                t.scrollbar.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, a.setDragPosition(e), i.transition(0), s.transition(0), r.transition(0), t.emit(\"scrollbarDragMove\", e)) }, onDragEnd: function(e) { var t = this,\r\n                    a = t.params.scrollbar,\r\n                    i = t.scrollbar,\r\n                    s = t.$wrapperEl,\r\n                    r = i.$el;\r\n                t.scrollbar.isTouched && (t.scrollbar.isTouched = !1, t.params.cssMode && (t.$wrapperEl.css(\"scroll-snap-type\", \"\"), s.transition(\"\")), a.hide && (clearTimeout(t.scrollbar.dragTimeout), t.scrollbar.dragTimeout = E((function() { r.css(\"opacity\", 0), r.transition(400) }), 1e3)), t.emit(\"scrollbarDragEnd\", e), a.snapOnRelease && t.slideToClosest()) }, enableDraggable: function() { var e = this; if (e.params.scrollbar.el) { var t = r(),\r\n                        a = e.scrollbar,\r\n                        i = e.touchEventsTouch,\r\n                        s = e.touchEventsDesktop,\r\n                        n = e.params,\r\n                        o = e.support,\r\n                        l = a.$el[0],\r\n                        d = !(!o.passiveListener || !n.passiveListeners) && { passive: !1, capture: !1 },\r\n                        p = !(!o.passiveListener || !n.passiveListeners) && { passive: !0, capture: !1 };\r\n                    l && (o.touch ? (l.addEventListener(i.start, e.scrollbar.onDragStart, d), l.addEventListener(i.move, e.scrollbar.onDragMove, d), l.addEventListener(i.end, e.scrollbar.onDragEnd, p)) : (l.addEventListener(s.start, e.scrollbar.onDragStart, d), t.addEventListener(s.move, e.scrollbar.onDragMove, d), t.addEventListener(s.end, e.scrollbar.onDragEnd, p))) } }, disableDraggable: function() { var e = this; if (e.params.scrollbar.el) { var t = r(),\r\n                        a = e.scrollbar,\r\n                        i = e.touchEventsTouch,\r\n                        s = e.touchEventsDesktop,\r\n                        n = e.params,\r\n                        o = e.support,\r\n                        l = a.$el[0],\r\n                        d = !(!o.passiveListener || !n.passiveListeners) && { passive: !1, capture: !1 },\r\n                        p = !(!o.passiveListener || !n.passiveListeners) && { passive: !0, capture: !1 };\r\n                    l && (o.touch ? (l.removeEventListener(i.start, e.scrollbar.onDragStart, d), l.removeEventListener(i.move, e.scrollbar.onDragMove, d), l.removeEventListener(i.end, e.scrollbar.onDragEnd, p)) : (l.removeEventListener(s.start, e.scrollbar.onDragStart, d), t.removeEventListener(s.move, e.scrollbar.onDragMove, d), t.removeEventListener(s.end, e.scrollbar.onDragEnd, p))) } }, init: function() { var e = this; if (e.params.scrollbar.el) { var t = e.scrollbar,\r\n                        a = e.$el,\r\n                        i = e.params.scrollbar,\r\n                        s = m(i.el);\r\n                    e.params.uniqueNavElements && \"string\" == typeof i.el && s.length > 1 && 1 === a.find(i.el).length && (s = a.find(i.el)); var r = s.find(\".\" + e.params.scrollbar.dragClass);\r\n                    0 === r.length && (r = m('<div class=\"' + e.params.scrollbar.dragClass + '\"></div>'), s.append(r)), C(t, { $el: s, el: s[0], $dragEl: r, dragEl: r[0] }), i.draggable && t.enableDraggable() } }, destroy: function() { this.scrollbar.disableDraggable() } },\r\n        ee = { setTransform: function(e, t) { var a = this.rtl,\r\n                    i = m(e),\r\n                    s = a ? -1 : 1,\r\n                    r = i.attr(\"data-swiper-parallax\") || \"0\",\r\n                    n = i.attr(\"data-swiper-parallax-x\"),\r\n                    o = i.attr(\"data-swiper-parallax-y\"),\r\n                    l = i.attr(\"data-swiper-parallax-scale\"),\r\n                    d = i.attr(\"data-swiper-parallax-opacity\"); if (n || o ? (n = n || \"0\", o = o || \"0\") : this.isHorizontal() ? (n = r, o = \"0\") : (o = r, n = \"0\"), n = n.indexOf(\"%\") >= 0 ? parseInt(n, 10) * t * s + \"%\" : n * t * s + \"px\", o = o.indexOf(\"%\") >= 0 ? parseInt(o, 10) * t + \"%\" : o * t + \"px\", null != d) { var p = d - (d - 1) * (1 - Math.abs(t));\r\n                    i[0].style.opacity = p } if (null == l) i.transform(\"translate3d(\" + n + \", \" + o + \", 0px)\");\r\n                else { var c = l - (l - 1) * (1 - Math.abs(t));\r\n                    i.transform(\"translate3d(\" + n + \", \" + o + \", 0px) scale(\" + c + \")\") } }, setTranslate: function() { var e = this,\r\n                    t = e.$el,\r\n                    a = e.slides,\r\n                    i = e.progress,\r\n                    s = e.snapGrid;\r\n                t.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t) { e.parallax.setTransform(t, i) })), a.each((function(t, a) { var r = t.progress;\r\n                    e.params.slidesPerGroup > 1 && \"auto\" !== e.params.slidesPerView && (r += Math.ceil(a / 2) - i * (s.length - 1)), r = Math.min(Math.max(r, -1), 1), m(t).find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t) { e.parallax.setTransform(t, r) })) })) }, setTransition: function(e) { void 0 === e && (e = this.params.speed);\r\n                this.$el.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t) { var a = m(t),\r\n                        i = parseInt(a.attr(\"data-swiper-parallax-duration\"), 10) || e;\r\n                    0 === e && (i = 0), a.transition(i) })) } },\r\n        te = { getDistanceBetweenTouches: function(e) { if (e.targetTouches.length < 2) return 1; var t = e.targetTouches[0].pageX,\r\n                    a = e.targetTouches[0].pageY,\r\n                    i = e.targetTouches[1].pageX,\r\n                    s = e.targetTouches[1].pageY; return Math.sqrt(Math.pow(i - t, 2) + Math.pow(s - a, 2)) }, onGestureStart: function(e) { var t = this,\r\n                    a = t.support,\r\n                    i = t.params.zoom,\r\n                    s = t.zoom,\r\n                    r = s.gesture; if (s.fakeGestureTouched = !1, s.fakeGestureMoved = !1, !a.gestures) { if (\"touchstart\" !== e.type || \"touchstart\" === e.type && e.targetTouches.length < 2) return;\r\n                    s.fakeGestureTouched = !0, r.scaleStart = te.getDistanceBetweenTouches(e) } r.$slideEl && r.$slideEl.length || (r.$slideEl = m(e.target).closest(\".\" + t.params.slideClass), 0 === r.$slideEl.length && (r.$slideEl = t.slides.eq(t.activeIndex)), r.$imageEl = r.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"), r.$imageWrapEl = r.$imageEl.parent(\".\" + i.containerClass), r.maxRatio = r.$imageWrapEl.attr(\"data-swiper-zoom\") || i.maxRatio, 0 !== r.$imageWrapEl.length) ? (r.$imageEl && r.$imageEl.transition(0), t.zoom.isScaling = !0) : r.$imageEl = void 0 }, onGestureChange: function(e) { var t = this,\r\n                    a = t.support,\r\n                    i = t.params.zoom,\r\n                    s = t.zoom,\r\n                    r = s.gesture; if (!a.gestures) { if (\"touchmove\" !== e.type || \"touchmove\" === e.type && e.targetTouches.length < 2) return;\r\n                    s.fakeGestureMoved = !0, r.scaleMove = te.getDistanceBetweenTouches(e) } r.$imageEl && 0 !== r.$imageEl.length ? (a.gestures ? s.scale = e.scale * s.currentScale : s.scale = r.scaleMove / r.scaleStart * s.currentScale, s.scale > r.maxRatio && (s.scale = r.maxRatio - 1 + Math.pow(s.scale - r.maxRatio + 1, .5)), s.scale < i.minRatio && (s.scale = i.minRatio + 1 - Math.pow(i.minRatio - s.scale + 1, .5)), r.$imageEl.transform(\"translate3d(0,0,0) scale(\" + s.scale + \")\")) : \"gesturechange\" === e.type && s.onGestureStart(e) }, onGestureEnd: function(e) { var t = this,\r\n                    a = t.device,\r\n                    i = t.support,\r\n                    s = t.params.zoom,\r\n                    r = t.zoom,\r\n                    n = r.gesture; if (!i.gestures) { if (!r.fakeGestureTouched || !r.fakeGestureMoved) return; if (\"touchend\" !== e.type || \"touchend\" === e.type && e.changedTouches.length < 2 && !a.android) return;\r\n                    r.fakeGestureTouched = !1, r.fakeGestureMoved = !1 } n.$imageEl && 0 !== n.$imageEl.length && (r.scale = Math.max(Math.min(r.scale, n.maxRatio), s.minRatio), n.$imageEl.transition(t.params.speed).transform(\"translate3d(0,0,0) scale(\" + r.scale + \")\"), r.currentScale = r.scale, r.isScaling = !1, 1 === r.scale && (n.$slideEl = void 0)) }, onTouchStart: function(e) { var t = this.device,\r\n                    a = this.zoom,\r\n                    i = a.gesture,\r\n                    s = a.image;\r\n                i.$imageEl && 0 !== i.$imageEl.length && (s.isTouched || (t.android && e.cancelable && e.preventDefault(), s.isTouched = !0, s.touchesStart.x = \"touchstart\" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesStart.y = \"touchstart\" === e.type ? e.targetTouches[0].pageY : e.pageY)) }, onTouchMove: function(e) { var t = this,\r\n                    a = t.zoom,\r\n                    i = a.gesture,\r\n                    s = a.image,\r\n                    r = a.velocity; if (i.$imageEl && 0 !== i.$imageEl.length && (t.allowClick = !1, s.isTouched && i.$slideEl)) { s.isMoved || (s.width = i.$imageEl[0].offsetWidth, s.height = i.$imageEl[0].offsetHeight, s.startX = T(i.$imageWrapEl[0], \"x\") || 0, s.startY = T(i.$imageWrapEl[0], \"y\") || 0, i.slideWidth = i.$slideEl[0].offsetWidth, i.slideHeight = i.$slideEl[0].offsetHeight, i.$imageWrapEl.transition(0), t.rtl && (s.startX = -s.startX, s.startY = -s.startY)); var n = s.width * a.scale,\r\n                        o = s.height * a.scale; if (!(n < i.slideWidth && o < i.slideHeight)) { if (s.minX = Math.min(i.slideWidth / 2 - n / 2, 0), s.maxX = -s.minX, s.minY = Math.min(i.slideHeight / 2 - o / 2, 0), s.maxY = -s.minY, s.touchesCurrent.x = \"touchmove\" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesCurrent.y = \"touchmove\" === e.type ? e.targetTouches[0].pageY : e.pageY, !s.isMoved && !a.isScaling) { if (t.isHorizontal() && (Math.floor(s.minX) === Math.floor(s.startX) && s.touchesCurrent.x < s.touchesStart.x || Math.floor(s.maxX) === Math.floor(s.startX) && s.touchesCurrent.x > s.touchesStart.x)) return void(s.isTouched = !1); if (!t.isHorizontal() && (Math.floor(s.minY) === Math.floor(s.startY) && s.touchesCurrent.y < s.touchesStart.y || Math.floor(s.maxY) === Math.floor(s.startY) && s.touchesCurrent.y > s.touchesStart.y)) return void(s.isTouched = !1) } e.cancelable && e.preventDefault(), e.stopPropagation(), s.isMoved = !0, s.currentX = s.touchesCurrent.x - s.touchesStart.x + s.startX, s.currentY = s.touchesCurrent.y - s.touchesStart.y + s.startY, s.currentX < s.minX && (s.currentX = s.minX + 1 - Math.pow(s.minX - s.currentX + 1, .8)), s.currentX > s.maxX && (s.currentX = s.maxX - 1 + Math.pow(s.currentX - s.maxX + 1, .8)), s.currentY < s.minY && (s.currentY = s.minY + 1 - Math.pow(s.minY - s.currentY + 1, .8)), s.currentY > s.maxY && (s.currentY = s.maxY - 1 + Math.pow(s.currentY - s.maxY + 1, .8)), r.prevPositionX || (r.prevPositionX = s.touchesCurrent.x), r.prevPositionY || (r.prevPositionY = s.touchesCurrent.y), r.prevTime || (r.prevTime = Date.now()), r.x = (s.touchesCurrent.x - r.prevPositionX) / (Date.now() - r.prevTime) / 2, r.y = (s.touchesCurrent.y - r.prevPositionY) / (Date.now() - r.prevTime) / 2, Math.abs(s.touchesCurrent.x - r.prevPositionX) < 2 && (r.x = 0), Math.abs(s.touchesCurrent.y - r.prevPositionY) < 2 && (r.y = 0), r.prevPositionX = s.touchesCurrent.x, r.prevPositionY = s.touchesCurrent.y, r.prevTime = Date.now(), i.$imageWrapEl.transform(\"translate3d(\" + s.currentX + \"px, \" + s.currentY + \"px,0)\") } } }, onTouchEnd: function() { var e = this.zoom,\r\n                    t = e.gesture,\r\n                    a = e.image,\r\n                    i = e.velocity; if (t.$imageEl && 0 !== t.$imageEl.length) { if (!a.isTouched || !a.isMoved) return a.isTouched = !1, void(a.isMoved = !1);\r\n                    a.isTouched = !1, a.isMoved = !1; var s = 300,\r\n                        r = 300,\r\n                        n = i.x * s,\r\n                        o = a.currentX + n,\r\n                        l = i.y * r,\r\n                        d = a.currentY + l;\r\n                    0 !== i.x && (s = Math.abs((o - a.currentX) / i.x)), 0 !== i.y && (r = Math.abs((d - a.currentY) / i.y)); var p = Math.max(s, r);\r\n                    a.currentX = o, a.currentY = d; var c = a.width * e.scale,\r\n                        u = a.height * e.scale;\r\n                    a.minX = Math.min(t.slideWidth / 2 - c / 2, 0), a.maxX = -a.minX, a.minY = Math.min(t.slideHeight / 2 - u / 2, 0), a.maxY = -a.minY, a.currentX = Math.max(Math.min(a.currentX, a.maxX), a.minX), a.currentY = Math.max(Math.min(a.currentY, a.maxY), a.minY), t.$imageWrapEl.transition(p).transform(\"translate3d(\" + a.currentX + \"px, \" + a.currentY + \"px,0)\") } }, onTransitionEnd: function() { var e = this,\r\n                    t = e.zoom,\r\n                    a = t.gesture;\r\n                a.$slideEl && e.previousIndex !== e.activeIndex && (a.$imageEl && a.$imageEl.transform(\"translate3d(0,0,0) scale(1)\"), a.$imageWrapEl && a.$imageWrapEl.transform(\"translate3d(0,0,0)\"), t.scale = 1, t.currentScale = 1, a.$slideEl = void 0, a.$imageEl = void 0, a.$imageWrapEl = void 0) }, toggle: function(e) { var t = this.zoom;\r\n                t.scale && 1 !== t.scale ? t.out() : t.in(e) }, in: function(e) { var t, a, i, s, r, n, l, d, p, c, u, h, v, f, m, g, b = this,\r\n                    w = o(),\r\n                    y = b.zoom,\r\n                    E = b.params.zoom,\r\n                    x = y.gesture,\r\n                    T = y.image;\r\n                (x.$slideEl || (b.params.virtual && b.params.virtual.enabled && b.virtual ? x.$slideEl = b.$wrapperEl.children(\".\" + b.params.slideActiveClass) : x.$slideEl = b.slides.eq(b.activeIndex), x.$imageEl = x.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"), x.$imageWrapEl = x.$imageEl.parent(\".\" + E.containerClass)), x.$imageEl && 0 !== x.$imageEl.length) && (x.$slideEl.addClass(\"\" + E.zoomedSlideClass), void 0 === T.touchesStart.x && e ? (t = \"touchend\" === e.type ? e.changedTouches[0].pageX : e.pageX, a = \"touchend\" === e.type ? e.changedTouches[0].pageY : e.pageY) : (t = T.touchesStart.x, a = T.touchesStart.y), y.scale = x.$imageWrapEl.attr(\"data-swiper-zoom\") || E.maxRatio, y.currentScale = x.$imageWrapEl.attr(\"data-swiper-zoom\") || E.maxRatio, e ? (m = x.$slideEl[0].offsetWidth, g = x.$slideEl[0].offsetHeight, i = x.$slideEl.offset().left + w.scrollX + m / 2 - t, s = x.$slideEl.offset().top + w.scrollY + g / 2 - a, l = x.$imageEl[0].offsetWidth, d = x.$imageEl[0].offsetHeight, p = l * y.scale, c = d * y.scale, v = -(u = Math.min(m / 2 - p / 2, 0)), f = -(h = Math.min(g / 2 - c / 2, 0)), (r = i * y.scale) < u && (r = u), r > v && (r = v), (n = s * y.scale) < h && (n = h), n > f && (n = f)) : (r = 0, n = 0), x.$imageWrapEl.transition(300).transform(\"translate3d(\" + r + \"px, \" + n + \"px,0)\"), x.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(\" + y.scale + \")\")) }, out: function() { var e = this,\r\n                    t = e.zoom,\r\n                    a = e.params.zoom,\r\n                    i = t.gesture;\r\n                i.$slideEl || (e.params.virtual && e.params.virtual.enabled && e.virtual ? i.$slideEl = e.$wrapperEl.children(\".\" + e.params.slideActiveClass) : i.$slideEl = e.slides.eq(e.activeIndex), i.$imageEl = i.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"), i.$imageWrapEl = i.$imageEl.parent(\".\" + a.containerClass)), i.$imageEl && 0 !== i.$imageEl.length && (t.scale = 1, t.currentScale = 1, i.$imageWrapEl.transition(300).transform(\"translate3d(0,0,0)\"), i.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(1)\"), i.$slideEl.removeClass(\"\" + a.zoomedSlideClass), i.$slideEl = void 0) }, toggleGestures: function(e) { var t = this,\r\n                    a = t.zoom,\r\n                    i = a.slideSelector,\r\n                    s = a.passiveListener;\r\n                t.$wrapperEl[e](\"gesturestart\", i, a.onGestureStart, s), t.$wrapperEl[e](\"gesturechange\", i, a.onGestureChange, s), t.$wrapperEl[e](\"gestureend\", i, a.onGestureEnd, s) }, enableGestures: function() { this.zoom.gesturesEnabled || (this.zoom.gesturesEnabled = !0, this.zoom.toggleGestures(\"on\")) }, disableGestures: function() { this.zoom.gesturesEnabled && (this.zoom.gesturesEnabled = !1, this.zoom.toggleGestures(\"off\")) }, enable: function() { var e = this,\r\n                    t = e.support,\r\n                    a = e.zoom; if (!a.enabled) { a.enabled = !0; var i = !(\"touchstart\" !== e.touchEvents.start || !t.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 },\r\n                        s = !t.passiveListener || { passive: !1, capture: !0 },\r\n                        r = \".\" + e.params.slideClass;\r\n                    e.zoom.passiveListener = i, e.zoom.slideSelector = r, t.gestures ? (e.$wrapperEl.on(e.touchEvents.start, e.zoom.enableGestures, i), e.$wrapperEl.on(e.touchEvents.end, e.zoom.disableGestures, i)) : \"touchstart\" === e.touchEvents.start && (e.$wrapperEl.on(e.touchEvents.start, r, a.onGestureStart, i), e.$wrapperEl.on(e.touchEvents.move, r, a.onGestureChange, s), e.$wrapperEl.on(e.touchEvents.end, r, a.onGestureEnd, i), e.touchEvents.cancel && e.$wrapperEl.on(e.touchEvents.cancel, r, a.onGestureEnd, i)), e.$wrapperEl.on(e.touchEvents.move, \".\" + e.params.zoom.containerClass, a.onTouchMove, s) } }, disable: function() { var e = this,\r\n                    t = e.zoom; if (t.enabled) { var a = e.support;\r\n                    e.zoom.enabled = !1; var i = !(\"touchstart\" !== e.touchEvents.start || !a.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 },\r\n                        s = !a.passiveListener || { passive: !1, capture: !0 },\r\n                        r = \".\" + e.params.slideClass;\r\n                    a.gestures ? (e.$wrapperEl.off(e.touchEvents.start, e.zoom.enableGestures, i), e.$wrapperEl.off(e.touchEvents.end, e.zoom.disableGestures, i)) : \"touchstart\" === e.touchEvents.start && (e.$wrapperEl.off(e.touchEvents.start, r, t.onGestureStart, i), e.$wrapperEl.off(e.touchEvents.move, r, t.onGestureChange, s), e.$wrapperEl.off(e.touchEvents.end, r, t.onGestureEnd, i), e.touchEvents.cancel && e.$wrapperEl.off(e.touchEvents.cancel, r, t.onGestureEnd, i)), e.$wrapperEl.off(e.touchEvents.move, \".\" + e.params.zoom.containerClass, t.onTouchMove, s) } } },\r\n        ae = { loadInSlide: function(e, t) { void 0 === t && (t = !0); var a = this,\r\n                    i = a.params.lazy; if (void 0 !== e && 0 !== a.slides.length) { var s = a.virtual && a.params.virtual.enabled ? a.$wrapperEl.children(\".\" + a.params.slideClass + '[data-swiper-slide-index=\"' + e + '\"]') : a.slides.eq(e),\r\n                        r = s.find(\".\" + i.elementClass + \":not(.\" + i.loadedClass + \"):not(.\" + i.loadingClass + \")\");!s.hasClass(i.elementClass) || s.hasClass(i.loadedClass) || s.hasClass(i.loadingClass) || r.push(s[0]), 0 !== r.length && r.each((function(e) { var r = m(e);\r\n                        r.addClass(i.loadingClass); var n = r.attr(\"data-background\"),\r\n                            o = r.attr(\"data-src\"),\r\n                            l = r.attr(\"data-srcset\"),\r\n                            d = r.attr(\"data-sizes\"),\r\n                            p = r.parent(\"picture\");\r\n                        a.loadImage(r[0], o || n, l, d, !1, (function() { if (null != a && a && (!a || a.params) && !a.destroyed) { if (n ? (r.css(\"background-image\", 'url(\"' + n + '\")'), r.removeAttr(\"data-background\")) : (l && (r.attr(\"srcset\", l), r.removeAttr(\"data-srcset\")), d && (r.attr(\"sizes\", d), r.removeAttr(\"data-sizes\")), p.length && p.children(\"source\").each((function(e) { var t = m(e);\r\n                                        t.attr(\"data-srcset\") && (t.attr(\"srcset\", t.attr(\"data-srcset\")), t.removeAttr(\"data-srcset\")) })), o && (r.attr(\"src\", o), r.removeAttr(\"data-src\"))), r.addClass(i.loadedClass).removeClass(i.loadingClass), s.find(\".\" + i.preloaderClass).remove(), a.params.loop && t) { var e = s.attr(\"data-swiper-slide-index\"); if (s.hasClass(a.params.slideDuplicateClass)) { var c = a.$wrapperEl.children('[data-swiper-slide-index=\"' + e + '\"]:not(.' + a.params.slideDuplicateClass + \")\");\r\n                                        a.lazy.loadInSlide(c.index(), !1) } else { var u = a.$wrapperEl.children(\".\" + a.params.slideDuplicateClass + '[data-swiper-slide-index=\"' + e + '\"]');\r\n                                        a.lazy.loadInSlide(u.index(), !1) } } a.emit(\"lazyImageReady\", s[0], r[0]), a.params.autoHeight && a.updateAutoHeight() } })), a.emit(\"lazyImageLoad\", s[0], r[0]) })) } }, load: function() { var e = this,\r\n                    t = e.$wrapperEl,\r\n                    a = e.params,\r\n                    i = e.slides,\r\n                    s = e.activeIndex,\r\n                    r = e.virtual && a.virtual.enabled,\r\n                    n = a.lazy,\r\n                    o = a.slidesPerView;\r\n\r\n                function l(e) { if (r) { if (t.children(\".\" + a.slideClass + '[data-swiper-slide-index=\"' + e + '\"]').length) return !0 } else if (i[e]) return !0; return !1 }\r\n\r\n                function d(e) { return r ? m(e).attr(\"data-swiper-slide-index\") : m(e).index() } if (\"auto\" === o && (o = 0), e.lazy.initialImageLoaded || (e.lazy.initialImageLoaded = !0), e.params.watchSlidesVisibility) t.children(\".\" + a.slideVisibleClass).each((function(t) { var a = r ? m(t).attr(\"data-swiper-slide-index\") : m(t).index();\r\n                    e.lazy.loadInSlide(a) }));\r\n                else if (o > 1)\r\n                    for (var p = s; p < s + o; p += 1) l(p) && e.lazy.loadInSlide(p);\r\n                else e.lazy.loadInSlide(s); if (n.loadPrevNext)\r\n                    if (o > 1 || n.loadPrevNextAmount && n.loadPrevNextAmount > 1) { for (var c = n.loadPrevNextAmount, u = o, h = Math.min(s + u + Math.max(c, u), i.length), v = Math.max(s - Math.max(u, c), 0), f = s + o; f < h; f += 1) l(f) && e.lazy.loadInSlide(f); for (var g = v; g < s; g += 1) l(g) && e.lazy.loadInSlide(g) } else { var b = t.children(\".\" + a.slideNextClass);\r\n                        b.length > 0 && e.lazy.loadInSlide(d(b)); var w = t.children(\".\" + a.slidePrevClass);\r\n                        w.length > 0 && e.lazy.loadInSlide(d(w)) } }, checkInViewOnLoad: function() { var e = o(),\r\n                    t = this; if (t && !t.destroyed) { var a = t.params.lazy.scrollingElement ? m(t.params.lazy.scrollingElement) : m(e),\r\n                        i = a[0] === e,\r\n                        s = i ? e.innerWidth : a[0].offsetWidth,\r\n                        r = i ? e.innerHeight : a[0].offsetHeight,\r\n                        n = t.$el.offset(),\r\n                        l = !1;\r\n                    t.rtlTranslate && (n.left -= t.$el[0].scrollLeft); for (var d = [\r\n                            [n.left, n.top],\r\n                            [n.left + t.width, n.top],\r\n                            [n.left, n.top + t.height],\r\n                            [n.left + t.width, n.top + t.height]\r\n                        ], p = 0; p < d.length; p += 1) { var c = d[p]; if (c[0] >= 0 && c[0] <= s && c[1] >= 0 && c[1] <= r) { if (0 === c[0] && 0 === c[1]) continue;\r\n                            l = !0 } } l ? (t.lazy.load(), a.off(\"scroll\", t.lazy.checkInViewOnLoad)) : t.lazy.scrollHandlerAttached || (t.lazy.scrollHandlerAttached = !0, a.on(\"scroll\", t.lazy.checkInViewOnLoad)) } } },\r\n        ie = { LinearSpline: function(e, t) { var a, i, s, r, n, o = function(e, t) { for (i = -1, a = e.length; a - i > 1;) e[s = a + i >> 1] <= t ? i = s : a = s; return a }; return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function(e) { return e ? (n = o(this.x, e), r = n - 1, (e - this.x[r]) * (this.y[n] - this.y[r]) / (this.x[n] - this.x[r]) + this.y[r]) : 0 }, this }, getInterpolateFunction: function(e) { var t = this;\r\n                t.controller.spline || (t.controller.spline = t.params.loop ? new ie.LinearSpline(t.slidesGrid, e.slidesGrid) : new ie.LinearSpline(t.snapGrid, e.snapGrid)) }, setTranslate: function(e, t) { var a, i, s = this,\r\n                    r = s.controller.control,\r\n                    n = s.constructor;\r\n\r\n                function o(e) { var t = s.rtlTranslate ? -s.translate : s.translate; \"slide\" === s.params.controller.by && (s.controller.getInterpolateFunction(e), i = -s.controller.spline.interpolate(-t)), i && \"container\" !== s.params.controller.by || (a = (e.maxTranslate() - e.minTranslate()) / (s.maxTranslate() - s.minTranslate()), i = (t - s.minTranslate()) * a + e.minTranslate()), s.params.controller.inverse && (i = e.maxTranslate() - i), e.updateProgress(i), e.setTranslate(i, s), e.updateActiveIndex(), e.updateSlidesClasses() } if (Array.isArray(r))\r\n                    for (var l = 0; l < r.length; l += 1) r[l] !== t && r[l] instanceof n && o(r[l]);\r\n                else r instanceof n && t !== r && o(r) }, setTransition: function(e, t) { var a, i = this,\r\n                    s = i.constructor,\r\n                    r = i.controller.control;\r\n\r\n                function n(t) { t.setTransition(e, i), 0 !== e && (t.transitionStart(), t.params.autoHeight && E((function() { t.updateAutoHeight() })), t.$wrapperEl.transitionEnd((function() { r && (t.params.loop && \"slide\" === i.params.controller.by && t.loopFix(), t.transitionEnd()) }))) } if (Array.isArray(r))\r\n                    for (a = 0; a < r.length; a += 1) r[a] !== t && r[a] instanceof s && n(r[a]);\r\n                else r instanceof s && t !== r && n(r) } },\r\n        se = { getRandomNumber: function(e) { void 0 === e && (e = 16); return \"x\".repeat(e).replace(/x/g, (function() { return Math.round(16 * Math.random()).toString(16) })) }, makeElFocusable: function(e) { return e.attr(\"tabIndex\", \"0\"), e }, makeElNotFocusable: function(e) { return e.attr(\"tabIndex\", \"-1\"), e }, addElRole: function(e, t) { return e.attr(\"role\", t), e }, addElRoleDescription: function(e, t) { return e.attr(\"aria-roledescription\", t), e }, addElControls: function(e, t) { return e.attr(\"aria-controls\", t), e }, addElLabel: function(e, t) { return e.attr(\"aria-label\", t), e }, addElId: function(e, t) { return e.attr(\"id\", t), e }, addElLive: function(e, t) { return e.attr(\"aria-live\", t), e }, disableEl: function(e) { return e.attr(\"aria-disabled\", !0), e }, enableEl: function(e) { return e.attr(\"aria-disabled\", !1), e }, onEnterOrSpaceKey: function(e) { if (13 === e.keyCode || 32 === e.keyCode) { var t = this,\r\n                        a = t.params.a11y,\r\n                        i = m(e.target);\r\n                    t.navigation && t.navigation.$nextEl && i.is(t.navigation.$nextEl) && (t.isEnd && !t.params.loop || t.slideNext(), t.isEnd ? t.a11y.notify(a.lastSlideMessage) : t.a11y.notify(a.nextSlideMessage)), t.navigation && t.navigation.$prevEl && i.is(t.navigation.$prevEl) && (t.isBeginning && !t.params.loop || t.slidePrev(), t.isBeginning ? t.a11y.notify(a.firstSlideMessage) : t.a11y.notify(a.prevSlideMessage)), t.pagination && i.is(z(t.params.pagination.bulletClass)) && i[0].click() } }, notify: function(e) { var t = this.a11y.liveRegion;\r\n                0 !== t.length && (t.html(\"\"), t.html(e)) }, updateNavigation: function() { var e = this; if (!e.params.loop && e.navigation) { var t = e.navigation,\r\n                        a = t.$nextEl,\r\n                        i = t.$prevEl;\r\n                    i && i.length > 0 && (e.isBeginning ? (e.a11y.disableEl(i), e.a11y.makeElNotFocusable(i)) : (e.a11y.enableEl(i), e.a11y.makeElFocusable(i))), a && a.length > 0 && (e.isEnd ? (e.a11y.disableEl(a), e.a11y.makeElNotFocusable(a)) : (e.a11y.enableEl(a), e.a11y.makeElFocusable(a))) } }, updatePagination: function() { var e = this,\r\n                    t = e.params.a11y;\r\n                e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.bullets.each((function(a) { var i = m(a);\r\n                    e.a11y.makeElFocusable(i), e.params.pagination.renderBullet || (e.a11y.addElRole(i, \"button\"), e.a11y.addElLabel(i, t.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, i.index() + 1))) })) }, init: function() { var e = this,\r\n                    t = e.params.a11y;\r\n                e.$el.append(e.a11y.liveRegion); var a = e.$el;\r\n                t.containerRoleDescriptionMessage && e.a11y.addElRoleDescription(a, t.containerRoleDescriptionMessage), t.containerMessage && e.a11y.addElLabel(a, t.containerMessage); var i, s, r, n = e.$wrapperEl,\r\n                    o = n.attr(\"id\") || \"swiper-wrapper-\" + e.a11y.getRandomNumber(16);\r\n                e.a11y.addElId(n, o), i = e.params.autoplay && e.params.autoplay.enabled ? \"off\" : \"polite\", e.a11y.addElLive(n, i), t.itemRoleDescriptionMessage && e.a11y.addElRoleDescription(m(e.slides), t.itemRoleDescriptionMessage), e.a11y.addElRole(m(e.slides), \"group\"), e.slides.each((function(a) { var i = m(a),\r\n                        s = t.slideLabelMessage.replace(/\\{\\{index\\}\\}/, i.index() + 1).replace(/\\{\\{slidesLength\\}\\}/, e.slides.length);\r\n                    e.a11y.addElLabel(i, s) })), e.navigation && e.navigation.$nextEl && (s = e.navigation.$nextEl), e.navigation && e.navigation.$prevEl && (r = e.navigation.$prevEl), s && s.length && (e.a11y.makeElFocusable(s), \"BUTTON\" !== s[0].tagName && (e.a11y.addElRole(s, \"button\"), s.on(\"keydown\", e.a11y.onEnterOrSpaceKey)), e.a11y.addElLabel(s, t.nextSlideMessage), e.a11y.addElControls(s, o)), r && r.length && (e.a11y.makeElFocusable(r), \"BUTTON\" !== r[0].tagName && (e.a11y.addElRole(r, \"button\"), r.on(\"keydown\", e.a11y.onEnterOrSpaceKey)), e.a11y.addElLabel(r, t.prevSlideMessage), e.a11y.addElControls(r, o)), e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.$el.on(\"keydown\", z(e.params.pagination.bulletClass), e.a11y.onEnterOrSpaceKey) }, destroy: function() { var e, t, a = this;\r\n                a.a11y.liveRegion && a.a11y.liveRegion.length > 0 && a.a11y.liveRegion.remove(), a.navigation && a.navigation.$nextEl && (e = a.navigation.$nextEl), a.navigation && a.navigation.$prevEl && (t = a.navigation.$prevEl), e && e.off(\"keydown\", a.a11y.onEnterOrSpaceKey), t && t.off(\"keydown\", a.a11y.onEnterOrSpaceKey), a.pagination && a.params.pagination.clickable && a.pagination.bullets && a.pagination.bullets.length && a.pagination.$el.off(\"keydown\", z(a.params.pagination.bulletClass), a.a11y.onEnterOrSpaceKey) } },\r\n        re = { init: function() { var e = this,\r\n                    t = o(); if (e.params.history) { if (!t.history || !t.history.pushState) return e.params.history.enabled = !1, void(e.params.hashNavigation.enabled = !0); var a = e.history;\r\n                    a.initialized = !0, a.paths = re.getPathValues(e.params.url), (a.paths.key || a.paths.value) && (a.scrollToSlide(0, a.paths.value, e.params.runCallbacksOnInit), e.params.history.replaceState || t.addEventListener(\"popstate\", e.history.setHistoryPopState)) } }, destroy: function() { var e = o();\r\n                this.params.history.replaceState || e.removeEventListener(\"popstate\", this.history.setHistoryPopState) }, setHistoryPopState: function() { var e = this;\r\n                e.history.paths = re.getPathValues(e.params.url), e.history.scrollToSlide(e.params.speed, e.history.paths.value, !1) }, getPathValues: function(e) { var t = o(),\r\n                    a = (e ? new URL(e) : t.location).pathname.slice(1).split(\"/\").filter((function(e) { return \"\" !== e })),\r\n                    i = a.length; return { key: a[i - 2], value: a[i - 1] } }, setHistory: function(e, t) { var a = this,\r\n                    i = o(); if (a.history.initialized && a.params.history.enabled) { var s;\r\n                    s = a.params.url ? new URL(a.params.url) : i.location; var r = a.slides.eq(t),\r\n                        n = re.slugify(r.attr(\"data-history\"));\r\n                    s.pathname.includes(e) || (n = e + \"/\" + n); var l = i.history.state;\r\n                    l && l.value === n || (a.params.history.replaceState ? i.history.replaceState({ value: n }, null, n) : i.history.pushState({ value: n }, null, n)) } }, slugify: function(e) { return e.toString().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\") }, scrollToSlide: function(e, t, a) { var i = this; if (t)\r\n                    for (var s = 0, r = i.slides.length; s < r; s += 1) { var n = i.slides.eq(s); if (re.slugify(n.attr(\"data-history\")) === t && !n.hasClass(i.params.slideDuplicateClass)) { var o = n.index();\r\n                            i.slideTo(o, e, a) } } else i.slideTo(0, e, a) } },\r\n        ne = { onHashCange: function() { var e = this,\r\n                    t = r();\r\n                e.emit(\"hashChange\"); var a = t.location.hash.replace(\"#\", \"\"); if (a !== e.slides.eq(e.activeIndex).attr(\"data-hash\")) { var i = e.$wrapperEl.children(\".\" + e.params.slideClass + '[data-hash=\"' + a + '\"]').index(); if (void 0 === i) return;\r\n                    e.slideTo(i) } }, setHash: function() { var e = this,\r\n                    t = o(),\r\n                    a = r(); if (e.hashNavigation.initialized && e.params.hashNavigation.enabled)\r\n                    if (e.params.hashNavigation.replaceState && t.history && t.history.replaceState) t.history.replaceState(null, null, \"#\" + e.slides.eq(e.activeIndex).attr(\"data-hash\") || \"\"), e.emit(\"hashSet\");\r\n                    else { var i = e.slides.eq(e.activeIndex),\r\n                            s = i.attr(\"data-hash\") || i.attr(\"data-history\");\r\n                        a.location.hash = s || \"\", e.emit(\"hashSet\") } }, init: function() { var e = this,\r\n                    t = r(),\r\n                    a = o(); if (!(!e.params.hashNavigation.enabled || e.params.history && e.params.history.enabled)) { e.hashNavigation.initialized = !0; var i = t.location.hash.replace(\"#\", \"\"); if (i)\r\n                        for (var s = 0, n = e.slides.length; s < n; s += 1) { var l = e.slides.eq(s); if ((l.attr(\"data-hash\") || l.attr(\"data-history\")) === i && !l.hasClass(e.params.slideDuplicateClass)) { var d = l.index();\r\n                                e.slideTo(d, 0, e.params.runCallbacksOnInit, !0) } } e.params.hashNavigation.watchState && m(a).on(\"hashchange\", e.hashNavigation.onHashCange) } }, destroy: function() { var e = o();\r\n                this.params.hashNavigation.watchState && m(e).off(\"hashchange\", this.hashNavigation.onHashCange) } },\r\n        oe = { run: function() { var e = this,\r\n                    t = e.slides.eq(e.activeIndex),\r\n                    a = e.params.autoplay.delay;\r\n                t.attr(\"data-swiper-autoplay\") && (a = t.attr(\"data-swiper-autoplay\") || e.params.autoplay.delay), clearTimeout(e.autoplay.timeout), e.autoplay.timeout = E((function() { var t;\r\n                    e.params.autoplay.reverseDirection ? e.params.loop ? (e.loopFix(), t = e.slidePrev(e.params.speed, !0, !0), e.emit(\"autoplay\")) : e.isBeginning ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (t = e.slideTo(e.slides.length - 1, e.params.speed, !0, !0), e.emit(\"autoplay\")) : (t = e.slidePrev(e.params.speed, !0, !0), e.emit(\"autoplay\")) : e.params.loop ? (e.loopFix(), t = e.slideNext(e.params.speed, !0, !0), e.emit(\"autoplay\")) : e.isEnd ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (t = e.slideTo(0, e.params.speed, !0, !0), e.emit(\"autoplay\")) : (t = e.slideNext(e.params.speed, !0, !0), e.emit(\"autoplay\")), (e.params.cssMode && e.autoplay.running || !1 === t) && e.autoplay.run() }), a) }, start: function() { var e = this; return void 0 === e.autoplay.timeout && (!e.autoplay.running && (e.autoplay.running = !0, e.emit(\"autoplayStart\"), e.autoplay.run(), !0)) }, stop: function() { var e = this; return !!e.autoplay.running && (void 0 !== e.autoplay.timeout && (e.autoplay.timeout && (clearTimeout(e.autoplay.timeout), e.autoplay.timeout = void 0), e.autoplay.running = !1, e.emit(\"autoplayStop\"), !0)) }, pause: function(e) { var t = this;\r\n                t.autoplay.running && (t.autoplay.paused || (t.autoplay.timeout && clearTimeout(t.autoplay.timeout), t.autoplay.paused = !0, 0 !== e && t.params.autoplay.waitForTransition ? (t.$wrapperEl[0].addEventListener(\"transitionend\", t.autoplay.onTransitionEnd), t.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", t.autoplay.onTransitionEnd)) : (t.autoplay.paused = !1, t.autoplay.run()))) }, onVisibilityChange: function() { var e = this,\r\n                    t = r(); \"hidden\" === t.visibilityState && e.autoplay.running && e.autoplay.pause(), \"visible\" === t.visibilityState && e.autoplay.paused && (e.autoplay.run(), e.autoplay.paused = !1) }, onTransitionEnd: function(e) { var t = this;\r\n                t && !t.destroyed && t.$wrapperEl && e.target === t.$wrapperEl[0] && (t.$wrapperEl[0].removeEventListener(\"transitionend\", t.autoplay.onTransitionEnd), t.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", t.autoplay.onTransitionEnd), t.autoplay.paused = !1, t.autoplay.running ? t.autoplay.run() : t.autoplay.stop()) } },\r\n        le = { setTranslate: function() { for (var e = this, t = e.slides, a = 0; a < t.length; a += 1) { var i = e.slides.eq(a),\r\n                        s = -i[0].swiperSlideOffset;\r\n                    e.params.virtualTranslate || (s -= e.translate); var r = 0;\r\n                    e.isHorizontal() || (r = s, s = 0); var n = e.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(i[0].progress), 0) : 1 + Math.min(Math.max(i[0].progress, -1), 0);\r\n                    i.css({ opacity: n }).transform(\"translate3d(\" + s + \"px, \" + r + \"px, 0px)\") } }, setTransition: function(e) { var t = this,\r\n                    a = t.slides,\r\n                    i = t.$wrapperEl; if (a.transition(e), t.params.virtualTranslate && 0 !== e) { var s = !1;\r\n                    a.transitionEnd((function() { if (!s && t && !t.destroyed) { s = !0, t.animating = !1; for (var e = [\"webkitTransitionEnd\", \"transitionend\"], a = 0; a < e.length; a += 1) i.trigger(e[a]) } })) } } },\r\n        de = { setTranslate: function() { var e, t = this,\r\n                    a = t.$el,\r\n                    i = t.$wrapperEl,\r\n                    s = t.slides,\r\n                    r = t.width,\r\n                    n = t.height,\r\n                    o = t.rtlTranslate,\r\n                    l = t.size,\r\n                    d = t.browser,\r\n                    p = t.params.cubeEffect,\r\n                    c = t.isHorizontal(),\r\n                    u = t.virtual && t.params.virtual.enabled,\r\n                    h = 0;\r\n                p.shadow && (c ? (0 === (e = i.find(\".swiper-cube-shadow\")).length && (e = m('<div class=\"swiper-cube-shadow\"></div>'), i.append(e)), e.css({ height: r + \"px\" })) : 0 === (e = a.find(\".swiper-cube-shadow\")).length && (e = m('<div class=\"swiper-cube-shadow\"></div>'), a.append(e))); for (var v = 0; v < s.length; v += 1) { var f = s.eq(v),\r\n                        g = v;\r\n                    u && (g = parseInt(f.attr(\"data-swiper-slide-index\"), 10)); var b = 90 * g,\r\n                        w = Math.floor(b / 360);\r\n                    o && (b = -b, w = Math.floor(-b / 360)); var y = Math.max(Math.min(f[0].progress, 1), -1),\r\n                        E = 0,\r\n                        x = 0,\r\n                        T = 0;\r\n                    g % 4 == 0 ? (E = 4 * -w * l, T = 0) : (g - 1) % 4 == 0 ? (E = 0, T = 4 * -w * l) : (g - 2) % 4 == 0 ? (E = l + 4 * w * l, T = l) : (g - 3) % 4 == 0 && (E = -l, T = 3 * l + 4 * l * w), o && (E = -E), c || (x = E, E = 0); var S = \"rotateX(\" + (c ? 0 : -b) + \"deg) rotateY(\" + (c ? b : 0) + \"deg) translate3d(\" + E + \"px, \" + x + \"px, \" + T + \"px)\"; if (y <= 1 && y > -1 && (h = 90 * g + 90 * y, o && (h = 90 * -g - 90 * y)), f.transform(S), p.slideShadows) { var C = c ? f.find(\".swiper-slide-shadow-left\") : f.find(\".swiper-slide-shadow-top\"),\r\n                            M = c ? f.find(\".swiper-slide-shadow-right\") : f.find(\".swiper-slide-shadow-bottom\");\r\n                        0 === C.length && (C = m('<div class=\"swiper-slide-shadow-' + (c ? \"left\" : \"top\") + '\"></div>'), f.append(C)), 0 === M.length && (M = m('<div class=\"swiper-slide-shadow-' + (c ? \"right\" : \"bottom\") + '\"></div>'), f.append(M)), C.length && (C[0].style.opacity = Math.max(-y, 0)), M.length && (M[0].style.opacity = Math.max(y, 0)) } } if (i.css({ \"-webkit-transform-origin\": \"50% 50% -\" + l / 2 + \"px\", \"-moz-transform-origin\": \"50% 50% -\" + l / 2 + \"px\", \"-ms-transform-origin\": \"50% 50% -\" + l / 2 + \"px\", \"transform-origin\": \"50% 50% -\" + l / 2 + \"px\" }), p.shadow)\r\n                    if (c) e.transform(\"translate3d(0px, \" + (r / 2 + p.shadowOffset) + \"px, \" + -r / 2 + \"px) rotateX(90deg) rotateZ(0deg) scale(\" + p.shadowScale + \")\");\r\n                    else { var z = Math.abs(h) - 90 * Math.floor(Math.abs(h) / 90),\r\n                            P = 1.5 - (Math.sin(2 * z * Math.PI / 360) / 2 + Math.cos(2 * z * Math.PI / 360) / 2),\r\n                            k = p.shadowScale,\r\n                            L = p.shadowScale / P,\r\n                            $ = p.shadowOffset;\r\n                        e.transform(\"scale3d(\" + k + \", 1, \" + L + \") translate3d(0px, \" + (n / 2 + $) + \"px, \" + -n / 2 / L + \"px) rotateX(-90deg)\") } var I = d.isSafari || d.isWebView ? -l / 2 : 0;\r\n                i.transform(\"translate3d(0px,0,\" + I + \"px) rotateX(\" + (t.isHorizontal() ? 0 : h) + \"deg) rotateY(\" + (t.isHorizontal() ? -h : 0) + \"deg)\") }, setTransition: function(e) { var t = this,\r\n                    a = t.$el;\r\n                t.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), t.params.cubeEffect.shadow && !t.isHorizontal() && a.find(\".swiper-cube-shadow\").transition(e) } },\r\n        pe = { setTranslate: function() { for (var e = this, t = e.slides, a = e.rtlTranslate, i = 0; i < t.length; i += 1) { var s = t.eq(i),\r\n                        r = s[0].progress;\r\n                    e.params.flipEffect.limitRotation && (r = Math.max(Math.min(s[0].progress, 1), -1)); var n = -180 * r,\r\n                        o = 0,\r\n                        l = -s[0].swiperSlideOffset,\r\n                        d = 0; if (e.isHorizontal() ? a && (n = -n) : (d = l, l = 0, o = -n, n = 0), s[0].style.zIndex = -Math.abs(Math.round(r)) + t.length, e.params.flipEffect.slideShadows) { var p = e.isHorizontal() ? s.find(\".swiper-slide-shadow-left\") : s.find(\".swiper-slide-shadow-top\"),\r\n                            c = e.isHorizontal() ? s.find(\".swiper-slide-shadow-right\") : s.find(\".swiper-slide-shadow-bottom\");\r\n                        0 === p.length && (p = m('<div class=\"swiper-slide-shadow-' + (e.isHorizontal() ? \"left\" : \"top\") + '\"></div>'), s.append(p)), 0 === c.length && (c = m('<div class=\"swiper-slide-shadow-' + (e.isHorizontal() ? \"right\" : \"bottom\") + '\"></div>'), s.append(c)), p.length && (p[0].style.opacity = Math.max(-r, 0)), c.length && (c[0].style.opacity = Math.max(r, 0)) } s.transform(\"translate3d(\" + l + \"px, \" + d + \"px, 0px) rotateX(\" + o + \"deg) rotateY(\" + n + \"deg)\") } }, setTransition: function(e) { var t = this,\r\n                    a = t.slides,\r\n                    i = t.activeIndex,\r\n                    s = t.$wrapperEl; if (a.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), t.params.virtualTranslate && 0 !== e) { var r = !1;\r\n                    a.eq(i).transitionEnd((function() { if (!r && t && !t.destroyed) { r = !0, t.animating = !1; for (var e = [\"webkitTransitionEnd\", \"transitionend\"], a = 0; a < e.length; a += 1) s.trigger(e[a]) } })) } } },\r\n        ce = { setTranslate: function() { for (var e = this, t = e.width, a = e.height, i = e.slides, s = e.slidesSizesGrid, r = e.params.coverflowEffect, n = e.isHorizontal(), o = e.translate, l = n ? t / 2 - o : a / 2 - o, d = n ? r.rotate : -r.rotate, p = r.depth, c = 0, u = i.length; c < u; c += 1) { var h = i.eq(c),\r\n                        v = s[c],\r\n                        f = (l - h[0].swiperSlideOffset - v / 2) / v * r.modifier,\r\n                        g = n ? d * f : 0,\r\n                        b = n ? 0 : d * f,\r\n                        w = -p * Math.abs(f),\r\n                        y = r.stretch; \"string\" == typeof y && -1 !== y.indexOf(\"%\") && (y = parseFloat(r.stretch) / 100 * v); var E = n ? 0 : y * f,\r\n                        x = n ? y * f : 0,\r\n                        T = 1 - (1 - r.scale) * Math.abs(f);\r\n                    Math.abs(x) < .001 && (x = 0), Math.abs(E) < .001 && (E = 0), Math.abs(w) < .001 && (w = 0), Math.abs(g) < .001 && (g = 0), Math.abs(b) < .001 && (b = 0), Math.abs(T) < .001 && (T = 0); var S = \"translate3d(\" + x + \"px,\" + E + \"px,\" + w + \"px)  rotateX(\" + b + \"deg) rotateY(\" + g + \"deg) scale(\" + T + \")\"; if (h.transform(S), h[0].style.zIndex = 1 - Math.abs(Math.round(f)), r.slideShadows) { var C = n ? h.find(\".swiper-slide-shadow-left\") : h.find(\".swiper-slide-shadow-top\"),\r\n                            M = n ? h.find(\".swiper-slide-shadow-right\") : h.find(\".swiper-slide-shadow-bottom\");\r\n                        0 === C.length && (C = m('<div class=\"swiper-slide-shadow-' + (n ? \"left\" : \"top\") + '\"></div>'), h.append(C)), 0 === M.length && (M = m('<div class=\"swiper-slide-shadow-' + (n ? \"right\" : \"bottom\") + '\"></div>'), h.append(M)), C.length && (C[0].style.opacity = f > 0 ? f : 0), M.length && (M[0].style.opacity = -f > 0 ? -f : 0) } } }, setTransition: function(e) { this.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e) } },\r\n        ue = { init: function() { var e = this,\r\n                    t = e.params.thumbs; if (e.thumbs.initialized) return !1;\r\n                e.thumbs.initialized = !0; var a = e.constructor; return t.swiper instanceof a ? (e.thumbs.swiper = t.swiper, C(e.thumbs.swiper.originalParams, { watchSlidesProgress: !0, slideToClickedSlide: !1 }), C(e.thumbs.swiper.params, { watchSlidesProgress: !0, slideToClickedSlide: !1 })) : S(t.swiper) && (e.thumbs.swiper = new a(C({}, t.swiper, { watchSlidesVisibility: !0, watchSlidesProgress: !0, slideToClickedSlide: !1 })), e.thumbs.swiperCreated = !0), e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass), e.thumbs.swiper.on(\"tap\", e.thumbs.onThumbClick), !0 }, onThumbClick: function() { var e = this,\r\n                    t = e.thumbs.swiper; if (t) { var a = t.clickedIndex,\r\n                        i = t.clickedSlide; if (!(i && m(i).hasClass(e.params.thumbs.slideThumbActiveClass) || null == a)) { var s; if (s = t.params.loop ? parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"), 10) : a, e.params.loop) { var r = e.activeIndex;\r\n                            e.slides.eq(r).hasClass(e.params.slideDuplicateClass) && (e.loopFix(), e._clientLeft = e.$wrapperEl[0].clientLeft, r = e.activeIndex); var n = e.slides.eq(r).prevAll('[data-swiper-slide-index=\"' + s + '\"]').eq(0).index(),\r\n                                o = e.slides.eq(r).nextAll('[data-swiper-slide-index=\"' + s + '\"]').eq(0).index();\r\n                            s = void 0 === n ? o : void 0 === o ? n : o - r < r - n ? o : n } e.slideTo(s) } } }, update: function(e) { var t = this,\r\n                    a = t.thumbs.swiper; if (a) { var i = \"auto\" === a.params.slidesPerView ? a.slidesPerViewDynamic() : a.params.slidesPerView,\r\n                        s = t.params.thumbs.autoScrollOffset,\r\n                        r = s && !a.params.loop; if (t.realIndex !== a.realIndex || r) { var n, o, l = a.activeIndex; if (a.params.loop) { a.slides.eq(l).hasClass(a.params.slideDuplicateClass) && (a.loopFix(), a._clientLeft = a.$wrapperEl[0].clientLeft, l = a.activeIndex); var d = a.slides.eq(l).prevAll('[data-swiper-slide-index=\"' + t.realIndex + '\"]').eq(0).index(),\r\n                                p = a.slides.eq(l).nextAll('[data-swiper-slide-index=\"' + t.realIndex + '\"]').eq(0).index();\r\n                            n = void 0 === d ? p : void 0 === p ? d : p - l == l - d ? l : p - l < l - d ? p : d, o = t.activeIndex > t.previousIndex ? \"next\" : \"prev\" } else o = (n = t.realIndex) > t.previousIndex ? \"next\" : \"prev\";\r\n                        r && (n += \"next\" === o ? s : -1 * s), a.visibleSlidesIndexes && a.visibleSlidesIndexes.indexOf(n) < 0 && (a.params.centeredSlides ? n = n > l ? n - Math.floor(i / 2) + 1 : n + Math.floor(i / 2) - 1 : n > l && (n = n - i + 1), a.slideTo(n, e ? 0 : void 0)) } var c = 1,\r\n                        u = t.params.thumbs.slideThumbActiveClass; if (t.params.slidesPerView > 1 && !t.params.centeredSlides && (c = t.params.slidesPerView), t.params.thumbs.multipleActiveThumbs || (c = 1), c = Math.floor(c), a.slides.removeClass(u), a.params.loop || a.params.virtual && a.params.virtual.enabled)\r\n                        for (var h = 0; h < c; h += 1) a.$wrapperEl.children('[data-swiper-slide-index=\"' + (t.realIndex + h) + '\"]').addClass(u);\r\n                    else\r\n                        for (var v = 0; v < c; v += 1) a.slides.eq(t.realIndex + v).addClass(u) } } },\r\n        he = [q, U, { name: \"mousewheel\", params: { mousewheel: { enabled: !1, releaseOnEdges: !1, invert: !1, forceToAxis: !1, sensitivity: 1, eventsTarget: \"container\", thresholdDelta: null, thresholdTime: null } }, create: function() { M(this, { mousewheel: { enabled: !1, lastScrollTime: x(), lastEventBeforeSnap: void 0, recentWheelEvents: [], enable: K.enable, disable: K.disable, handle: K.handle, handleMouseEnter: K.handleMouseEnter, handleMouseLeave: K.handleMouseLeave, animateSlider: K.animateSlider, releaseScroll: K.releaseScroll } }) }, on: { init: function(e) {!e.params.mousewheel.enabled && e.params.cssMode && e.mousewheel.disable(), e.params.mousewheel.enabled && e.mousewheel.enable() }, destroy: function(e) { e.params.cssMode && e.mousewheel.enable(), e.mousewheel.enabled && e.mousewheel.disable() } } }, { name: \"navigation\", params: { navigation: { nextEl: null, prevEl: null, hideOnClick: !1, disabledClass: \"swiper-button-disabled\", hiddenClass: \"swiper-button-hidden\", lockClass: \"swiper-button-lock\" } }, create: function() { M(this, { navigation: t({}, Z) }) }, on: { init: function(e) { e.navigation.init(), e.navigation.update() }, toEdge: function(e) { e.navigation.update() }, fromEdge: function(e) { e.navigation.update() }, destroy: function(e) { e.navigation.destroy() }, click: function(e, t) { var a = e.navigation,\r\n                        i = a.$nextEl,\r\n                        s = a.$prevEl,\r\n                        r = t.target; if (e.params.navigation.hideOnClick && !m(r).is(s) && !m(r).is(i)) { if (e.pagination && e.params.pagination && e.params.pagination.clickable && (e.pagination.el === r || e.pagination.el.contains(r))) return; var n;\r\n                        i ? n = i.hasClass(e.params.navigation.hiddenClass) : s && (n = s.hasClass(e.params.navigation.hiddenClass)), !0 === n ? e.emit(\"navigationShow\") : e.emit(\"navigationHide\"), i && i.toggleClass(e.params.navigation.hiddenClass), s && s.toggleClass(e.params.navigation.hiddenClass) } } } }, { name: \"pagination\", params: { pagination: { el: null, bulletElement: \"span\", clickable: !1, hideOnClick: !1, renderBullet: null, renderProgressbar: null, renderFraction: null, renderCustom: null, progressbarOpposite: !1, type: \"bullets\", dynamicBullets: !1, dynamicMainBullets: 1, formatFractionCurrent: function(e) { return e }, formatFractionTotal: function(e) { return e }, bulletClass: \"swiper-pagination-bullet\", bulletActiveClass: \"swiper-pagination-bullet-active\", modifierClass: \"swiper-pagination-\", currentClass: \"swiper-pagination-current\", totalClass: \"swiper-pagination-total\", hiddenClass: \"swiper-pagination-hidden\", progressbarFillClass: \"swiper-pagination-progressbar-fill\", progressbarOppositeClass: \"swiper-pagination-progressbar-opposite\", clickableClass: \"swiper-pagination-clickable\", lockClass: \"swiper-pagination-lock\" } }, create: function() { M(this, { pagination: t({ dynamicBulletIndex: 0 }, J) }) }, on: { init: function(e) { e.pagination.init(), e.pagination.render(), e.pagination.update() }, activeIndexChange: function(e) {\r\n                    (e.params.loop || void 0 === e.snapIndex) && e.pagination.update() }, snapIndexChange: function(e) { e.params.loop || e.pagination.update() }, slidesLengthChange: function(e) { e.params.loop && (e.pagination.render(), e.pagination.update()) }, snapGridLengthChange: function(e) { e.params.loop || (e.pagination.render(), e.pagination.update()) }, destroy: function(e) { e.pagination.destroy() }, click: function(e, t) { var a = t.target; if (e.params.pagination.el && e.params.pagination.hideOnClick && e.pagination.$el.length > 0 && !m(a).hasClass(e.params.pagination.bulletClass)) { if (e.navigation && (e.navigation.nextEl && a === e.navigation.nextEl || e.navigation.prevEl && a === e.navigation.prevEl)) return;!0 === e.pagination.$el.hasClass(e.params.pagination.hiddenClass) ? e.emit(\"paginationShow\") : e.emit(\"paginationHide\"), e.pagination.$el.toggleClass(e.params.pagination.hiddenClass) } } } }, { name: \"scrollbar\", params: { scrollbar: { el: null, dragSize: \"auto\", hide: !1, draggable: !1, snapOnRelease: !0, lockClass: \"swiper-scrollbar-lock\", dragClass: \"swiper-scrollbar-drag\" } }, create: function() { M(this, { scrollbar: t({ isTouched: !1, timeout: null, dragTimeout: null }, Q) }) }, on: { init: function(e) { e.scrollbar.init(), e.scrollbar.updateSize(), e.scrollbar.setTranslate() }, update: function(e) { e.scrollbar.updateSize() }, resize: function(e) { e.scrollbar.updateSize() }, observerUpdate: function(e) { e.scrollbar.updateSize() }, setTranslate: function(e) { e.scrollbar.setTranslate() }, setTransition: function(e, t) { e.scrollbar.setTransition(t) }, destroy: function(e) { e.scrollbar.destroy() } } }, { name: \"parallax\", params: { parallax: { enabled: !1 } }, create: function() { M(this, { parallax: t({}, ee) }) }, on: { beforeInit: function(e) { e.params.parallax.enabled && (e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0) }, init: function(e) { e.params.parallax.enabled && e.parallax.setTranslate() }, setTranslate: function(e) { e.params.parallax.enabled && e.parallax.setTranslate() }, setTransition: function(e, t) { e.params.parallax.enabled && e.parallax.setTransition(t) } } }, { name: \"zoom\", params: { zoom: { enabled: !1, maxRatio: 3, minRatio: 1, toggle: !0, containerClass: \"swiper-zoom-container\", zoomedSlideClass: \"swiper-slide-zoomed\" } }, create: function() { var e = this;\r\n                M(e, { zoom: t({ enabled: !1, scale: 1, currentScale: 1, isScaling: !1, gesture: { $slideEl: void 0, slideWidth: void 0, slideHeight: void 0, $imageEl: void 0, $imageWrapEl: void 0, maxRatio: 3 }, image: { isTouched: void 0, isMoved: void 0, currentX: void 0, currentY: void 0, minX: void 0, minY: void 0, maxX: void 0, maxY: void 0, width: void 0, height: void 0, startX: void 0, startY: void 0, touchesStart: {}, touchesCurrent: {} }, velocity: { x: void 0, y: void 0, prevPositionX: void 0, prevPositionY: void 0, prevTime: void 0 } }, te) }); var a = 1;\r\n                Object.defineProperty(e.zoom, \"scale\", { get: function() { return a }, set: function(t) { if (a !== t) { var i = e.zoom.gesture.$imageEl ? e.zoom.gesture.$imageEl[0] : void 0,\r\n                                s = e.zoom.gesture.$slideEl ? e.zoom.gesture.$slideEl[0] : void 0;\r\n                            e.emit(\"zoomChange\", t, i, s) } a = t } }) }, on: { init: function(e) { e.params.zoom.enabled && e.zoom.enable() }, destroy: function(e) { e.zoom.disable() }, touchStart: function(e, t) { e.zoom.enabled && e.zoom.onTouchStart(t) }, touchEnd: function(e, t) { e.zoom.enabled && e.zoom.onTouchEnd(t) }, doubleTap: function(e, t) {!e.animating && e.params.zoom.enabled && e.zoom.enabled && e.params.zoom.toggle && e.zoom.toggle(t) }, transitionEnd: function(e) { e.zoom.enabled && e.params.zoom.enabled && e.zoom.onTransitionEnd() }, slideChange: function(e) { e.zoom.enabled && e.params.zoom.enabled && e.params.cssMode && e.zoom.onTransitionEnd() } } }, { name: \"lazy\", params: { lazy: { checkInView: !1, enabled: !1, loadPrevNext: !1, loadPrevNextAmount: 1, loadOnTransitionStart: !1, scrollingElement: \"\", elementClass: \"swiper-lazy\", loadingClass: \"swiper-lazy-loading\", loadedClass: \"swiper-lazy-loaded\", preloaderClass: \"swiper-lazy-preloader\" } }, create: function() { M(this, { lazy: t({ initialImageLoaded: !1 }, ae) }) }, on: { beforeInit: function(e) { e.params.lazy.enabled && e.params.preloadImages && (e.params.preloadImages = !1) }, init: function(e) { e.params.lazy.enabled && !e.params.loop && 0 === e.params.initialSlide && (e.params.lazy.checkInView ? e.lazy.checkInViewOnLoad() : e.lazy.load()) }, scroll: function(e) { e.params.freeMode && !e.params.freeModeSticky && e.lazy.load() }, \"scrollbarDragMove resize _freeModeNoMomentumRelease\": function(e) { e.params.lazy.enabled && e.lazy.load() }, transitionStart: function(e) { e.params.lazy.enabled && (e.params.lazy.loadOnTransitionStart || !e.params.lazy.loadOnTransitionStart && !e.lazy.initialImageLoaded) && e.lazy.load() }, transitionEnd: function(e) { e.params.lazy.enabled && !e.params.lazy.loadOnTransitionStart && e.lazy.load() }, slideChange: function(e) { e.params.lazy.enabled && e.params.cssMode && e.lazy.load() } } }, { name: \"controller\", params: { controller: { control: void 0, inverse: !1, by: \"slide\" } }, create: function() { M(this, { controller: t({ control: this.params.controller.control }, ie) }) }, on: { update: function(e) { e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline) }, resize: function(e) { e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline) }, observerUpdate: function(e) { e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline) }, setTranslate: function(e, t, a) { e.controller.control && e.controller.setTranslate(t, a) }, setTransition: function(e, t, a) { e.controller.control && e.controller.setTransition(t, a) } } }, { name: \"a11y\", params: { a11y: { enabled: !0, notificationClass: \"swiper-notification\", prevSlideMessage: \"Previous slide\", nextSlideMessage: \"Next slide\", firstSlideMessage: \"This is the first slide\", lastSlideMessage: \"This is the last slide\", paginationBulletMessage: \"Go to slide {{index}}\", slideLabelMessage: \"{{index}} / {{slidesLength}}\", containerMessage: null, containerRoleDescriptionMessage: null, itemRoleDescriptionMessage: null } }, create: function() { M(this, { a11y: t({}, se, { liveRegion: m('<span class=\"' + this.params.a11y.notificationClass + '\" aria-live=\"assertive\" aria-atomic=\"true\"></span>') }) }) }, on: { afterInit: function(e) { e.params.a11y.enabled && (e.a11y.init(), e.a11y.updateNavigation()) }, toEdge: function(e) { e.params.a11y.enabled && e.a11y.updateNavigation() }, fromEdge: function(e) { e.params.a11y.enabled && e.a11y.updateNavigation() }, paginationUpdate: function(e) { e.params.a11y.enabled && e.a11y.updatePagination() }, destroy: function(e) { e.params.a11y.enabled && e.a11y.destroy() } } }, { name: \"history\", params: { history: { enabled: !1, replaceState: !1, key: \"slides\" } }, create: function() { M(this, { history: t({}, re) }) }, on: { init: function(e) { e.params.history.enabled && e.history.init() }, destroy: function(e) { e.params.history.enabled && e.history.destroy() }, transitionEnd: function(e) { e.history.initialized && e.history.setHistory(e.params.history.key, e.activeIndex) }, slideChange: function(e) { e.history.initialized && e.params.cssMode && e.history.setHistory(e.params.history.key, e.activeIndex) } } }, { name: \"hash-navigation\", params: { hashNavigation: { enabled: !1, replaceState: !1, watchState: !1 } }, create: function() { M(this, { hashNavigation: t({ initialized: !1 }, ne) }) }, on: { init: function(e) { e.params.hashNavigation.enabled && e.hashNavigation.init() }, destroy: function(e) { e.params.hashNavigation.enabled && e.hashNavigation.destroy() }, transitionEnd: function(e) { e.hashNavigation.initialized && e.hashNavigation.setHash() }, slideChange: function(e) { e.hashNavigation.initialized && e.params.cssMode && e.hashNavigation.setHash() } } }, { name: \"autoplay\", params: { autoplay: { enabled: !1, delay: 3e3, waitForTransition: !0, disableOnInteraction: !0, stopOnLastSlide: !1, reverseDirection: !1 } }, create: function() { M(this, { autoplay: t({}, oe, { running: !1, paused: !1 }) }) }, on: { init: function(e) { e.params.autoplay.enabled && (e.autoplay.start(), r().addEventListener(\"visibilitychange\", e.autoplay.onVisibilityChange)) }, beforeTransitionStart: function(e, t, a) { e.autoplay.running && (a || !e.params.autoplay.disableOnInteraction ? e.autoplay.pause(t) : e.autoplay.stop()) }, sliderFirstMove: function(e) { e.autoplay.running && (e.params.autoplay.disableOnInteraction ? e.autoplay.stop() : e.autoplay.pause()) }, touchEnd: function(e) { e.params.cssMode && e.autoplay.paused && !e.params.autoplay.disableOnInteraction && e.autoplay.run() }, destroy: function(e) { e.autoplay.running && e.autoplay.stop(), r().removeEventListener(\"visibilitychange\", e.autoplay.onVisibilityChange) } } }, { name: \"effect-fade\", params: { fadeEffect: { crossFade: !1 } }, create: function() { M(this, { fadeEffect: t({}, le) }) }, on: { beforeInit: function(e) { if (\"fade\" === e.params.effect) { e.classNames.push(e.params.containerModifierClass + \"fade\"); var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 };\r\n                        C(e.params, t), C(e.originalParams, t) } }, setTranslate: function(e) { \"fade\" === e.params.effect && e.fadeEffect.setTranslate() }, setTransition: function(e, t) { \"fade\" === e.params.effect && e.fadeEffect.setTransition(t) } } }, { name: \"effect-cube\", params: { cubeEffect: { slideShadows: !0, shadow: !0, shadowOffset: 20, shadowScale: .94 } }, create: function() { M(this, { cubeEffect: t({}, de) }) }, on: { beforeInit: function(e) { if (\"cube\" === e.params.effect) { e.classNames.push(e.params.containerModifierClass + \"cube\"), e.classNames.push(e.params.containerModifierClass + \"3d\"); var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, resistanceRatio: 0, spaceBetween: 0, centeredSlides: !1, virtualTranslate: !0 };\r\n                        C(e.params, t), C(e.originalParams, t) } }, setTranslate: function(e) { \"cube\" === e.params.effect && e.cubeEffect.setTranslate() }, setTransition: function(e, t) { \"cube\" === e.params.effect && e.cubeEffect.setTransition(t) } } }, { name: \"effect-flip\", params: { flipEffect: { slideShadows: !0, limitRotation: !0 } }, create: function() { M(this, { flipEffect: t({}, pe) }) }, on: { beforeInit: function(e) { if (\"flip\" === e.params.effect) { e.classNames.push(e.params.containerModifierClass + \"flip\"), e.classNames.push(e.params.containerModifierClass + \"3d\"); var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 };\r\n                        C(e.params, t), C(e.originalParams, t) } }, setTranslate: function(e) { \"flip\" === e.params.effect && e.flipEffect.setTranslate() }, setTransition: function(e, t) { \"flip\" === e.params.effect && e.flipEffect.setTransition(t) } } }, { name: \"effect-coverflow\", params: { coverflowEffect: { rotate: 50, stretch: 0, depth: 100, scale: 1, modifier: 1, slideShadows: !0 } }, create: function() { M(this, { coverflowEffect: t({}, ce) }) }, on: { beforeInit: function(e) { \"coverflow\" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + \"coverflow\"), e.classNames.push(e.params.containerModifierClass + \"3d\"), e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0) }, setTranslate: function(e) { \"coverflow\" === e.params.effect && e.coverflowEffect.setTranslate() }, setTransition: function(e, t) { \"coverflow\" === e.params.effect && e.coverflowEffect.setTransition(t) } } }, { name: \"thumbs\", params: { thumbs: { swiper: null, multipleActiveThumbs: !0, autoScrollOffset: 0, slideThumbActiveClass: \"swiper-slide-thumb-active\", thumbsContainerClass: \"swiper-container-thumbs\" } }, create: function() { M(this, { thumbs: t({ swiper: null, initialized: !1 }, ue) }) }, on: { beforeInit: function(e) { var t = e.params.thumbs;\r\n                    t && t.swiper && (e.thumbs.init(), e.thumbs.update(!0)) }, slideChange: function(e) { e.thumbs.swiper && e.thumbs.update() }, update: function(e) { e.thumbs.swiper && e.thumbs.update() }, resize: function(e) { e.thumbs.swiper && e.thumbs.update() }, observerUpdate: function(e) { e.thumbs.swiper && e.thumbs.update() }, setTransition: function(e, t) { var a = e.thumbs.swiper;\r\n                    a && a.setTransition(t) }, beforeDestroy: function(e) { var t = e.thumbs.swiper;\r\n                    t && e.thumbs.swiperCreated && t && t.destroy() } } }]; return F.use(he), F }));\r\n//# sourceMappingURL=swiper-bundle.min.js.map"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:06.759Z",
        "time": 34.168000041972846,
        "timings": {
          "blocked": 26.55400003700331,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.3910000010132784,
          "receive": 6.223000003956258,
          "_blocked_queueing": 13.757000037003309,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "321385",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80624
              },
              {
                "functionName": "ajax",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 76166
              },
              {
                "functionName": "sendAnalytic",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 21574
              },
              {
                "functionName": "displayLoginPage",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20520
              },
              {
                "functionName": "entry",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2105
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7398
              },
              {
                "functionName": "r",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 19466
              }
            ],
            "parent": {
              "description": "postMessage",
              "callFrames": [
                {
                  "functionName": "completeEvent",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 26184
                },
                {
                  "functionName": "",
                  "scriptId": "57",
                  "url": "http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\170&chap_challenge=\\245\\345\\331\\134\\150\\331\\146\\353\\013\\120\\162\\166\\110\\312\\102\\251",
                  "lineNumber": 46,
                  "columnNumber": 44
                },
                {
                  "functionName": "dispatch",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 40034
                },
                {
                  "functionName": "ce.event.add.v.handle",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 38005
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "POST",
          "url": "http://v1.awingconnect.vn/Analytic/Send",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,vi;q=0.8"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "14022"
            },
            {
              "name": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "name": "Host",
              "value": "v1.awingconnect.vn"
            },
            {
              "name": "Origin",
              "value": "http://v1.awingconnect.vn"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 571,
          "bodySize": 14022,
          "postData": {
            "mimeType": "application/json; charset=UTF-8",
            "text": "{\"captiveContextDTO\":{\"token\":\"4114fb215e1779a10876348f42641a3fbc8c95a7\",\"captiveContext\":{\"campaignData\":{\"sessionId\":\"f67f01ba-50db-4ec2-b59a-fa8beff1b018\",\"macAddress\":\"26-17-2E-AE-22-79\",\"apMac\":\"CC-2D-E0-0E-00-0A\",\"placeId\":\"5408580173018081493\",\"domainId\":\"5476089696408447131\",\"url\":\"http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\\\170&chap_challenge=\\\\245\\\\345\\\\331\\\\134\\\\150\\\\331\\\\146\\\\353\\\\013\\\\120\\\\162\\\\166\\\\110\\\\312\\\\102\\\\251\",\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\",\"campaignId\":\"4961554445594984512\",\"campaignGroupId\":1,\"campaignAdId\":1,\"campaignType\":0,\"isNetworkCampaign\":false,\"loginId\":\"0\",\"loginHtml\":{\"commonHtml\":\"\",\"pageViews\":[{\"contentHtml\":\"<style>\\r\\n    @media (max-width: 768px) {\\r\\n        .header-text {\\r\\n            font-size: 14px;\\r\\n        }\\r\\n        .connect-button {\\r\\n            font-size: 12px;\\r\\n        }\\r\\n        .policy {\\r\\n            font-size: 12px;\\r\\n        }\\r\\n        .logo-img {\\r\\n            margin: 16px !important;\\r\\n        }\\r\\n        .adsbyawing {\\r\\n            font-size: 14px;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @media (max-width: 360px) {\\r\\n        .connect-button {\\r\\n            font-size: 11px;\\r\\n        }\\r\\n        .policy {\\r\\n            font-size: 11px;\\r\\n        }\\r\\n    }\\r\\n    @media (min-width: 1024px) {\\r\\n        .logo-wrapper {\\r\\n            max-width: 700px;\\r\\n        }\\r\\n    }\\r\\n</style>\\r\\n\\r\\n<div class=\\\"container-fluid text-center p-5\\\" style=\\\"background: #f5f5f5;\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n        <div class=\\\"col-md-10 col-lg-5 p-0 logo-wrapper\\\">\\r\\n            <div class=\\\"w-100 shadow-sm p-3 rounded\\\" style=\\\"background: #ffffff;\\\">\\r\\n                <p class=\\\"h5 header-text\\\" style=\\\"font-weight: bold\\\">Wi-Fi miễn phí tài trợ bởi</p>\\r\\n                <img id=\\\"logo\\\" class=\\\"w-75 m-4 logo-img\\\" src=\\\"/static/Files/lgn/5566897871528661947/Untitled-3.png\\\" />\\r\\n                <button id=\\\"logo_button\\\" class=\\\"btn btn-primary connect-button w-75\\\"\\r\\n                    style=\\\"min-height: 45px;\\\" onClick=\\\"awingStateMachineContextActions.nextView()\\\">\\r\\n                    <span>TIẾP TỤC ĐỂ KẾT NỐI INTERNET</span>\\r\\n                </button>\\r\\n                <div class=\\\"mt-1 policy\\\" style=\\\"color: #0000f5\\\">\\r\\n                    <p>Tôi đồng ý các điều khoản sử dụng Wi-Fi <a role=\\\"button\\\" class=\\\"awing-agreement\\\" onClick=\\\"awingUIActions.showAgreement()\\\">tại đây</a>\\r\\n                    </p>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"mt-4\\\" style=\\\"color: #5f6368\\\">\\r\\n                <u class=\\\"adsbyawing fw-bold d-flex justify-content-center align-items-center\\\" data-toggle=\\\"tooltip\\\" title=\\\"Email: contact@awing.vn\\r\\n                Hotline: 0901 05 05 17\\\"\\r\\n                    data-bs-placement=\\\"bottom\\\">Ads by AWING\\r\\n                    <div class=\\\"border border-light rounded-circle bg-secondary text-light mx-1 d-flex justify-content-center align-items-center\\\" style=\\\"width: 16px; height:16px; font-size: 10px;\\\">i</div>\\r\\n                </u>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<script>\\r\\n    let logoVariables = {\\r\\n        button: {\\r\\n            background: \\\"50b848\\\" ? \\\"#50b848\\\" : \\\"#ffffff\\\",\\r\\n            textColor: \\\"ffffff\\\" ? \\\"#ffffff\\\" : \\\"#231f20\\\"\\r\\n        },\\r\\n        options: {\\r\\n            isSquareLogo: false\\r\\n        }\\r\\n    }\\r\\n    $(\\\"#logo_button\\\").css({\\r\\n        background: logoVariables.button.background,\\r\\n        color: logoVariables.button.textColor,\\r\\n        border: logoVariables.button.background == \\\"#ffffff\\\" ? \\\"1px solid #231f20\\\" : \\\"none\\\"\\r\\n    })\\r\\n    if (logoVariables.options.isSquareLogo) {\\r\\n        $(\\\"#logo\\\").removeClass(\\\"w-75\\\")\\r\\n        $(\\\"#logo\\\").addClass(\\\"w-50\\\")\\r\\n    }\\r\\n    function startAnimation() {\\r\\n        $(document).ready(function () {\\r\\n            $('[data-toggle=\\\"tooltip\\\"]').tooltip();\\r\\n        });\\r\\n    }\\r\\n</script>\"},{\"contentHtml\":\"<link\\r\\nrel=\\\"stylesheet\\\"\\r\\nhref=\\\"/static/Files/template/5074619029972904036/swiper-bundle.min.css\\\"\\r\\n/>\\r\\n<script src=\\\"/static/Files/template/5074619029972904036/swiper-bundle.min.js\\\"></script>\\r\\n<link\\r\\nhref=\\\"/static/Files/template/5074619029972904036/template_slide_overflow_v2.1.css?v=2\\\"\\r\\nrel=\\\"stylesheet\\\"\\r\\n/>\\r\\n\\r\\n<style>\\r\\n@media (max-width: 768px) {\\r\\n    .connect-button {\\r\\n    font-size: 12px !important;\\r\\n    min-height: 50px !important;\\r\\n    }\\r\\n}\\r\\n.slide-item {\\r\\n    aspect-ratio: 600/860;\\r\\n}\\r\\n</style>\\r\\n\\r\\n<div id=\\\"slider-container\\\" class=\\\"container-fluid text-center p-0\\\">\\r\\n<div class=\\\"swiper-container p-0\\\">\\r\\n    <div\\r\\n        class=\\\"swiper-wrapper text-center p-0\\\"\\r\\n\\r\\n        id=\\\"slider-image\\\"\\r\\n    ></div>\\r\\n    <div id=\\\"btn-group\\\" class=\\\"w-100 z-3 position-absolute right-0 mb-md-5 mb-lg-3 mt-2 slide-button text-uppercase\\\">\\r\\n        <div class=\\\"swiper-pagination\\\"></div>\\r\\n        <button id=\\\"connectToInternet\\\" class=\\\"btn mt-2 connect-button text-uppercase awing-captive__blur\\\"\\r\\n            style=\\\"width: 80%; min-height: 45px; margin-bottom: 1em;\\\">\\r\\n            <span>\\r\\n                KẾT NỐI INTERNET SAU <br /><i> (CONNECTING IN) </i><i id=\\\"countdowntimer\\\" style=\\\"font-style: normal\\\">6S</i>\\r\\n            </span>\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n</div>\\r\\n<script>\\r\\nlet slideBannerVariables = {\\r\\n    banners: [{\\\"image\\\":\\\"/static/Files/lgn/5566897871528661947/TichDiemUuDai_600x860.png\\\",\\\"color\\\":\\\"fcf7cb\\\"},{\\\"image\\\":\\\"/static/Files/lgn/5566897871528661947/MuaThePhu600x860.png\\\",\\\"color\\\":\\\"58934a\\\"}],\\r\\n    connectButton: {\\r\\n        text: \\\"KẾT NỐI INTERNET\\\",\\r\\n        background: \\\"57bc53\\\" ? \\\"#57bc53\\\" : \\\"#ffffff\\\",\\r\\n        textColor: \\\"ffffff\\\" ? \\\"#ffffff\\\" : \\\"#231f20\\\"\\r\\n    },\\r\\n    slideOptions: {\\r\\n        loop: true,\\r\\n        slideTime: 3 >= 0 ?  3 :  2,\\r\\n        clickable: true,\\r\\n        skipTime: Number(6 || 0)\\r\\n    }\\r\\n}\\r\\nlet slideBannerFunctions = {\\r\\n    autoSwiper: ()=>{\\r\\n        let n = new Swiper(\\\".swiper-container\\\", {\\r\\n        pagination: \\\".swiper-pagination\\\",\\r\\n        nextButton: \\\".swiper-button-next\\\",\\r\\n        loop: slideBannerVariables.slideOptions.loop,\\r\\n        prevButton: !0,\\r\\n        paginationClickable: !0,\\r\\n        spaceBetween: 0,\\r\\n        centeredSlides: !0,\\r\\n        autoplay: {\\r\\n            delay: slideBannerVariables.slideOptions.slideTime * 1000,\\r\\n            stopOnLastSlide: slideBannerVariables.slideOptions.loop ? !1 : !0,\\r\\n        },\\r\\n        autoplayDisableOnInteraction: !1,\\r\\n        autoplayStopOnLast: !0,\\r\\n        preventClicks: !1,\\r\\n        preventClicksPropagation: !1,\\r\\n        pagination: { el: \\\".swiper-pagination\\\", clickable: !0 },\\r\\n        navigation: {\\r\\n            nextEl: \\\".swiper-button-next\\\",\\r\\n            prevEl: \\\".swiper-button-prev\\\",\\r\\n        },\\r\\n        });\\r\\n        $(\\\".swiper-pagination-clickable .swiper-pagination-bullet\\\").css(\\r\\n            \\\"background\\\",\\r\\n            slideBannerVariables.connectButton.background\\r\\n        );\\r\\n        return n;\\r\\n    },\\r\\n    countDown: (isClickable)=>{\\r\\n        let n = slideBannerVariables.slideOptions.skipTime;\\r\\n        e = setInterval(function () {\\r\\n            n--;\\r\\n            let o = document.getElementById(\\\"countdowntimer\\\");\\r\\n            if(o) {o.textContent = n + \\\"S\\\"}\\r\\n            if (n <= 0) {\\r\\n                    clearInterval(e);\\r\\n                    const img = $(\\\".image-next\\\");\\r\\n                    $(\\\"#connectToInternet\\\")\\r\\n                        .removeClass(\\\"disabled\\\")\\r\\n                        .removeClass(\\\"awing-captive__blur\\\")\\r\\n                        .click(function () {\\r\\n                            slideBannerFunctions.connectToWifi();\\r\\n                        });\\r\\n                    $(\\\"#connectToInternet span\\\").html(\\r\\n                        slideBannerVariables.connectButton.text + \\\"<br/><i>(INTERNET ACCESS)</i>\\\"\\r\\n                    );\\r\\n                    if(isClickable) {\\r\\n                    img.css(\\\"cursor\\\", \\\"pointer\\\");\\r\\n                    img.attr(\\\"onclick\\\", \\\"slideBannerFunctions.connectToWifi()\\\");\\r\\n                    }\\r\\n            }\\r\\n        }, n == 0 ? 0 : 1000);\\r\\n    },\\r\\n    connectToWifi: ()=>{\\r\\n        $(\\\".body-container\\\").css(\\\"background\\\", \\\"#F5F5F5\\\");\\r\\n        $(\\\".body-container\\\").css(\\\"min-height\\\", \\\"auto\\\");\\r\\n        awingStateMachineContextActions.nextView();\\r\\n    },\\r\\n}\\r\\nlet slide = document.getElementById(\\\"slider-image\\\");\\r\\nslideBannerVariables.banners.map((bannerItem, index) => {\\r\\n    const wrapper = document.createElement(\\\"div\\\")\\r\\n    wrapper.className += \\\" swiper-slide\\\"\\r\\n    const bodySlide = document.createElement(\\\"div\\\")\\r\\n    bodySlide.className += `body-container body-slide-${index + 1}`\\r\\n    const image = document.createElement(\\\"img\\\")\\r\\n    image.className += \\\" image-next slide-item\\\"\\r\\n    image.src = bannerItem.image\\r\\n    bodySlide.append(image)\\r\\n    const slideSpace = document.createElement(\\\"div\\\")\\r\\n    slideSpace.style.height = $(\\\"#btn-group\\\").height() + \\\"px\\\"\\r\\n    slideSpace.style.width = \\\"100%\\\";\\r\\n    bodySlide.append(slideSpace)\\r\\n    wrapper.append(bodySlide)\\r\\n    slide.appendChild(wrapper);\\r\\n    $(`.body-slide-${index + 1}`).css(\\\"background\\\", `#${bannerItem.color}`);\\r\\n});\\r\\n$(\\\".connect-button\\\").css({\\r\\n    \\\"background-color\\\": slideBannerVariables.connectButton.background,\\r\\n    color: slideBannerVariables.connectButton.textColor,\\r\\n    border: (slideBannerVariables.connectButton.background == \\\"#ffffff\\\" && slideBannerVariables.connectButton.textColor == '#231f20') ? \\\"1px solid #231f20\\\" : \\\"none\\\",\\r\\n})\\r\\n\\r\\nfunction startAnimation() {\\r\\n    $(\\\"header\\\").addClass(\\\"d-none\\\");\\r\\n    const n = slideBannerFunctions.autoSwiper();\\r\\n    slideBannerFunctions.countDown(slideBannerVariables.slideOptions.clickable);\\r\\n    n.imagesToLoad[0].onload = function () {\\r\\n        $(\\\"#btn-group\\\").css(\\\"top\\\", `${$(this).height()}px`)\\r\\n    };\\r\\n    $('.body-container').css(\\\"min-height\\\", `calc(100svh - ${$('footer').height()}px)`);\\r\\n}\\r\\n</script>\"}]},\"welcomeId\":\"0\",\"welcomeHtml\":{\"commonHtml\":\"\",\"pageViews\":[{\"contentHtml\":\"<script>\\r\\n    $('#layoutHeader').hide();\\r\\n    awingCaptiveUtils.openLandingpageV2(encodeURIComponent(\\\"https://mywifi.vn/download\\\"), encodeURIComponent(\\\"https://mywifi.vn/download\\\"));\\r\\n</script>\"}]}},\"customerActions\":[0,1,2],\"domain\":{\"domainId\":\"5476089696408447131\",\"domainTariffId\":1,\"directoryPath\":\".0.90.5476089696408447131.\",\"name\":\"Wi - Mesh\",\"joinNetwork\":true,\"description\":\"\",\"license\":\"AvX0ZtUdP4wukxT5af24a9BKVEZih4ieKcQUcHFTwuadEz9v97xzIgfKpjckguFxzdIhS2IfysNUsEgfXzrMQNQZBThUtOQEI62eBW6BOrIjP0LkhTpxZa/Q/7YPzRVte5Z1YN0mQwgAodQN6/hFfu3/fDkTBBN25E+gk9GeyqtQChyQHp9/jN+O9ehEV4m8nHBQ1wf1jf0QwB66pCesz/tD3rlTMmDvxkGe9+OjB160G2Wy8eCZFIGGC4Cr+SJ5Tnb0CLatO1DHvvI9NFjgAEd/EiGJqEKwamrQOgIGjRIb3g3IpcW/cq4ZErUQSsE1JNvhUhC7FHdCzBAV9QytCw==\",\"requiredCustomerData\":null,\"url\":\"\",\"customizeCustomerFormPath\":\"\",\"contactPhoneNumber\":\"\"},\"customer\":{\"macAddress\":\"26-17-2E-AE-22-79\",\"name\":null,\"phone\":null,\"gender\":true,\"birthday\":{\"seconds\":\"915123600\",\"nanos\":0},\"email\":null,\"device\":{\"deviceName\":\"Windows\",\"brandName\":\"Microsoft\",\"deviceCode\":\"PC\",\"os\":\"Windows NT\",\"osValue\":100,\"language\":\"en-US\"},\"createdDate\":{\"seconds\":\"1740803501\",\"nanos\":998000000},\"lastReminderDate\":{\"seconds\":\"1743764852\",\"nanos\":0},\"reminderCount\":3},\"placeCustomerInfoCollections\":[{\"id\":10841,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Gender\",\"timeReminder\":0},{\"id\":10842,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Birthday\",\"timeReminder\":0}],\"pageViewEvents\":[],\"customerRequiredFields\":[],\"contentAuthenForm\":\"<form name=\\\"mikrotik\\\" id=\\\"frmLogin\\\" action=\\\"http://186.186.0.1/login\\\" method=\\\"post\\\" style=\\\"display: none;\\\">\\n    <input type=\\\"hidden\\\" name=\\\"username\\\" value=\\\"awing15-15\\\"/>\\n    <input type=\\\"hidden\\\" name=\\\"password\\\" value=\\\"df4ac9e1a77c84894169c99597eba211\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"dst\\\" value=\\\"http://v1.awingconnect.vn/Success\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"popup\\\" value=\\\"false\\\" />\\n</form>\\n<script>\\n\\n    var authenticationProfileOptionals = [];\\n    function bindOptionalProfileByIndex(idx) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            var mikrotikParamModel = JSON.parse(authenticationProfileOptionals[idx].Params);\\n            $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n            $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n        }\\n    }\\n    function bindOptionalProfileByName(name) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            authenticationProfileOptionals.forEach(function (el) {\\n                if (el.Name.toLowerCase() == name.toLowerCase()) {\\n                    var mikrotikParamModel = JSON.parse(profileOptional.Params);\\n                    $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n                    $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n                }\\n            });\\n        }\\n    }\\n    awingStateMachineContext.setAuthenType(awingConstants.AUTHEN_TYPE.FORM);\\n</script>\\n\",\"createdDate\":\"2025-04-13T23:04:05.1414356+07:00\"}},\"analyticType\":\"View\",\"viewIndex\":1}"
          }
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 16:04:05 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 13966,
            "mimeType": "application/json",
            "compression": 8221,
            "text": "{\"token\":\"66129d730ad1b9d62c5e36d8d8ad9cc0e6e32e38\",\"captiveContext\":{\"campaignData\":{\"sessionId\":\"f67f01ba-50db-4ec2-b59a-fa8beff1b018\",\"macAddress\":\"26-17-2E-AE-22-79\",\"apMac\":\"CC-2D-E0-0E-00-0A\",\"placeId\":\"5408580173018081493\",\"domainId\":\"5476089696408447131\",\"url\":\"http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\\\170&chap_challenge=\\\\245\\\\345\\\\331\\\\134\\\\150\\\\331\\\\146\\\\353\\\\013\\\\120\\\\162\\\\166\\\\110\\\\312\\\\102\\\\251\",\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\",\"campaignId\":\"4961554445594984512\",\"campaignGroupId\":1,\"campaignAdId\":1,\"campaignType\":0,\"isNetworkCampaign\":false,\"loginId\":\"0\",\"loginHtml\":{\"commonHtml\":\"\",\"pageViews\":[{\"contentHtml\":\"<style>\\r\\n    @media (max-width: 768px) {\\r\\n        .header-text {\\r\\n            font-size: 14px;\\r\\n        }\\r\\n        .connect-button {\\r\\n            font-size: 12px;\\r\\n        }\\r\\n        .policy {\\r\\n            font-size: 12px;\\r\\n        }\\r\\n        .logo-img {\\r\\n            margin: 16px !important;\\r\\n        }\\r\\n        .adsbyawing {\\r\\n            font-size: 14px;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @media (max-width: 360px) {\\r\\n        .connect-button {\\r\\n            font-size: 11px;\\r\\n        }\\r\\n        .policy {\\r\\n            font-size: 11px;\\r\\n        }\\r\\n    }\\r\\n    @media (min-width: 1024px) {\\r\\n        .logo-wrapper {\\r\\n            max-width: 700px;\\r\\n        }\\r\\n    }\\r\\n</style>\\r\\n\\r\\n<div class=\\\"container-fluid text-center p-5\\\" style=\\\"background: #f5f5f5;\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n        <div class=\\\"col-md-10 col-lg-5 p-0 logo-wrapper\\\">\\r\\n            <div class=\\\"w-100 shadow-sm p-3 rounded\\\" style=\\\"background: #ffffff;\\\">\\r\\n                <p class=\\\"h5 header-text\\\" style=\\\"font-weight: bold\\\">Wi-Fi miễn phí tài trợ bởi</p>\\r\\n                <img id=\\\"logo\\\" class=\\\"w-75 m-4 logo-img\\\" src=\\\"/static/Files/lgn/5566897871528661947/Untitled-3.png\\\" />\\r\\n                <button id=\\\"logo_button\\\" class=\\\"btn btn-primary connect-button w-75\\\"\\r\\n                    style=\\\"min-height: 45px;\\\" onClick=\\\"awingStateMachineContextActions.nextView()\\\">\\r\\n                    <span>TIẾP TỤC ĐỂ KẾT NỐI INTERNET</span>\\r\\n                </button>\\r\\n                <div class=\\\"mt-1 policy\\\" style=\\\"color: #0000f5\\\">\\r\\n                    <p>Tôi đồng ý các điều khoản sử dụng Wi-Fi <a role=\\\"button\\\" class=\\\"awing-agreement\\\" onClick=\\\"awingUIActions.showAgreement()\\\">tại đây</a>\\r\\n                    </p>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"mt-4\\\" style=\\\"color: #5f6368\\\">\\r\\n                <u class=\\\"adsbyawing fw-bold d-flex justify-content-center align-items-center\\\" data-toggle=\\\"tooltip\\\" title=\\\"Email: contact@awing.vn\\r\\n                Hotline: 0901 05 05 17\\\"\\r\\n                    data-bs-placement=\\\"bottom\\\">Ads by AWING\\r\\n                    <div class=\\\"border border-light rounded-circle bg-secondary text-light mx-1 d-flex justify-content-center align-items-center\\\" style=\\\"width: 16px; height:16px; font-size: 10px;\\\">i</div>\\r\\n                </u>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<script>\\r\\n    let logoVariables = {\\r\\n        button: {\\r\\n            background: \\\"50b848\\\" ? \\\"#50b848\\\" : \\\"#ffffff\\\",\\r\\n            textColor: \\\"ffffff\\\" ? \\\"#ffffff\\\" : \\\"#231f20\\\"\\r\\n        },\\r\\n        options: {\\r\\n            isSquareLogo: false\\r\\n        }\\r\\n    }\\r\\n    $(\\\"#logo_button\\\").css({\\r\\n        background: logoVariables.button.background,\\r\\n        color: logoVariables.button.textColor,\\r\\n        border: logoVariables.button.background == \\\"#ffffff\\\" ? \\\"1px solid #231f20\\\" : \\\"none\\\"\\r\\n    })\\r\\n    if (logoVariables.options.isSquareLogo) {\\r\\n        $(\\\"#logo\\\").removeClass(\\\"w-75\\\")\\r\\n        $(\\\"#logo\\\").addClass(\\\"w-50\\\")\\r\\n    }\\r\\n    function startAnimation() {\\r\\n        $(document).ready(function () {\\r\\n            $('[data-toggle=\\\"tooltip\\\"]').tooltip();\\r\\n        });\\r\\n    }\\r\\n</script>\"},{\"contentHtml\":\"<link\\r\\nrel=\\\"stylesheet\\\"\\r\\nhref=\\\"/static/Files/template/5074619029972904036/swiper-bundle.min.css\\\"\\r\\n/>\\r\\n<script src=\\\"/static/Files/template/5074619029972904036/swiper-bundle.min.js\\\"></script>\\r\\n<link\\r\\nhref=\\\"/static/Files/template/5074619029972904036/template_slide_overflow_v2.1.css?v=2\\\"\\r\\nrel=\\\"stylesheet\\\"\\r\\n/>\\r\\n\\r\\n<style>\\r\\n@media (max-width: 768px) {\\r\\n    .connect-button {\\r\\n    font-size: 12px !important;\\r\\n    min-height: 50px !important;\\r\\n    }\\r\\n}\\r\\n.slide-item {\\r\\n    aspect-ratio: 600/860;\\r\\n}\\r\\n</style>\\r\\n\\r\\n<div id=\\\"slider-container\\\" class=\\\"container-fluid text-center p-0\\\">\\r\\n<div class=\\\"swiper-container p-0\\\">\\r\\n    <div\\r\\n        class=\\\"swiper-wrapper text-center p-0\\\"\\r\\n\\r\\n        id=\\\"slider-image\\\"\\r\\n    ></div>\\r\\n    <div id=\\\"btn-group\\\" class=\\\"w-100 z-3 position-absolute right-0 mb-md-5 mb-lg-3 mt-2 slide-button text-uppercase\\\">\\r\\n        <div class=\\\"swiper-pagination\\\"></div>\\r\\n        <button id=\\\"connectToInternet\\\" class=\\\"btn mt-2 connect-button text-uppercase awing-captive__blur\\\"\\r\\n            style=\\\"width: 80%; min-height: 45px; margin-bottom: 1em;\\\">\\r\\n            <span>\\r\\n                KẾT NỐI INTERNET SAU <br /><i> (CONNECTING IN) </i><i id=\\\"countdowntimer\\\" style=\\\"font-style: normal\\\">6S</i>\\r\\n            </span>\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n</div>\\r\\n<script>\\r\\nlet slideBannerVariables = {\\r\\n    banners: [{\\\"image\\\":\\\"/static/Files/lgn/5566897871528661947/TichDiemUuDai_600x860.png\\\",\\\"color\\\":\\\"fcf7cb\\\"},{\\\"image\\\":\\\"/static/Files/lgn/5566897871528661947/MuaThePhu600x860.png\\\",\\\"color\\\":\\\"58934a\\\"}],\\r\\n    connectButton: {\\r\\n        text: \\\"KẾT NỐI INTERNET\\\",\\r\\n        background: \\\"57bc53\\\" ? \\\"#57bc53\\\" : \\\"#ffffff\\\",\\r\\n        textColor: \\\"ffffff\\\" ? \\\"#ffffff\\\" : \\\"#231f20\\\"\\r\\n    },\\r\\n    slideOptions: {\\r\\n        loop: true,\\r\\n        slideTime: 3 >= 0 ?  3 :  2,\\r\\n        clickable: true,\\r\\n        skipTime: Number(6 || 0)\\r\\n    }\\r\\n}\\r\\nlet slideBannerFunctions = {\\r\\n    autoSwiper: ()=>{\\r\\n        let n = new Swiper(\\\".swiper-container\\\", {\\r\\n        pagination: \\\".swiper-pagination\\\",\\r\\n        nextButton: \\\".swiper-button-next\\\",\\r\\n        loop: slideBannerVariables.slideOptions.loop,\\r\\n        prevButton: !0,\\r\\n        paginationClickable: !0,\\r\\n        spaceBetween: 0,\\r\\n        centeredSlides: !0,\\r\\n        autoplay: {\\r\\n            delay: slideBannerVariables.slideOptions.slideTime * 1000,\\r\\n            stopOnLastSlide: slideBannerVariables.slideOptions.loop ? !1 : !0,\\r\\n        },\\r\\n        autoplayDisableOnInteraction: !1,\\r\\n        autoplayStopOnLast: !0,\\r\\n        preventClicks: !1,\\r\\n        preventClicksPropagation: !1,\\r\\n        pagination: { el: \\\".swiper-pagination\\\", clickable: !0 },\\r\\n        navigation: {\\r\\n            nextEl: \\\".swiper-button-next\\\",\\r\\n            prevEl: \\\".swiper-button-prev\\\",\\r\\n        },\\r\\n        });\\r\\n        $(\\\".swiper-pagination-clickable .swiper-pagination-bullet\\\").css(\\r\\n            \\\"background\\\",\\r\\n            slideBannerVariables.connectButton.background\\r\\n        );\\r\\n        return n;\\r\\n    },\\r\\n    countDown: (isClickable)=>{\\r\\n        let n = slideBannerVariables.slideOptions.skipTime;\\r\\n        e = setInterval(function () {\\r\\n            n--;\\r\\n            let o = document.getElementById(\\\"countdowntimer\\\");\\r\\n            if(o) {o.textContent = n + \\\"S\\\"}\\r\\n            if (n <= 0) {\\r\\n                    clearInterval(e);\\r\\n                    const img = $(\\\".image-next\\\");\\r\\n                    $(\\\"#connectToInternet\\\")\\r\\n                        .removeClass(\\\"disabled\\\")\\r\\n                        .removeClass(\\\"awing-captive__blur\\\")\\r\\n                        .click(function () {\\r\\n                            slideBannerFunctions.connectToWifi();\\r\\n                        });\\r\\n                    $(\\\"#connectToInternet span\\\").html(\\r\\n                        slideBannerVariables.connectButton.text + \\\"<br/><i>(INTERNET ACCESS)</i>\\\"\\r\\n                    );\\r\\n                    if(isClickable) {\\r\\n                    img.css(\\\"cursor\\\", \\\"pointer\\\");\\r\\n                    img.attr(\\\"onclick\\\", \\\"slideBannerFunctions.connectToWifi()\\\");\\r\\n                    }\\r\\n            }\\r\\n        }, n == 0 ? 0 : 1000);\\r\\n    },\\r\\n    connectToWifi: ()=>{\\r\\n        $(\\\".body-container\\\").css(\\\"background\\\", \\\"#F5F5F5\\\");\\r\\n        $(\\\".body-container\\\").css(\\\"min-height\\\", \\\"auto\\\");\\r\\n        awingStateMachineContextActions.nextView();\\r\\n    },\\r\\n}\\r\\nlet slide = document.getElementById(\\\"slider-image\\\");\\r\\nslideBannerVariables.banners.map((bannerItem, index) => {\\r\\n    const wrapper = document.createElement(\\\"div\\\")\\r\\n    wrapper.className += \\\" swiper-slide\\\"\\r\\n    const bodySlide = document.createElement(\\\"div\\\")\\r\\n    bodySlide.className += `body-container body-slide-${index + 1}`\\r\\n    const image = document.createElement(\\\"img\\\")\\r\\n    image.className += \\\" image-next slide-item\\\"\\r\\n    image.src = bannerItem.image\\r\\n    bodySlide.append(image)\\r\\n    const slideSpace = document.createElement(\\\"div\\\")\\r\\n    slideSpace.style.height = $(\\\"#btn-group\\\").height() + \\\"px\\\"\\r\\n    slideSpace.style.width = \\\"100%\\\";\\r\\n    bodySlide.append(slideSpace)\\r\\n    wrapper.append(bodySlide)\\r\\n    slide.appendChild(wrapper);\\r\\n    $(`.body-slide-${index + 1}`).css(\\\"background\\\", `#${bannerItem.color}`);\\r\\n});\\r\\n$(\\\".connect-button\\\").css({\\r\\n    \\\"background-color\\\": slideBannerVariables.connectButton.background,\\r\\n    color: slideBannerVariables.connectButton.textColor,\\r\\n    border: (slideBannerVariables.connectButton.background == \\\"#ffffff\\\" && slideBannerVariables.connectButton.textColor == '#231f20') ? \\\"1px solid #231f20\\\" : \\\"none\\\",\\r\\n})\\r\\n\\r\\nfunction startAnimation() {\\r\\n    $(\\\"header\\\").addClass(\\\"d-none\\\");\\r\\n    const n = slideBannerFunctions.autoSwiper();\\r\\n    slideBannerFunctions.countDown(slideBannerVariables.slideOptions.clickable);\\r\\n    n.imagesToLoad[0].onload = function () {\\r\\n        $(\\\"#btn-group\\\").css(\\\"top\\\", `${$(this).height()}px`)\\r\\n    };\\r\\n    $('.body-container').css(\\\"min-height\\\", `calc(100svh - ${$('footer').height()}px)`);\\r\\n}\\r\\n</script>\"}]},\"welcomeId\":\"0\",\"welcomeHtml\":{\"commonHtml\":\"\",\"pageViews\":[{\"contentHtml\":\"<script>\\r\\n    $('#layoutHeader').hide();\\r\\n    awingCaptiveUtils.openLandingpageV2(encodeURIComponent(\\\"https://mywifi.vn/download\\\"), encodeURIComponent(\\\"https://mywifi.vn/download\\\"));\\r\\n</script>\"}]}},\"customerActions\":[0,1,2,3],\"domain\":{\"domainId\":\"5476089696408447131\",\"domainTariffId\":1,\"directoryPath\":\".0.90.5476089696408447131.\",\"name\":\"Wi - Mesh\",\"joinNetwork\":true,\"description\":\"\",\"license\":\"AvX0ZtUdP4wukxT5af24a9BKVEZih4ieKcQUcHFTwuadEz9v97xzIgfKpjckguFxzdIhS2IfysNUsEgfXzrMQNQZBThUtOQEI62eBW6BOrIjP0LkhTpxZa/Q/7YPzRVte5Z1YN0mQwgAodQN6/hFfu3/fDkTBBN25E+gk9GeyqtQChyQHp9/jN+O9ehEV4m8nHBQ1wf1jf0QwB66pCesz/tD3rlTMmDvxkGe9+OjB160G2Wy8eCZFIGGC4Cr+SJ5Tnb0CLatO1DHvvI9NFjgAEd/EiGJqEKwamrQOgIGjRIb3g3IpcW/cq4ZErUQSsE1JNvhUhC7FHdCzBAV9QytCw==\",\"requiredCustomerData\":null,\"url\":\"\",\"customizeCustomerFormPath\":\"\",\"contactPhoneNumber\":\"\"},\"customer\":{\"macAddress\":\"26-17-2E-AE-22-79\",\"name\":null,\"phone\":null,\"gender\":true,\"birthday\":{\"seconds\":\"915123600\",\"nanos\":0},\"email\":null,\"device\":{\"deviceName\":\"Windows\",\"brandName\":\"Microsoft\",\"deviceCode\":\"PC\",\"os\":\"Windows NT\",\"osValue\":100,\"language\":\"en-US\"},\"createdDate\":{\"seconds\":\"1740803501\",\"nanos\":998000000},\"lastReminderDate\":{\"seconds\":\"1743764852\",\"nanos\":0},\"reminderCount\":3},\"placeCustomerInfoCollections\":[{\"id\":10841,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Gender\",\"timeReminder\":0},{\"id\":10842,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Birthday\",\"timeReminder\":0}],\"pageViewEvents\":[],\"customerRequiredFields\":[],\"contentAuthenForm\":\"<form name=\\\"mikrotik\\\" id=\\\"frmLogin\\\" action=\\\"http://186.186.0.1/login\\\" method=\\\"post\\\" style=\\\"display: none;\\\">\\n    <input type=\\\"hidden\\\" name=\\\"username\\\" value=\\\"awing15-15\\\"/>\\n    <input type=\\\"hidden\\\" name=\\\"password\\\" value=\\\"df4ac9e1a77c84894169c99597eba211\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"dst\\\" value=\\\"http://v1.awingconnect.vn/Success\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"popup\\\" value=\\\"false\\\" />\\n</form>\\n<script>\\n\\n    var authenticationProfileOptionals = [];\\n    function bindOptionalProfileByIndex(idx) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            var mikrotikParamModel = JSON.parse(authenticationProfileOptionals[idx].Params);\\n            $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n            $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n        }\\n    }\\n    function bindOptionalProfileByName(name) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            authenticationProfileOptionals.forEach(function (el) {\\n                if (el.Name.toLowerCase() == name.toLowerCase()) {\\n                    var mikrotikParamModel = JSON.parse(profileOptional.Params);\\n                    $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n                    $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n                }\\n            });\\n        }\\n    }\\n    awingStateMachineContext.setAuthenType(awingConstants.AUTHEN_TYPE.FORM);\\n</script>\\n\",\"createdDate\":\"2025-04-13T23:04:05.1414356+07:00\"}}"
          },
          "redirectURL": "",
          "headersSize": 227,
          "bodySize": 5745,
          "_transferSize": 5972,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:06.761Z",
        "time": 189.9030000019744,
        "timings": {
          "blocked": 24.3030000112392,
          "dns": 0.032999999999999474,
          "ssl": -1,
          "connect": 4.4129999999999985,
          "send": 0.40500000000000114,
          "wait": 158.89699997494742,
          "receive": 1.8520000157877803,
          "_blocked_queueing": 10.5430000112392,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80624
              },
              {
                "functionName": "ajax",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 76166
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 78478
              },
              {
                "functionName": "$e",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 46214
              },
              {
                "functionName": "append",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 47632
              },
              {
                "functionName": "",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 48728
              },
              {
                "functionName": "M",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 29496
              },
              {
                "functionName": "html",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 48404
              },
              {
                "functionName": "UIActions.showViewHtml",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 11246
              },
              {
                "functionName": "moveNextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 21252
              },
              {
                "functionName": "actions",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2190
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7238
              },
              {
                "functionName": "nextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20922
              },
              {
                "functionName": "onclick",
                "scriptId": "75",
                "url": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018",
                "lineNumber": 0,
                "columnNumber": 32
              }
            ]
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/template/5074619029972904036/swiper-bundle.min.js",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "186680"
            },
            {
              "name": "date",
              "value": "Thu, 10 Apr 2025 17:41:45 GMT"
            },
            {
              "name": "etag",
              "value": "\"661f8f10-2d938\""
            },
            {
              "name": "content-type",
              "value": "application/javascript"
            },
            {
              "name": "last-modified",
              "value": "Wed, 17 Apr 2024 08:57:52 GMT"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 186680,
            "mimeType": "application/javascript",
            "text": "/**\r\n * Swiper 6.5.6\r\n * Most modern mobile touch slider and framework with hardware accelerated transitions\r\n * https://swiperjs.com\r\n *\r\n * Copyright 2014-2021 Vladimir Kharlampidi\r\n *\r\n * Released under the MIT License\r\n *\r\n * Released on: April 9, 2021\r\n */\r\n\r\n! function(e, t) { \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define(t) : (e = \"undefined\" != typeof globalThis ? globalThis : e || self).Swiper = t() }(this, (function() { \"use strict\";\r\n\r\n    function e(e, t) { for (var a = 0; a < t.length; a++) { var i = t[a];\r\n            i.enumerable = i.enumerable || !1, i.configurable = !0, \"value\" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } }\r\n\r\n    function t() { return (t = Object.assign || function(e) { for (var t = 1; t < arguments.length; t++) { var a = arguments[t]; for (var i in a) Object.prototype.hasOwnProperty.call(a, i) && (e[i] = a[i]) } return e }).apply(this, arguments) }\r\n\r\n    function a(e) { return null !== e && \"object\" == typeof e && \"constructor\" in e && e.constructor === Object }\r\n\r\n    function i(e, t) { void 0 === e && (e = {}), void 0 === t && (t = {}), Object.keys(t).forEach((function(s) { void 0 === e[s] ? e[s] = t[s] : a(t[s]) && a(e[s]) && Object.keys(t[s]).length > 0 && i(e[s], t[s]) })) } var s = { body: {}, addEventListener: function() {}, removeEventListener: function() {}, activeElement: { blur: function() {}, nodeName: \"\" }, querySelector: function() { return null }, querySelectorAll: function() { return [] }, getElementById: function() { return null }, createEvent: function() { return { initEvent: function() {} } }, createElement: function() { return { children: [], childNodes: [], style: {}, setAttribute: function() {}, getElementsByTagName: function() { return [] } } }, createElementNS: function() { return {} }, importNode: function() { return null }, location: { hash: \"\", host: \"\", hostname: \"\", href: \"\", origin: \"\", pathname: \"\", protocol: \"\", search: \"\" } };\r\n\r\n    function r() { var e = \"undefined\" != typeof document ? document : {}; return i(e, s), e } var n = { document: s, navigator: { userAgent: \"\" }, location: { hash: \"\", host: \"\", hostname: \"\", href: \"\", origin: \"\", pathname: \"\", protocol: \"\", search: \"\" }, history: { replaceState: function() {}, pushState: function() {}, go: function() {}, back: function() {} }, CustomEvent: function() { return this }, addEventListener: function() {}, removeEventListener: function() {}, getComputedStyle: function() { return { getPropertyValue: function() { return \"\" } } }, Image: function() {}, Date: function() {}, screen: {}, setTimeout: function() {}, clearTimeout: function() {}, matchMedia: function() { return {} }, requestAnimationFrame: function(e) { return \"undefined\" == typeof setTimeout ? (e(), null) : setTimeout(e, 0) }, cancelAnimationFrame: function(e) { \"undefined\" != typeof setTimeout && clearTimeout(e) } };\r\n\r\n    function o() { var e = \"undefined\" != typeof window ? window : {}; return i(e, n), e }\r\n\r\n    function l(e) { return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function(e) { return e.__proto__ || Object.getPrototypeOf(e) })(e) }\r\n\r\n    function d(e, t) { return (d = Object.setPrototypeOf || function(e, t) { return e.__proto__ = t, e })(e, t) }\r\n\r\n    function p() { if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if (\"function\" == typeof Proxy) return !0; try { return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {}))), !0 } catch (e) { return !1 } }\r\n\r\n    function c(e, t, a) { return (c = p() ? Reflect.construct : function(e, t, a) { var i = [null];\r\n            i.push.apply(i, t); var s = new(Function.bind.apply(e, i)); return a && d(s, a.prototype), s }).apply(null, arguments) }\r\n\r\n    function u(e) { var t = \"function\" == typeof Map ? new Map : void 0; return (u = function(e) { if (null === e || (a = e, -1 === Function.toString.call(a).indexOf(\"[native code]\"))) return e; var a; if (\"function\" != typeof e) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== t) { if (t.has(e)) return t.get(e);\r\n                t.set(e, i) }\r\n\r\n            function i() { return c(e, arguments, l(this).constructor) } return i.prototype = Object.create(e.prototype, { constructor: { value: i, enumerable: !1, writable: !0, configurable: !0 } }), d(i, e) })(e) } var h = function(e) { var t, a;\r\n\r\n        function i(t) { var a, i, s; return a = e.call.apply(e, [this].concat(t)) || this, i = function(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e }(a), s = i.__proto__, Object.defineProperty(i, \"__proto__\", { get: function() { return s }, set: function(e) { s.__proto__ = e } }), a } return a = e, (t = i).prototype = Object.create(a.prototype), t.prototype.constructor = t, t.__proto__ = a, i }(u(Array));\r\n\r\n    function v(e) { void 0 === e && (e = []); var t = []; return e.forEach((function(e) { Array.isArray(e) ? t.push.apply(t, v(e)) : t.push(e) })), t }\r\n\r\n    function f(e, t) { return Array.prototype.filter.call(e, t) }\r\n\r\n    function m(e, t) { var a = o(),\r\n            i = r(),\r\n            s = []; if (!t && e instanceof h) return e; if (!e) return new h(s); if (\"string\" == typeof e) { var n = e.trim(); if (n.indexOf(\"<\") >= 0 && n.indexOf(\">\") >= 0) { var l = \"div\";\r\n                0 === n.indexOf(\"<li\") && (l = \"ul\"), 0 === n.indexOf(\"<tr\") && (l = \"tbody\"), 0 !== n.indexOf(\"<td\") && 0 !== n.indexOf(\"<th\") || (l = \"tr\"), 0 === n.indexOf(\"<tbody\") && (l = \"table\"), 0 === n.indexOf(\"<option\") && (l = \"select\"); var d = i.createElement(l);\r\n                d.innerHTML = n; for (var p = 0; p < d.childNodes.length; p += 1) s.push(d.childNodes[p]) } else s = function(e, t) { if (\"string\" != typeof e) return [e]; for (var a = [], i = t.querySelectorAll(e), s = 0; s < i.length; s += 1) a.push(i[s]); return a }(e.trim(), t || i) } else if (e.nodeType || e === a || e === i) s.push(e);\r\n        else if (Array.isArray(e)) { if (e instanceof h) return e;\r\n            s = e } return new h(function(e) { for (var t = [], a = 0; a < e.length; a += 1) - 1 === t.indexOf(e[a]) && t.push(e[a]); return t }(s)) } m.fn = h.prototype; var g, b, w, y = { addClass: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = v(t.map((function(e) { return e.split(\" \") }))); return this.forEach((function(e) { var t;\r\n                (t = e.classList).add.apply(t, i) })), this }, removeClass: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = v(t.map((function(e) { return e.split(\" \") }))); return this.forEach((function(e) { var t;\r\n                (t = e.classList).remove.apply(t, i) })), this }, hasClass: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = v(t.map((function(e) { return e.split(\" \") }))); return f(this, (function(e) { return i.filter((function(t) { return e.classList.contains(t) })).length > 0 })).length > 0 }, toggleClass: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = v(t.map((function(e) { return e.split(\" \") })));\r\n            this.forEach((function(e) { i.forEach((function(t) { e.classList.toggle(t) })) })) }, attr: function(e, t) { if (1 === arguments.length && \"string\" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0; for (var a = 0; a < this.length; a += 1)\r\n                if (2 === arguments.length) this[a].setAttribute(e, t);\r\n                else\r\n                    for (var i in e) this[a][i] = e[i], this[a].setAttribute(i, e[i]); return this }, removeAttr: function(e) { for (var t = 0; t < this.length; t += 1) this[t].removeAttribute(e); return this }, transform: function(e) { for (var t = 0; t < this.length; t += 1) this[t].style.transform = e; return this }, transition: function(e) { for (var t = 0; t < this.length; t += 1) this[t].style.transitionDuration = \"string\" != typeof e ? e + \"ms\" : e; return this }, on: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = t[0],\r\n                s = t[1],\r\n                r = t[2],\r\n                n = t[3];\r\n\r\n            function o(e) { var t = e.target; if (t) { var a = e.target.dom7EventData || []; if (a.indexOf(e) < 0 && a.unshift(e), m(t).is(s)) r.apply(t, a);\r\n                    else\r\n                        for (var i = m(t).parents(), n = 0; n < i.length; n += 1) m(i[n]).is(s) && r.apply(i[n], a) } }\r\n\r\n            function l(e) { var t = e && e.target && e.target.dom7EventData || [];\r\n                t.indexOf(e) < 0 && t.unshift(e), r.apply(this, t) } \"function\" == typeof t[1] && (i = t[0], r = t[1], n = t[2], s = void 0), n || (n = !1); for (var d, p = i.split(\" \"), c = 0; c < this.length; c += 1) { var u = this[c]; if (s)\r\n                    for (d = 0; d < p.length; d += 1) { var h = p[d];\r\n                        u.dom7LiveListeners || (u.dom7LiveListeners = {}), u.dom7LiveListeners[h] || (u.dom7LiveListeners[h] = []), u.dom7LiveListeners[h].push({ listener: r, proxyListener: o }), u.addEventListener(h, o, n) } else\r\n                        for (d = 0; d < p.length; d += 1) { var v = p[d];\r\n                            u.dom7Listeners || (u.dom7Listeners = {}), u.dom7Listeners[v] || (u.dom7Listeners[v] = []), u.dom7Listeners[v].push({ listener: r, proxyListener: l }), u.addEventListener(v, l, n) } } return this }, off: function() { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++) t[a] = arguments[a]; var i = t[0],\r\n                s = t[1],\r\n                r = t[2],\r\n                n = t[3]; \"function\" == typeof t[1] && (i = t[0], r = t[1], n = t[2], s = void 0), n || (n = !1); for (var o = i.split(\" \"), l = 0; l < o.length; l += 1)\r\n                for (var d = o[l], p = 0; p < this.length; p += 1) { var c = this[p],\r\n                        u = void 0; if (!s && c.dom7Listeners ? u = c.dom7Listeners[d] : s && c.dom7LiveListeners && (u = c.dom7LiveListeners[d]), u && u.length)\r\n                        for (var h = u.length - 1; h >= 0; h -= 1) { var v = u[h];\r\n                            r && v.listener === r || r && v.listener && v.listener.dom7proxy && v.listener.dom7proxy === r ? (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1)) : r || (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1)) } }\r\n            return this }, trigger: function() { for (var e = o(), t = arguments.length, a = new Array(t), i = 0; i < t; i++) a[i] = arguments[i]; for (var s = a[0].split(\" \"), r = a[1], n = 0; n < s.length; n += 1)\r\n                for (var l = s[n], d = 0; d < this.length; d += 1) { var p = this[d]; if (e.CustomEvent) { var c = new e.CustomEvent(l, { detail: r, bubbles: !0, cancelable: !0 });\r\n                        p.dom7EventData = a.filter((function(e, t) { return t > 0 })), p.dispatchEvent(c), p.dom7EventData = [], delete p.dom7EventData } }\r\n            return this }, transitionEnd: function(e) { var t = this; return e && t.on(\"transitionend\", (function a(i) { i.target === this && (e.call(this, i), t.off(\"transitionend\", a)) })), this }, outerWidth: function(e) { if (this.length > 0) { if (e) { var t = this.styles(); return this[0].offsetWidth + parseFloat(t.getPropertyValue(\"margin-right\")) + parseFloat(t.getPropertyValue(\"margin-left\")) } return this[0].offsetWidth } return null }, outerHeight: function(e) { if (this.length > 0) { if (e) { var t = this.styles(); return this[0].offsetHeight + parseFloat(t.getPropertyValue(\"margin-top\")) + parseFloat(t.getPropertyValue(\"margin-bottom\")) } return this[0].offsetHeight } return null }, styles: function() { var e = o(); return this[0] ? e.getComputedStyle(this[0], null) : {} }, offset: function() { if (this.length > 0) { var e = o(),\r\n                    t = r(),\r\n                    a = this[0],\r\n                    i = a.getBoundingClientRect(),\r\n                    s = t.body,\r\n                    n = a.clientTop || s.clientTop || 0,\r\n                    l = a.clientLeft || s.clientLeft || 0,\r\n                    d = a === e ? e.scrollY : a.scrollTop,\r\n                    p = a === e ? e.scrollX : a.scrollLeft; return { top: i.top + d - n, left: i.left + p - l } } return null }, css: function(e, t) { var a, i = o(); if (1 === arguments.length) { if (\"string\" != typeof e) { for (a = 0; a < this.length; a += 1)\r\n                        for (var s in e) this[a].style[s] = e[s]; return this } if (this[0]) return i.getComputedStyle(this[0], null).getPropertyValue(e) } if (2 === arguments.length && \"string\" == typeof e) { for (a = 0; a < this.length; a += 1) this[a].style[e] = t; return this } return this }, each: function(e) { return e ? (this.forEach((function(t, a) { e.apply(t, [t, a]) })), this) : this }, html: function(e) { if (void 0 === e) return this[0] ? this[0].innerHTML : null; for (var t = 0; t < this.length; t += 1) this[t].innerHTML = e; return this }, text: function(e) { if (void 0 === e) return this[0] ? this[0].textContent.trim() : null; for (var t = 0; t < this.length; t += 1) this[t].textContent = e; return this }, is: function(e) { var t, a, i = o(),\r\n                s = r(),\r\n                n = this[0]; if (!n || void 0 === e) return !1; if (\"string\" == typeof e) { if (n.matches) return n.matches(e); if (n.webkitMatchesSelector) return n.webkitMatchesSelector(e); if (n.msMatchesSelector) return n.msMatchesSelector(e); for (t = m(e), a = 0; a < t.length; a += 1)\r\n                    if (t[a] === n) return !0; return !1 } if (e === s) return n === s; if (e === i) return n === i; if (e.nodeType || e instanceof h) { for (t = e.nodeType ? [e] : e, a = 0; a < t.length; a += 1)\r\n                    if (t[a] === n) return !0; return !1 } return !1 }, index: function() { var e, t = this[0]; if (t) { for (e = 0; null !== (t = t.previousSibling);) 1 === t.nodeType && (e += 1); return e } }, eq: function(e) { if (void 0 === e) return this; var t = this.length; if (e > t - 1) return m([]); if (e < 0) { var a = t + e; return m(a < 0 ? [] : [this[a]]) } return m([this[e]]) }, append: function() { for (var e, t = r(), a = 0; a < arguments.length; a += 1) { e = a < 0 || arguments.length <= a ? void 0 : arguments[a]; for (var i = 0; i < this.length; i += 1)\r\n                    if (\"string\" == typeof e) { var s = t.createElement(\"div\"); for (s.innerHTML = e; s.firstChild;) this[i].appendChild(s.firstChild) } else if (e instanceof h)\r\n                    for (var n = 0; n < e.length; n += 1) this[i].appendChild(e[n]);\r\n                else this[i].appendChild(e) } return this }, prepend: function(e) { var t, a, i = r(); for (t = 0; t < this.length; t += 1)\r\n                if (\"string\" == typeof e) { var s = i.createElement(\"div\"); for (s.innerHTML = e, a = s.childNodes.length - 1; a >= 0; a -= 1) this[t].insertBefore(s.childNodes[a], this[t].childNodes[0]) } else if (e instanceof h)\r\n                for (a = 0; a < e.length; a += 1) this[t].insertBefore(e[a], this[t].childNodes[0]);\r\n            else this[t].insertBefore(e, this[t].childNodes[0]); return this }, next: function(e) { return this.length > 0 ? e ? this[0].nextElementSibling && m(this[0].nextElementSibling).is(e) ? m([this[0].nextElementSibling]) : m([]) : this[0].nextElementSibling ? m([this[0].nextElementSibling]) : m([]) : m([]) }, nextAll: function(e) { var t = [],\r\n                a = this[0]; if (!a) return m([]); for (; a.nextElementSibling;) { var i = a.nextElementSibling;\r\n                e ? m(i).is(e) && t.push(i) : t.push(i), a = i } return m(t) }, prev: function(e) { if (this.length > 0) { var t = this[0]; return e ? t.previousElementSibling && m(t.previousElementSibling).is(e) ? m([t.previousElementSibling]) : m([]) : t.previousElementSibling ? m([t.previousElementSibling]) : m([]) } return m([]) }, prevAll: function(e) { var t = [],\r\n                a = this[0]; if (!a) return m([]); for (; a.previousElementSibling;) { var i = a.previousElementSibling;\r\n                e ? m(i).is(e) && t.push(i) : t.push(i), a = i } return m(t) }, parent: function(e) { for (var t = [], a = 0; a < this.length; a += 1) null !== this[a].parentNode && (e ? m(this[a].parentNode).is(e) && t.push(this[a].parentNode) : t.push(this[a].parentNode)); return m(t) }, parents: function(e) { for (var t = [], a = 0; a < this.length; a += 1)\r\n                for (var i = this[a].parentNode; i;) e ? m(i).is(e) && t.push(i) : t.push(i), i = i.parentNode; return m(t) }, closest: function(e) { var t = this; return void 0 === e ? m([]) : (t.is(e) || (t = t.parents(e).eq(0)), t) }, find: function(e) { for (var t = [], a = 0; a < this.length; a += 1) { try { var i = this[a].querySelectorAll(e) } catch (t) { console.log(e) } for (var s = 0; s < i.length; s += 1) t.push(i[s]) } return m(t) }, children: function(e) { for (var t = [], a = 0; a < this.length; a += 1)\r\n                for (var i = this[a].children, s = 0; s < i.length; s += 1) e && !m(i[s]).is(e) || t.push(i[s]); return m(t) }, filter: function(e) { return m(f(this, e)) }, remove: function() { for (var e = 0; e < this.length; e += 1) this[e].parentNode && this[e].parentNode.removeChild(this[e]); return this } };\r\n\r\n    function E(e, t) { return void 0 === t && (t = 0), setTimeout(e, t) }\r\n\r\n    function x() { return Date.now() }\r\n\r\n    function T(e, t) { void 0 === t && (t = \"x\"); var a, i, s, r = o(),\r\n            n = function(e) { var t, a = o(); return a.getComputedStyle && (t = a.getComputedStyle(e, null)), !t && e.currentStyle && (t = e.currentStyle), t || (t = e.style), t }(e); return r.WebKitCSSMatrix ? ((i = n.transform || n.webkitTransform).split(\",\").length > 6 && (i = i.split(\", \").map((function(e) { return e.replace(\",\", \".\") })).join(\", \")), s = new r.WebKitCSSMatrix(\"none\" === i ? \"\" : i)) : a = (s = n.MozTransform || n.OTransform || n.MsTransform || n.msTransform || n.transform || n.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\")).toString().split(\",\"), \"x\" === t && (i = r.WebKitCSSMatrix ? s.m41 : 16 === a.length ? parseFloat(a[12]) : parseFloat(a[4])), \"y\" === t && (i = r.WebKitCSSMatrix ? s.m42 : 16 === a.length ? parseFloat(a[13]) : parseFloat(a[5])), i || 0 }\r\n\r\n    function S(e) { return \"object\" == typeof e && null !== e && e.constructor && \"Object\" === Object.prototype.toString.call(e).slice(8, -1) }\r\n\r\n    function C() { for (var e = Object(arguments.length <= 0 ? void 0 : arguments[0]), t = [\"__proto__\", \"constructor\", \"prototype\"], a = 1; a < arguments.length; a += 1) { var i = a < 0 || arguments.length <= a ? void 0 : arguments[a]; if (null != i)\r\n                for (var s = Object.keys(Object(i)).filter((function(e) { return t.indexOf(e) < 0 })), r = 0, n = s.length; r < n; r += 1) { var o = s[r],\r\n                        l = Object.getOwnPropertyDescriptor(i, o);\r\n                    void 0 !== l && l.enumerable && (S(e[o]) && S(i[o]) ? i[o].__swiper__ ? e[o] = i[o] : C(e[o], i[o]) : !S(e[o]) && S(i[o]) ? (e[o] = {}, i[o].__swiper__ ? e[o] = i[o] : C(e[o], i[o])) : e[o] = i[o]) } } return e }\r\n\r\n    function M(e, t) { Object.keys(t).forEach((function(a) { S(t[a]) && Object.keys(t[a]).forEach((function(i) { \"function\" == typeof t[a][i] && (t[a][i] = t[a][i].bind(e)) })), e[a] = t[a] })) }\r\n\r\n    function z(e) { return void 0 === e && (e = \"\"), \".\" + e.trim().replace(/([\\.:\\/])/g, \"\\\\$1\").replace(/ /g, \".\") }\r\n\r\n    function P() { return g || (g = function() { var e = o(),\r\n                t = r(); return { touch: !!(\"ontouchstart\" in e || e.DocumentTouch && t instanceof e.DocumentTouch), pointerEvents: !!e.PointerEvent && \"maxTouchPoints\" in e.navigator && e.navigator.maxTouchPoints >= 0, observer: \"MutationObserver\" in e || \"WebkitMutationObserver\" in e, passiveListener: function() { var t = !1; try { var a = Object.defineProperty({}, \"passive\", { get: function() { t = !0 } });\r\n                        e.addEventListener(\"testPassiveListener\", null, a) } catch (e) {} return t }(), gestures: \"ongesturestart\" in e } }()), g }\r\n\r\n    function k(e) { return void 0 === e && (e = {}), b || (b = function(e) { var t = (void 0 === e ? {} : e).userAgent,\r\n                a = P(),\r\n                i = o(),\r\n                s = i.navigator.platform,\r\n                r = t || i.navigator.userAgent,\r\n                n = { ios: !1, android: !1 },\r\n                l = i.screen.width,\r\n                d = i.screen.height,\r\n                p = r.match(/(Android);?[\\s\\/]+([\\d.]+)?/),\r\n                c = r.match(/(iPad).*OS\\s([\\d_]+)/),\r\n                u = r.match(/(iPod)(.*OS\\s([\\d_]+))?/),\r\n                h = !c && r.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/),\r\n                v = \"Win32\" === s,\r\n                f = \"MacIntel\" === s; return !c && f && a.touch && [\"1024x1366\", \"1366x1024\", \"834x1194\", \"1194x834\", \"834x1112\", \"1112x834\", \"768x1024\", \"1024x768\", \"820x1180\", \"1180x820\", \"810x1080\", \"1080x810\"].indexOf(l + \"x\" + d) >= 0 && ((c = r.match(/(Version)\\/([\\d.]+)/)) || (c = [0, 1, \"13_0_0\"]), f = !1), p && !v && (n.os = \"android\", n.android = !0), (c || h || u) && (n.os = \"ios\", n.ios = !0), n }(e)), b }\r\n\r\n    function L() { return w || (w = function() { var e, t = o(); return { isEdge: !!t.navigator.userAgent.match(/Edge/g), isSafari: (e = t.navigator.userAgent.toLowerCase(), e.indexOf(\"safari\") >= 0 && e.indexOf(\"chrome\") < 0 && e.indexOf(\"android\") < 0), isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent) } }()), w } Object.keys(y).forEach((function(e) { Object.defineProperty(m.fn, e, { value: y[e], writable: !0 }) })); var $ = { name: \"resize\", create: function() { var e = this;\r\n                C(e, { resize: { observer: null, createObserver: function() { e && !e.destroyed && e.initialized && (e.resize.observer = new ResizeObserver((function(t) { var a = e.width,\r\n                                    i = e.height,\r\n                                    s = a,\r\n                                    r = i;\r\n                                t.forEach((function(t) { var a = t.contentBoxSize,\r\n                                        i = t.contentRect,\r\n                                        n = t.target;\r\n                                    n && n !== e.el || (s = i ? i.width : (a[0] || a).inlineSize, r = i ? i.height : (a[0] || a).blockSize) })), s === a && r === i || e.resize.resizeHandler() })), e.resize.observer.observe(e.el)) }, removeObserver: function() { e.resize.observer && e.resize.observer.unobserve && e.el && (e.resize.observer.unobserve(e.el), e.resize.observer = null) }, resizeHandler: function() { e && !e.destroyed && e.initialized && (e.emit(\"beforeResize\"), e.emit(\"resize\")) }, orientationChangeHandler: function() { e && !e.destroyed && e.initialized && e.emit(\"orientationchange\") } } }) }, on: { init: function(e) { var t = o();\r\n                    e.params.resizeObserver && void 0 !== o().ResizeObserver ? e.resize.createObserver() : (t.addEventListener(\"resize\", e.resize.resizeHandler), t.addEventListener(\"orientationchange\", e.resize.orientationChangeHandler)) }, destroy: function(e) { var t = o();\r\n                    e.resize.removeObserver(), t.removeEventListener(\"resize\", e.resize.resizeHandler), t.removeEventListener(\"orientationchange\", e.resize.orientationChangeHandler) } } },\r\n        I = { attach: function(e, t) { void 0 === t && (t = {}); var a = o(),\r\n                    i = this,\r\n                    s = new(a.MutationObserver || a.WebkitMutationObserver)((function(e) { if (1 !== e.length) { var t = function() { i.emit(\"observerUpdate\", e[0]) };\r\n                            a.requestAnimationFrame ? a.requestAnimationFrame(t) : a.setTimeout(t, 0) } else i.emit(\"observerUpdate\", e[0]) }));\r\n                s.observe(e, { attributes: void 0 === t.attributes || t.attributes, childList: void 0 === t.childList || t.childList, characterData: void 0 === t.characterData || t.characterData }), i.observer.observers.push(s) }, init: function() { var e = this; if (e.support.observer && e.params.observer) { if (e.params.observeParents)\r\n                        for (var t = e.$el.parents(), a = 0; a < t.length; a += 1) e.observer.attach(t[a]);\r\n                    e.observer.attach(e.$el[0], { childList: e.params.observeSlideChildren }), e.observer.attach(e.$wrapperEl[0], { attributes: !1 }) } }, destroy: function() { this.observer.observers.forEach((function(e) { e.disconnect() })), this.observer.observers = [] } },\r\n        O = { name: \"observer\", params: { observer: !1, observeParents: !1, observeSlideChildren: !1 }, create: function() { M(this, { observer: t({}, I, { observers: [] }) }) }, on: { init: function(e) { e.observer.init() }, destroy: function(e) { e.observer.destroy() } } };\r\n\r\n    function A(e) { var t = this,\r\n            a = r(),\r\n            i = o(),\r\n            s = t.touchEventsData,\r\n            n = t.params,\r\n            l = t.touches; if (!t.animating || !n.preventInteractionOnTransition) { var d = e;\r\n            d.originalEvent && (d = d.originalEvent); var p = m(d.target); if (\"wrapper\" !== n.touchEventsTarget || p.closest(t.wrapperEl).length)\r\n                if (s.isTouchEvent = \"touchstart\" === d.type, s.isTouchEvent || !(\"which\" in d) || 3 !== d.which)\r\n                    if (!(!s.isTouchEvent && \"button\" in d && d.button > 0))\r\n                        if (!s.isTouched || !s.isMoved)\r\n                            if (!!n.noSwipingClass && \"\" !== n.noSwipingClass && d.target && d.target.shadowRoot && e.path && e.path[0] && (p = m(e.path[0])), n.noSwiping && p.closest(n.noSwipingSelector ? n.noSwipingSelector : \".\" + n.noSwipingClass)[0]) t.allowClick = !0;\r\n                            else if (!n.swipeHandler || p.closest(n.swipeHandler)[0]) { l.currentX = \"touchstart\" === d.type ? d.targetTouches[0].pageX : d.pageX, l.currentY = \"touchstart\" === d.type ? d.targetTouches[0].pageY : d.pageY; var c = l.currentX,\r\n                    u = l.currentY,\r\n                    h = n.edgeSwipeDetection || n.iOSEdgeSwipeDetection,\r\n                    v = n.edgeSwipeThreshold || n.iOSEdgeSwipeThreshold; if (h && (c <= v || c >= i.innerWidth - v)) { if (\"prevent\" !== h) return;\r\n                    e.preventDefault() } if (C(s, { isTouched: !0, isMoved: !1, allowTouchCallbacks: !0, isScrolling: void 0, startMoving: void 0 }), l.startX = c, l.startY = u, s.touchStartTime = x(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, n.threshold > 0 && (s.allowThresholdMove = !1), \"touchstart\" !== d.type) { var f = !0;\r\n                    p.is(s.formElements) && (f = !1), a.activeElement && m(a.activeElement).is(s.formElements) && a.activeElement !== p[0] && a.activeElement.blur(); var g = f && t.allowTouchMove && n.touchStartPreventDefault;!n.touchStartForcePreventDefault && !g || p[0].isContentEditable || d.preventDefault() } t.emit(\"touchStart\", d) } } }\r\n\r\n    function D(e) { var t = r(),\r\n            a = this,\r\n            i = a.touchEventsData,\r\n            s = a.params,\r\n            n = a.touches,\r\n            o = a.rtlTranslate,\r\n            l = e; if (l.originalEvent && (l = l.originalEvent), i.isTouched) { if (!i.isTouchEvent || \"touchmove\" === l.type) { var d = \"touchmove\" === l.type && l.targetTouches && (l.targetTouches[0] || l.changedTouches[0]),\r\n                    p = \"touchmove\" === l.type ? d.pageX : l.pageX,\r\n                    c = \"touchmove\" === l.type ? d.pageY : l.pageY; if (l.preventedByNestedSwiper) return n.startX = p, void(n.startY = c); if (!a.allowTouchMove) return a.allowClick = !1, void(i.isTouched && (C(n, { startX: p, startY: c, currentX: p, currentY: c }), i.touchStartTime = x())); if (i.isTouchEvent && s.touchReleaseOnEdges && !s.loop)\r\n                    if (a.isVertical()) { if (c < n.startY && a.translate <= a.maxTranslate() || c > n.startY && a.translate >= a.minTranslate()) return i.isTouched = !1, void(i.isMoved = !1) } else if (p < n.startX && a.translate <= a.maxTranslate() || p > n.startX && a.translate >= a.minTranslate()) return; if (i.isTouchEvent && t.activeElement && l.target === t.activeElement && m(l.target).is(i.formElements)) return i.isMoved = !0, void(a.allowClick = !1); if (i.allowTouchCallbacks && a.emit(\"touchMove\", l), !(l.targetTouches && l.targetTouches.length > 1)) { n.currentX = p, n.currentY = c; var u = n.currentX - n.startX,\r\n                        h = n.currentY - n.startY; if (!(a.params.threshold && Math.sqrt(Math.pow(u, 2) + Math.pow(h, 2)) < a.params.threshold)) { var v; if (void 0 === i.isScrolling) a.isHorizontal() && n.currentY === n.startY || a.isVertical() && n.currentX === n.startX ? i.isScrolling = !1 : u * u + h * h >= 25 && (v = 180 * Math.atan2(Math.abs(h), Math.abs(u)) / Math.PI, i.isScrolling = a.isHorizontal() ? v > s.touchAngle : 90 - v > s.touchAngle); if (i.isScrolling && a.emit(\"touchMoveOpposite\", l), void 0 === i.startMoving && (n.currentX === n.startX && n.currentY === n.startY || (i.startMoving = !0)), i.isScrolling) i.isTouched = !1;\r\n                        else if (i.startMoving) { a.allowClick = !1, !s.cssMode && l.cancelable && l.preventDefault(), s.touchMoveStopPropagation && !s.nested && l.stopPropagation(), i.isMoved || (s.loop && a.loopFix(), i.startTranslate = a.getTranslate(), a.setTransition(0), a.animating && a.$wrapperEl.trigger(\"webkitTransitionEnd transitionend\"), i.allowMomentumBounce = !1, !s.grabCursor || !0 !== a.allowSlideNext && !0 !== a.allowSlidePrev || a.setGrabCursor(!0), a.emit(\"sliderFirstMove\", l)), a.emit(\"sliderMove\", l), i.isMoved = !0; var f = a.isHorizontal() ? u : h;\r\n                            n.diff = f, f *= s.touchRatio, o && (f = -f), a.swipeDirection = f > 0 ? \"prev\" : \"next\", i.currentTranslate = f + i.startTranslate; var g = !0,\r\n                                b = s.resistanceRatio; if (s.touchReleaseOnEdges && (b = 0), f > 0 && i.currentTranslate > a.minTranslate() ? (g = !1, s.resistance && (i.currentTranslate = a.minTranslate() - 1 + Math.pow(-a.minTranslate() + i.startTranslate + f, b))) : f < 0 && i.currentTranslate < a.maxTranslate() && (g = !1, s.resistance && (i.currentTranslate = a.maxTranslate() + 1 - Math.pow(a.maxTranslate() - i.startTranslate - f, b))), g && (l.preventedByNestedSwiper = !0), !a.allowSlideNext && \"next\" === a.swipeDirection && i.currentTranslate < i.startTranslate && (i.currentTranslate = i.startTranslate), !a.allowSlidePrev && \"prev\" === a.swipeDirection && i.currentTranslate > i.startTranslate && (i.currentTranslate = i.startTranslate), a.allowSlidePrev || a.allowSlideNext || (i.currentTranslate = i.startTranslate), s.threshold > 0) { if (!(Math.abs(f) > s.threshold || i.allowThresholdMove)) return void(i.currentTranslate = i.startTranslate); if (!i.allowThresholdMove) return i.allowThresholdMove = !0, n.startX = n.currentX, n.startY = n.currentY, i.currentTranslate = i.startTranslate, void(n.diff = a.isHorizontal() ? n.currentX - n.startX : n.currentY - n.startY) } s.followFinger && !s.cssMode && ((s.freeMode || s.watchSlidesProgress || s.watchSlidesVisibility) && (a.updateActiveIndex(), a.updateSlidesClasses()), s.freeMode && (0 === i.velocities.length && i.velocities.push({ position: n[a.isHorizontal() ? \"startX\" : \"startY\"], time: i.touchStartTime }), i.velocities.push({ position: n[a.isHorizontal() ? \"currentX\" : \"currentY\"], time: x() })), a.updateProgress(i.currentTranslate), a.setTranslate(i.currentTranslate)) } } } } } else i.startMoving && i.isScrolling && a.emit(\"touchMoveOpposite\", l) }\r\n\r\n    function N(e) { var t = this,\r\n            a = t.touchEventsData,\r\n            i = t.params,\r\n            s = t.touches,\r\n            r = t.rtlTranslate,\r\n            n = t.$wrapperEl,\r\n            o = t.slidesGrid,\r\n            l = t.snapGrid,\r\n            d = e; if (d.originalEvent && (d = d.originalEvent), a.allowTouchCallbacks && t.emit(\"touchEnd\", d), a.allowTouchCallbacks = !1, !a.isTouched) return a.isMoved && i.grabCursor && t.setGrabCursor(!1), a.isMoved = !1, void(a.startMoving = !1);\r\n        i.grabCursor && a.isMoved && a.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1); var p, c = x(),\r\n            u = c - a.touchStartTime; if (t.allowClick && (t.updateClickedSlide(d), t.emit(\"tap click\", d), u < 300 && c - a.lastClickTime < 300 && t.emit(\"doubleTap doubleClick\", d)), a.lastClickTime = x(), E((function() { t.destroyed || (t.allowClick = !0) })), !a.isTouched || !a.isMoved || !t.swipeDirection || 0 === s.diff || a.currentTranslate === a.startTranslate) return a.isTouched = !1, a.isMoved = !1, void(a.startMoving = !1); if (a.isTouched = !1, a.isMoved = !1, a.startMoving = !1, p = i.followFinger ? r ? t.translate : -t.translate : -a.currentTranslate, !i.cssMode)\r\n            if (i.freeMode) { if (p < -t.minTranslate()) return void t.slideTo(t.activeIndex); if (p > -t.maxTranslate()) return void(t.slides.length < l.length ? t.slideTo(l.length - 1) : t.slideTo(t.slides.length - 1)); if (i.freeModeMomentum) { if (a.velocities.length > 1) { var h = a.velocities.pop(),\r\n                            v = a.velocities.pop(),\r\n                            f = h.position - v.position,\r\n                            m = h.time - v.time;\r\n                        t.velocity = f / m, t.velocity /= 2, Math.abs(t.velocity) < i.freeModeMinimumVelocity && (t.velocity = 0), (m > 150 || x() - h.time > 300) && (t.velocity = 0) } else t.velocity = 0;\r\n                    t.velocity *= i.freeModeMomentumVelocityRatio, a.velocities.length = 0; var g = 1e3 * i.freeModeMomentumRatio,\r\n                        b = t.velocity * g,\r\n                        w = t.translate + b;\r\n                    r && (w = -w); var y, T, S = !1,\r\n                        C = 20 * Math.abs(t.velocity) * i.freeModeMomentumBounceRatio; if (w < t.maxTranslate()) i.freeModeMomentumBounce ? (w + t.maxTranslate() < -C && (w = t.maxTranslate() - C), y = t.maxTranslate(), S = !0, a.allowMomentumBounce = !0) : w = t.maxTranslate(), i.loop && i.centeredSlides && (T = !0);\r\n                    else if (w > t.minTranslate()) i.freeModeMomentumBounce ? (w - t.minTranslate() > C && (w = t.minTranslate() + C), y = t.minTranslate(), S = !0, a.allowMomentumBounce = !0) : w = t.minTranslate(), i.loop && i.centeredSlides && (T = !0);\r\n                    else if (i.freeModeSticky) { for (var M, z = 0; z < l.length; z += 1)\r\n                            if (l[z] > -w) { M = z; break } w = -(w = Math.abs(l[M] - w) < Math.abs(l[M - 1] - w) || \"next\" === t.swipeDirection ? l[M] : l[M - 1]) } if (T && t.once(\"transitionEnd\", (function() { t.loopFix() })), 0 !== t.velocity) { if (g = r ? Math.abs((-w - t.translate) / t.velocity) : Math.abs((w - t.translate) / t.velocity), i.freeModeSticky) { var P = Math.abs((r ? -w : w) - t.translate),\r\n                                k = t.slidesSizesGrid[t.activeIndex];\r\n                            g = P < k ? i.speed : P < 2 * k ? 1.5 * i.speed : 2.5 * i.speed } } else if (i.freeModeSticky) return void t.slideToClosest();\r\n                    i.freeModeMomentumBounce && S ? (t.updateProgress(y), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating = !0, n.transitionEnd((function() { t && !t.destroyed && a.allowMomentumBounce && (t.emit(\"momentumBounce\"), t.setTransition(i.speed), setTimeout((function() { t.setTranslate(y), n.transitionEnd((function() { t && !t.destroyed && t.transitionEnd() })) }), 0)) }))) : t.velocity ? (t.updateProgress(w), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, n.transitionEnd((function() { t && !t.destroyed && t.transitionEnd() })))) : (t.emit(\"_freeModeNoMomentumRelease\"), t.updateProgress(w)), t.updateActiveIndex(), t.updateSlidesClasses() } else { if (i.freeModeSticky) return void t.slideToClosest();\r\n                    i.freeMode && t.emit(\"_freeModeNoMomentumRelease\") }(!i.freeModeMomentum || u >= i.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses()) } else { for (var L = 0, $ = t.slidesSizesGrid[0], I = 0; I < o.length; I += I < i.slidesPerGroupSkip ? 1 : i.slidesPerGroup) { var O = I < i.slidesPerGroupSkip - 1 ? 1 : i.slidesPerGroup;\r\n                    void 0 !== o[I + O] ? p >= o[I] && p < o[I + O] && (L = I, $ = o[I + O] - o[I]) : p >= o[I] && (L = I, $ = o[o.length - 1] - o[o.length - 2]) } var A = (p - o[L]) / $,\r\n                    D = L < i.slidesPerGroupSkip - 1 ? 1 : i.slidesPerGroup; if (u > i.longSwipesMs) { if (!i.longSwipes) return void t.slideTo(t.activeIndex); \"next\" === t.swipeDirection && (A >= i.longSwipesRatio ? t.slideTo(L + D) : t.slideTo(L)), \"prev\" === t.swipeDirection && (A > 1 - i.longSwipesRatio ? t.slideTo(L + D) : t.slideTo(L)) } else { if (!i.shortSwipes) return void t.slideTo(t.activeIndex);\r\n                    t.navigation && (d.target === t.navigation.nextEl || d.target === t.navigation.prevEl) ? d.target === t.navigation.nextEl ? t.slideTo(L + D) : t.slideTo(L) : (\"next\" === t.swipeDirection && t.slideTo(L + D), \"prev\" === t.swipeDirection && t.slideTo(L)) } } }\r\n\r\n    function G() { var e = this,\r\n            t = e.params,\r\n            a = e.el; if (!a || 0 !== a.offsetWidth) { t.breakpoints && e.setBreakpoint(); var i = e.allowSlideNext,\r\n                s = e.allowSlidePrev,\r\n                r = e.snapGrid;\r\n            e.allowSlideNext = !0, e.allowSlidePrev = !0, e.updateSize(), e.updateSlides(), e.updateSlidesClasses(), (\"auto\" === t.slidesPerView || t.slidesPerView > 1) && e.isEnd && !e.isBeginning && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0), e.autoplay && e.autoplay.running && e.autoplay.paused && e.autoplay.run(), e.allowSlidePrev = s, e.allowSlideNext = i, e.params.watchOverflow && r !== e.snapGrid && e.checkOverflow() } }\r\n\r\n    function B(e) { var t = this;\r\n        t.allowClick || (t.params.preventClicks && e.preventDefault(), t.params.preventClicksPropagation && t.animating && (e.stopPropagation(), e.stopImmediatePropagation())) }\r\n\r\n    function H() { var e = this,\r\n            t = e.wrapperEl,\r\n            a = e.rtlTranslate;\r\n        e.previousTranslate = e.translate, e.isHorizontal() ? e.translate = a ? t.scrollWidth - t.offsetWidth - t.scrollLeft : -t.scrollLeft : e.translate = -t.scrollTop, -0 === e.translate && (e.translate = 0), e.updateActiveIndex(), e.updateSlidesClasses(); var i = e.maxTranslate() - e.minTranslate();\r\n        (0 === i ? 0 : (e.translate - e.minTranslate()) / i) !== e.progress && e.updateProgress(a ? -e.translate : e.translate), e.emit(\"setTranslate\", e.translate, !1) } var X = !1;\r\n\r\n    function Y() {} var R = { init: !0, direction: \"horizontal\", touchEventsTarget: \"container\", initialSlide: 0, speed: 300, cssMode: !1, updateOnWindowResize: !0, resizeObserver: !1, nested: !1, width: null, height: null, preventInteractionOnTransition: !1, userAgent: null, url: null, edgeSwipeDetection: !1, edgeSwipeThreshold: 20, freeMode: !1, freeModeMomentum: !0, freeModeMomentumRatio: 1, freeModeMomentumBounce: !0, freeModeMomentumBounceRatio: 1, freeModeMomentumVelocityRatio: 1, freeModeSticky: !1, freeModeMinimumVelocity: .02, autoHeight: !1, setWrapperSize: !1, virtualTranslate: !1, effect: \"slide\", breakpoints: void 0, breakpointsBase: \"window\", spaceBetween: 0, slidesPerView: 1, slidesPerColumn: 1, slidesPerColumnFill: \"column\", slidesPerGroup: 1, slidesPerGroupSkip: 0, centeredSlides: !1, centeredSlidesBounds: !1, slidesOffsetBefore: 0, slidesOffsetAfter: 0, normalizeSlideIndex: !0, centerInsufficientSlides: !1, watchOverflow: !1, roundLengths: !1, touchRatio: 1, touchAngle: 45, simulateTouch: !0, shortSwipes: !0, longSwipes: !0, longSwipesRatio: .5, longSwipesMs: 300, followFinger: !0, allowTouchMove: !0, threshold: 0, touchMoveStopPropagation: !1, touchStartPreventDefault: !0, touchStartForcePreventDefault: !1, touchReleaseOnEdges: !1, uniqueNavElements: !0, resistance: !0, resistanceRatio: .85, watchSlidesProgress: !1, watchSlidesVisibility: !1, grabCursor: !1, preventClicks: !0, preventClicksPropagation: !0, slideToClickedSlide: !1, preloadImages: !0, updateOnImagesReady: !0, loop: !1, loopAdditionalSlides: 0, loopedSlides: null, loopFillGroupWithBlank: !1, loopPreventsSlide: !0, allowSlidePrev: !0, allowSlideNext: !0, swipeHandler: null, noSwiping: !0, noSwipingClass: \"swiper-no-swiping\", noSwipingSelector: null, passiveListeners: !0, containerModifierClass: \"swiper-container-\", slideClass: \"swiper-slide\", slideBlankClass: \"swiper-slide-invisible-blank\", slideActiveClass: \"swiper-slide-active\", slideDuplicateActiveClass: \"swiper-slide-duplicate-active\", slideVisibleClass: \"swiper-slide-visible\", slideDuplicateClass: \"swiper-slide-duplicate\", slideNextClass: \"swiper-slide-next\", slideDuplicateNextClass: \"swiper-slide-duplicate-next\", slidePrevClass: \"swiper-slide-prev\", slideDuplicatePrevClass: \"swiper-slide-duplicate-prev\", wrapperClass: \"swiper-wrapper\", runCallbacksOnInit: !0, _emitClasses: !1 },\r\n        V = { modular: { useParams: function(e) { var t = this;\r\n                    t.modules && Object.keys(t.modules).forEach((function(a) { var i = t.modules[a];\r\n                        i.params && C(e, i.params) })) }, useModules: function(e) { void 0 === e && (e = {}); var t = this;\r\n                    t.modules && Object.keys(t.modules).forEach((function(a) { var i = t.modules[a],\r\n                            s = e[a] || {};\r\n                        i.on && t.on && Object.keys(i.on).forEach((function(e) { t.on(e, i.on[e]) })), i.create && i.create.bind(t)(s) })) } }, eventsEmitter: { on: function(e, t, a) { var i = this; if (\"function\" != typeof t) return i; var s = a ? \"unshift\" : \"push\"; return e.split(\" \").forEach((function(e) { i.eventsListeners[e] || (i.eventsListeners[e] = []), i.eventsListeners[e][s](t) })), i }, once: function(e, t, a) { var i = this; if (\"function\" != typeof t) return i;\r\n\r\n                    function s() { i.off(e, s), s.__emitterProxy && delete s.__emitterProxy; for (var a = arguments.length, r = new Array(a), n = 0; n < a; n++) r[n] = arguments[n];\r\n                        t.apply(i, r) } return s.__emitterProxy = t, i.on(e, s, a) }, onAny: function(e, t) { var a = this; if (\"function\" != typeof e) return a; var i = t ? \"unshift\" : \"push\"; return a.eventsAnyListeners.indexOf(e) < 0 && a.eventsAnyListeners[i](e), a }, offAny: function(e) { var t = this; if (!t.eventsAnyListeners) return t; var a = t.eventsAnyListeners.indexOf(e); return a >= 0 && t.eventsAnyListeners.splice(a, 1), t }, off: function(e, t) { var a = this; return a.eventsListeners ? (e.split(\" \").forEach((function(e) { void 0 === t ? a.eventsListeners[e] = [] : a.eventsListeners[e] && a.eventsListeners[e].forEach((function(i, s) {\r\n                            (i === t || i.__emitterProxy && i.__emitterProxy === t) && a.eventsListeners[e].splice(s, 1) })) })), a) : a }, emit: function() { var e, t, a, i = this; if (!i.eventsListeners) return i; for (var s = arguments.length, r = new Array(s), n = 0; n < s; n++) r[n] = arguments[n]; \"string\" == typeof r[0] || Array.isArray(r[0]) ? (e = r[0], t = r.slice(1, r.length), a = i) : (e = r[0].events, t = r[0].data, a = r[0].context || i), t.unshift(a); var o = Array.isArray(e) ? e : e.split(\" \"); return o.forEach((function(e) { i.eventsAnyListeners && i.eventsAnyListeners.length && i.eventsAnyListeners.forEach((function(i) { i.apply(a, [e].concat(t)) })), i.eventsListeners && i.eventsListeners[e] && i.eventsListeners[e].forEach((function(e) { e.apply(a, t) })) })), i } }, update: { updateSize: function() { var e, t, a = this,\r\n                        i = a.$el;\r\n                    e = void 0 !== a.params.width && null !== a.params.width ? a.params.width : i[0].clientWidth, t = void 0 !== a.params.height && null !== a.params.height ? a.params.height : i[0].clientHeight, 0 === e && a.isHorizontal() || 0 === t && a.isVertical() || (e = e - parseInt(i.css(\"padding-left\") || 0, 10) - parseInt(i.css(\"padding-right\") || 0, 10), t = t - parseInt(i.css(\"padding-top\") || 0, 10) - parseInt(i.css(\"padding-bottom\") || 0, 10), Number.isNaN(e) && (e = 0), Number.isNaN(t) && (t = 0), C(a, { width: e, height: t, size: a.isHorizontal() ? e : t })) }, updateSlides: function() { var e = this,\r\n                        t = function(t) { return e.isHorizontal() ? t : { width: \"height\", \"margin-top\": \"margin-left\", \"margin-bottom \": \"margin-right\", \"margin-left\": \"margin-top\", \"margin-right\": \"margin-bottom\", \"padding-left\": \"padding-top\", \"padding-right\": \"padding-bottom\", marginRight: \"marginBottom\" } [t] },\r\n                        a = function(e, a) { return parseFloat(e.getPropertyValue(t(a)) || 0) },\r\n                        i = e.params,\r\n                        s = e.$wrapperEl,\r\n                        r = e.size,\r\n                        n = e.rtlTranslate,\r\n                        o = e.wrongRTL,\r\n                        l = e.virtual && i.virtual.enabled,\r\n                        d = l ? e.virtual.slides.length : e.slides.length,\r\n                        p = s.children(\".\" + e.params.slideClass),\r\n                        c = l ? e.virtual.slides.length : p.length,\r\n                        u = [],\r\n                        h = [],\r\n                        v = [],\r\n                        f = i.slidesOffsetBefore; \"function\" == typeof f && (f = i.slidesOffsetBefore.call(e)); var m = i.slidesOffsetAfter; \"function\" == typeof m && (m = i.slidesOffsetAfter.call(e)); var g = e.snapGrid.length,\r\n                        b = e.slidesGrid.length,\r\n                        w = i.spaceBetween,\r\n                        y = -f,\r\n                        E = 0,\r\n                        x = 0; if (void 0 !== r) { var T, S; \"string\" == typeof w && w.indexOf(\"%\") >= 0 && (w = parseFloat(w.replace(\"%\", \"\")) / 100 * r), e.virtualSize = -w, n ? p.css({ marginLeft: \"\", marginTop: \"\" }) : p.css({ marginRight: \"\", marginBottom: \"\" }), i.slidesPerColumn > 1 && (T = Math.floor(c / i.slidesPerColumn) === c / e.params.slidesPerColumn ? c : Math.ceil(c / i.slidesPerColumn) * i.slidesPerColumn, \"auto\" !== i.slidesPerView && \"row\" === i.slidesPerColumnFill && (T = Math.max(T, i.slidesPerView * i.slidesPerColumn))); for (var M, z, P, k = i.slidesPerColumn, L = T / k, $ = Math.floor(c / i.slidesPerColumn), I = 0; I < c; I += 1) { S = 0; var O = p.eq(I); if (i.slidesPerColumn > 1) { var A = void 0,\r\n                                    D = void 0,\r\n                                    N = void 0; if (\"row\" === i.slidesPerColumnFill && i.slidesPerGroup > 1) { var G = Math.floor(I / (i.slidesPerGroup * i.slidesPerColumn)),\r\n                                        B = I - i.slidesPerColumn * i.slidesPerGroup * G,\r\n                                        H = 0 === G ? i.slidesPerGroup : Math.min(Math.ceil((c - G * k * i.slidesPerGroup) / k), i.slidesPerGroup);\r\n                                    A = (D = B - (N = Math.floor(B / H)) * H + G * i.slidesPerGroup) + N * T / k, O.css({ \"-webkit-box-ordinal-group\": A, \"-moz-box-ordinal-group\": A, \"-ms-flex-order\": A, \"-webkit-order\": A, order: A }) } else \"column\" === i.slidesPerColumnFill ? (N = I - (D = Math.floor(I / k)) * k, (D > $ || D === $ && N === k - 1) && (N += 1) >= k && (N = 0, D += 1)) : D = I - (N = Math.floor(I / L)) * L;\r\n                                O.css(t(\"margin-top\"), 0 !== N && i.spaceBetween && i.spaceBetween + \"px\") } if (\"none\" !== O.css(\"display\")) { if (\"auto\" === i.slidesPerView) { var X = getComputedStyle(O[0]),\r\n                                        Y = O[0].style.transform,\r\n                                        R = O[0].style.webkitTransform; if (Y && (O[0].style.transform = \"none\"), R && (O[0].style.webkitTransform = \"none\"), i.roundLengths) S = e.isHorizontal() ? O.outerWidth(!0) : O.outerHeight(!0);\r\n                                    else { var V = a(X, \"width\"),\r\n                                            W = a(X, \"padding-left\"),\r\n                                            F = a(X, \"padding-right\"),\r\n                                            _ = a(X, \"margin-left\"),\r\n                                            q = a(X, \"margin-right\"),\r\n                                            j = X.getPropertyValue(\"box-sizing\"); if (j && \"border-box\" === j) S = V + _ + q;\r\n                                        else { var U = O[0],\r\n                                                K = U.clientWidth;\r\n                                            S = V + W + F + _ + q + (U.offsetWidth - K) } } Y && (O[0].style.transform = Y), R && (O[0].style.webkitTransform = R), i.roundLengths && (S = Math.floor(S)) } else S = (r - (i.slidesPerView - 1) * w) / i.slidesPerView, i.roundLengths && (S = Math.floor(S)), p[I] && (p[I].style[t(\"width\")] = S + \"px\");\r\n                                p[I] && (p[I].swiperSlideSize = S), v.push(S), i.centeredSlides ? (y = y + S / 2 + E / 2 + w, 0 === E && 0 !== I && (y = y - r / 2 - w), 0 === I && (y = y - r / 2 - w), Math.abs(y) < .001 && (y = 0), i.roundLengths && (y = Math.floor(y)), x % i.slidesPerGroup == 0 && u.push(y), h.push(y)) : (i.roundLengths && (y = Math.floor(y)), (x - Math.min(e.params.slidesPerGroupSkip, x)) % e.params.slidesPerGroup == 0 && u.push(y), h.push(y), y = y + S + w), e.virtualSize += S + w, E = S, x += 1 } } if (e.virtualSize = Math.max(e.virtualSize, r) + m, n && o && (\"slide\" === i.effect || \"coverflow\" === i.effect) && s.css({ width: e.virtualSize + i.spaceBetween + \"px\" }), i.setWrapperSize) s.css(((z = {})[t(\"width\")] = e.virtualSize + i.spaceBetween + \"px\", z)); if (i.slidesPerColumn > 1)\r\n                            if (e.virtualSize = (S + i.spaceBetween) * T, e.virtualSize = Math.ceil(e.virtualSize / i.slidesPerColumn) - i.spaceBetween, s.css(((P = {})[t(\"width\")] = e.virtualSize + i.spaceBetween + \"px\", P)), i.centeredSlides) { M = []; for (var Z = 0; Z < u.length; Z += 1) { var J = u[Z];\r\n                                    i.roundLengths && (J = Math.floor(J)), u[Z] < e.virtualSize + u[0] && M.push(J) } u = M } if (!i.centeredSlides) { M = []; for (var Q = 0; Q < u.length; Q += 1) { var ee = u[Q];\r\n                                i.roundLengths && (ee = Math.floor(ee)), u[Q] <= e.virtualSize - r && M.push(ee) } u = M, Math.floor(e.virtualSize - r) - Math.floor(u[u.length - 1]) > 1 && u.push(e.virtualSize - r) } if (0 === u.length && (u = [0]), 0 !== i.spaceBetween) { var te, ae = e.isHorizontal() && n ? \"marginLeft\" : t(\"marginRight\");\r\n                            p.filter((function(e, t) { return !i.cssMode || t !== p.length - 1 })).css(((te = {})[ae] = w + \"px\", te)) } if (i.centeredSlides && i.centeredSlidesBounds) { var ie = 0;\r\n                            v.forEach((function(e) { ie += e + (i.spaceBetween ? i.spaceBetween : 0) })); var se = (ie -= i.spaceBetween) - r;\r\n                            u = u.map((function(e) { return e < 0 ? -f : e > se ? se + m : e })) } if (i.centerInsufficientSlides) { var re = 0; if (v.forEach((function(e) { re += e + (i.spaceBetween ? i.spaceBetween : 0) })), (re -= i.spaceBetween) < r) { var ne = (r - re) / 2;\r\n                                u.forEach((function(e, t) { u[t] = e - ne })), h.forEach((function(e, t) { h[t] = e + ne })) } } C(e, { slides: p, snapGrid: u, slidesGrid: h, slidesSizesGrid: v }), c !== d && e.emit(\"slidesLengthChange\"), u.length !== g && (e.params.watchOverflow && e.checkOverflow(), e.emit(\"snapGridLengthChange\")), h.length !== b && e.emit(\"slidesGridLengthChange\"), (i.watchSlidesProgress || i.watchSlidesVisibility) && e.updateSlidesOffset() } }, updateAutoHeight: function(e) { var t, a = this,\r\n                        i = [],\r\n                        s = 0; if (\"number\" == typeof e ? a.setTransition(e) : !0 === e && a.setTransition(a.params.speed), \"auto\" !== a.params.slidesPerView && a.params.slidesPerView > 1)\r\n                        if (a.params.centeredSlides) a.visibleSlides.each((function(e) { i.push(e) }));\r\n                        else\r\n                            for (t = 0; t < Math.ceil(a.params.slidesPerView); t += 1) { var r = a.activeIndex + t; if (r > a.slides.length) break;\r\n                                i.push(a.slides.eq(r)[0]) } else i.push(a.slides.eq(a.activeIndex)[0]); for (t = 0; t < i.length; t += 1)\r\n                        if (void 0 !== i[t]) { var n = i[t].offsetHeight;\r\n                            s = n > s ? n : s } s && a.$wrapperEl.css(\"height\", s + \"px\") }, updateSlidesOffset: function() { for (var e = this.slides, t = 0; t < e.length; t += 1) e[t].swiperSlideOffset = this.isHorizontal() ? e[t].offsetLeft : e[t].offsetTop }, updateSlidesProgress: function(e) { void 0 === e && (e = this && this.translate || 0); var t = this,\r\n                        a = t.params,\r\n                        i = t.slides,\r\n                        s = t.rtlTranslate; if (0 !== i.length) { void 0 === i[0].swiperSlideOffset && t.updateSlidesOffset(); var r = -e;\r\n                        s && (r = e), i.removeClass(a.slideVisibleClass), t.visibleSlidesIndexes = [], t.visibleSlides = []; for (var n = 0; n < i.length; n += 1) { var o = i[n],\r\n                                l = (r + (a.centeredSlides ? t.minTranslate() : 0) - o.swiperSlideOffset) / (o.swiperSlideSize + a.spaceBetween); if (a.watchSlidesVisibility || a.centeredSlides && a.autoHeight) { var d = -(r - o.swiperSlideOffset),\r\n                                    p = d + t.slidesSizesGrid[n];\r\n                                (d >= 0 && d < t.size - 1 || p > 1 && p <= t.size || d <= 0 && p >= t.size) && (t.visibleSlides.push(o), t.visibleSlidesIndexes.push(n), i.eq(n).addClass(a.slideVisibleClass)) } o.progress = s ? -l : l } t.visibleSlides = m(t.visibleSlides) } }, updateProgress: function(e) { var t = this; if (void 0 === e) { var a = t.rtlTranslate ? -1 : 1;\r\n                        e = t && t.translate && t.translate * a || 0 } var i = t.params,\r\n                        s = t.maxTranslate() - t.minTranslate(),\r\n                        r = t.progress,\r\n                        n = t.isBeginning,\r\n                        o = t.isEnd,\r\n                        l = n,\r\n                        d = o;\r\n                    0 === s ? (r = 0, n = !0, o = !0) : (n = (r = (e - t.minTranslate()) / s) <= 0, o = r >= 1), C(t, { progress: r, isBeginning: n, isEnd: o }), (i.watchSlidesProgress || i.watchSlidesVisibility || i.centeredSlides && i.autoHeight) && t.updateSlidesProgress(e), n && !l && t.emit(\"reachBeginning toEdge\"), o && !d && t.emit(\"reachEnd toEdge\"), (l && !n || d && !o) && t.emit(\"fromEdge\"), t.emit(\"progress\", r) }, updateSlidesClasses: function() { var e, t = this,\r\n                        a = t.slides,\r\n                        i = t.params,\r\n                        s = t.$wrapperEl,\r\n                        r = t.activeIndex,\r\n                        n = t.realIndex,\r\n                        o = t.virtual && i.virtual.enabled;\r\n                    a.removeClass(i.slideActiveClass + \" \" + i.slideNextClass + \" \" + i.slidePrevClass + \" \" + i.slideDuplicateActiveClass + \" \" + i.slideDuplicateNextClass + \" \" + i.slideDuplicatePrevClass), (e = o ? t.$wrapperEl.find(\".\" + i.slideClass + '[data-swiper-slide-index=\"' + r + '\"]') : a.eq(r)).addClass(i.slideActiveClass), i.loop && (e.hasClass(i.slideDuplicateClass) ? s.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + n + '\"]').addClass(i.slideDuplicateActiveClass) : s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + n + '\"]').addClass(i.slideDuplicateActiveClass)); var l = e.nextAll(\".\" + i.slideClass).eq(0).addClass(i.slideNextClass);\r\n                    i.loop && 0 === l.length && (l = a.eq(0)).addClass(i.slideNextClass); var d = e.prevAll(\".\" + i.slideClass).eq(0).addClass(i.slidePrevClass);\r\n                    i.loop && 0 === d.length && (d = a.eq(-1)).addClass(i.slidePrevClass), i.loop && (l.hasClass(i.slideDuplicateClass) ? s.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + l.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicateNextClass) : s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + l.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicateNextClass), d.hasClass(i.slideDuplicateClass) ? s.children(\".\" + i.slideClass + \":not(.\" + i.slideDuplicateClass + ')[data-swiper-slide-index=\"' + d.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicatePrevClass) : s.children(\".\" + i.slideClass + \".\" + i.slideDuplicateClass + '[data-swiper-slide-index=\"' + d.attr(\"data-swiper-slide-index\") + '\"]').addClass(i.slideDuplicatePrevClass)), t.emitSlidesClasses() }, updateActiveIndex: function(e) { var t, a = this,\r\n                        i = a.rtlTranslate ? a.translate : -a.translate,\r\n                        s = a.slidesGrid,\r\n                        r = a.snapGrid,\r\n                        n = a.params,\r\n                        o = a.activeIndex,\r\n                        l = a.realIndex,\r\n                        d = a.snapIndex,\r\n                        p = e; if (void 0 === p) { for (var c = 0; c < s.length; c += 1) void 0 !== s[c + 1] ? i >= s[c] && i < s[c + 1] - (s[c + 1] - s[c]) / 2 ? p = c : i >= s[c] && i < s[c + 1] && (p = c + 1) : i >= s[c] && (p = c);\r\n                        n.normalizeSlideIndex && (p < 0 || void 0 === p) && (p = 0) } if (r.indexOf(i) >= 0) t = r.indexOf(i);\r\n                    else { var u = Math.min(n.slidesPerGroupSkip, p);\r\n                        t = u + Math.floor((p - u) / n.slidesPerGroup) } if (t >= r.length && (t = r.length - 1), p !== o) { var h = parseInt(a.slides.eq(p).attr(\"data-swiper-slide-index\") || p, 10);\r\n                        C(a, { snapIndex: t, realIndex: h, previousIndex: o, activeIndex: p }), a.emit(\"activeIndexChange\"), a.emit(\"snapIndexChange\"), l !== h && a.emit(\"realIndexChange\"), (a.initialized || a.params.runCallbacksOnInit) && a.emit(\"slideChange\") } else t !== d && (a.snapIndex = t, a.emit(\"snapIndexChange\")) }, updateClickedSlide: function(e) { var t, a = this,\r\n                        i = a.params,\r\n                        s = m(e.target).closest(\".\" + i.slideClass)[0],\r\n                        r = !1; if (s)\r\n                        for (var n = 0; n < a.slides.length; n += 1)\r\n                            if (a.slides[n] === s) { r = !0, t = n; break } if (!s || !r) return a.clickedSlide = void 0, void(a.clickedIndex = void 0);\r\n                    a.clickedSlide = s, a.virtual && a.params.virtual.enabled ? a.clickedIndex = parseInt(m(s).attr(\"data-swiper-slide-index\"), 10) : a.clickedIndex = t, i.slideToClickedSlide && void 0 !== a.clickedIndex && a.clickedIndex !== a.activeIndex && a.slideToClickedSlide() } }, translate: { getTranslate: function(e) { void 0 === e && (e = this.isHorizontal() ? \"x\" : \"y\"); var t = this,\r\n                        a = t.params,\r\n                        i = t.rtlTranslate,\r\n                        s = t.translate,\r\n                        r = t.$wrapperEl; if (a.virtualTranslate) return i ? -s : s; if (a.cssMode) return s; var n = T(r[0], e); return i && (n = -n), n || 0 }, setTranslate: function(e, t) { var a = this,\r\n                        i = a.rtlTranslate,\r\n                        s = a.params,\r\n                        r = a.$wrapperEl,\r\n                        n = a.wrapperEl,\r\n                        o = a.progress,\r\n                        l = 0,\r\n                        d = 0;\r\n                    a.isHorizontal() ? l = i ? -e : e : d = e, s.roundLengths && (l = Math.floor(l), d = Math.floor(d)), s.cssMode ? n[a.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = a.isHorizontal() ? -l : -d : s.virtualTranslate || r.transform(\"translate3d(\" + l + \"px, \" + d + \"px, 0px)\"), a.previousTranslate = a.translate, a.translate = a.isHorizontal() ? l : d; var p = a.maxTranslate() - a.minTranslate();\r\n                    (0 === p ? 0 : (e - a.minTranslate()) / p) !== o && a.updateProgress(e), a.emit(\"setTranslate\", a.translate, t) }, minTranslate: function() { return -this.snapGrid[0] }, maxTranslate: function() { return -this.snapGrid[this.snapGrid.length - 1] }, translateTo: function(e, t, a, i, s) { void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0), void 0 === i && (i = !0); var r = this,\r\n                        n = r.params,\r\n                        o = r.wrapperEl; if (r.animating && n.preventInteractionOnTransition) return !1; var l, d = r.minTranslate(),\r\n                        p = r.maxTranslate(); if (l = i && e > d ? d : i && e < p ? p : e, r.updateProgress(l), n.cssMode) { var c, u = r.isHorizontal(); if (0 === t) o[u ? \"scrollLeft\" : \"scrollTop\"] = -l;\r\n                        else if (o.scrollTo) o.scrollTo(((c = {})[u ? \"left\" : \"top\"] = -l, c.behavior = \"smooth\", c));\r\n                        else o[u ? \"scrollLeft\" : \"scrollTop\"] = -l; return !0 } return 0 === t ? (r.setTransition(0), r.setTranslate(l), a && (r.emit(\"beforeTransitionStart\", t, s), r.emit(\"transitionEnd\"))) : (r.setTransition(t), r.setTranslate(l), a && (r.emit(\"beforeTransitionStart\", t, s), r.emit(\"transitionStart\")), r.animating || (r.animating = !0, r.onTranslateToWrapperTransitionEnd || (r.onTranslateToWrapperTransitionEnd = function(e) { r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener(\"transitionend\", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", r.onTranslateToWrapperTransitionEnd), r.onTranslateToWrapperTransitionEnd = null, delete r.onTranslateToWrapperTransitionEnd, a && r.emit(\"transitionEnd\")) }), r.$wrapperEl[0].addEventListener(\"transitionend\", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", r.onTranslateToWrapperTransitionEnd))), !0 } }, transition: { setTransition: function(e, t) { var a = this;\r\n                    a.params.cssMode || a.$wrapperEl.transition(e), a.emit(\"setTransition\", e, t) }, transitionStart: function(e, t) { void 0 === e && (e = !0); var a = this,\r\n                        i = a.activeIndex,\r\n                        s = a.params,\r\n                        r = a.previousIndex; if (!s.cssMode) { s.autoHeight && a.updateAutoHeight(); var n = t; if (n || (n = i > r ? \"next\" : i < r ? \"prev\" : \"reset\"), a.emit(\"transitionStart\"), e && i !== r) { if (\"reset\" === n) return void a.emit(\"slideResetTransitionStart\");\r\n                            a.emit(\"slideChangeTransitionStart\"), \"next\" === n ? a.emit(\"slideNextTransitionStart\") : a.emit(\"slidePrevTransitionStart\") } } }, transitionEnd: function(e, t) { void 0 === e && (e = !0); var a = this,\r\n                        i = a.activeIndex,\r\n                        s = a.previousIndex,\r\n                        r = a.params; if (a.animating = !1, !r.cssMode) { a.setTransition(0); var n = t; if (n || (n = i > s ? \"next\" : i < s ? \"prev\" : \"reset\"), a.emit(\"transitionEnd\"), e && i !== s) { if (\"reset\" === n) return void a.emit(\"slideResetTransitionEnd\");\r\n                            a.emit(\"slideChangeTransitionEnd\"), \"next\" === n ? a.emit(\"slideNextTransitionEnd\") : a.emit(\"slidePrevTransitionEnd\") } } } }, slide: { slideTo: function(e, t, a, i) { if (void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0), \"number\" != typeof e && \"string\" != typeof e) throw new Error(\"The 'index' argument cannot have type other than 'number' or 'string'. [\" + typeof e + \"] given.\"); if (\"string\" == typeof e) { var s = parseInt(e, 10); if (!isFinite(s)) throw new Error(\"The passed-in 'index' (string) couldn't be converted to 'number'. [\" + e + \"] given.\");\r\n                        e = s } var r = this,\r\n                        n = e;\r\n                    n < 0 && (n = 0); var o = r.params,\r\n                        l = r.snapGrid,\r\n                        d = r.slidesGrid,\r\n                        p = r.previousIndex,\r\n                        c = r.activeIndex,\r\n                        u = r.rtlTranslate,\r\n                        h = r.wrapperEl; if (r.animating && o.preventInteractionOnTransition) return !1; var v = Math.min(r.params.slidesPerGroupSkip, n),\r\n                        f = v + Math.floor((n - v) / r.params.slidesPerGroup);\r\n                    f >= l.length && (f = l.length - 1), (c || o.initialSlide || 0) === (p || 0) && a && r.emit(\"beforeSlideChangeStart\"); var m, g = -l[f]; if (r.updateProgress(g), o.normalizeSlideIndex)\r\n                        for (var b = 0; b < d.length; b += 1) { var w = -Math.floor(100 * g),\r\n                                y = Math.floor(100 * d[b]),\r\n                                E = Math.floor(100 * d[b + 1]);\r\n                            void 0 !== d[b + 1] ? w >= y && w < E - (E - y) / 2 ? n = b : w >= y && w < E && (n = b + 1) : w >= y && (n = b) }\r\n                    if (r.initialized && n !== c) { if (!r.allowSlideNext && g < r.translate && g < r.minTranslate()) return !1; if (!r.allowSlidePrev && g > r.translate && g > r.maxTranslate() && (c || 0) !== n) return !1 } if (m = n > c ? \"next\" : n < c ? \"prev\" : \"reset\", u && -g === r.translate || !u && g === r.translate) return r.updateActiveIndex(n), o.autoHeight && r.updateAutoHeight(), r.updateSlidesClasses(), \"slide\" !== o.effect && r.setTranslate(g), \"reset\" !== m && (r.transitionStart(a, m), r.transitionEnd(a, m)), !1; if (o.cssMode) { var x, T = r.isHorizontal(),\r\n                            S = -g; if (u && (S = h.scrollWidth - h.offsetWidth - S), 0 === t) h[T ? \"scrollLeft\" : \"scrollTop\"] = S;\r\n                        else if (h.scrollTo) h.scrollTo(((x = {})[T ? \"left\" : \"top\"] = S, x.behavior = \"smooth\", x));\r\n                        else h[T ? \"scrollLeft\" : \"scrollTop\"] = S; return !0 } return 0 === t ? (r.setTransition(0), r.setTranslate(g), r.updateActiveIndex(n), r.updateSlidesClasses(), r.emit(\"beforeTransitionStart\", t, i), r.transitionStart(a, m), r.transitionEnd(a, m)) : (r.setTransition(t), r.setTranslate(g), r.updateActiveIndex(n), r.updateSlidesClasses(), r.emit(\"beforeTransitionStart\", t, i), r.transitionStart(a, m), r.animating || (r.animating = !0, r.onSlideToWrapperTransitionEnd || (r.onSlideToWrapperTransitionEnd = function(e) { r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener(\"transitionend\", r.onSlideToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", r.onSlideToWrapperTransitionEnd), r.onSlideToWrapperTransitionEnd = null, delete r.onSlideToWrapperTransitionEnd, r.transitionEnd(a, m)) }), r.$wrapperEl[0].addEventListener(\"transitionend\", r.onSlideToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", r.onSlideToWrapperTransitionEnd))), !0 }, slideToLoop: function(e, t, a, i) { void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0); var s = this,\r\n                        r = e; return s.params.loop && (r += s.loopedSlides), s.slideTo(r, t, a, i) }, slideNext: function(e, t, a) { void 0 === e && (e = this.params.speed), void 0 === t && (t = !0); var i = this,\r\n                        s = i.params,\r\n                        r = i.animating,\r\n                        n = i.activeIndex < s.slidesPerGroupSkip ? 1 : s.slidesPerGroup; if (s.loop) { if (r && s.loopPreventsSlide) return !1;\r\n                        i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft } return i.slideTo(i.activeIndex + n, e, t, a) }, slidePrev: function(e, t, a) { void 0 === e && (e = this.params.speed), void 0 === t && (t = !0); var i = this,\r\n                        s = i.params,\r\n                        r = i.animating,\r\n                        n = i.snapGrid,\r\n                        o = i.slidesGrid,\r\n                        l = i.rtlTranslate; if (s.loop) { if (r && s.loopPreventsSlide) return !1;\r\n                        i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft }\r\n\r\n                    function d(e) { return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e) } var p = d(l ? i.translate : -i.translate),\r\n                        c = n.map((function(e) { return d(e) }));\r\n                    n[c.indexOf(p)]; var u, h = n[c.indexOf(p) - 1]; return void 0 === h && s.cssMode && n.forEach((function(e) {!h && p >= e && (h = e) })), void 0 !== h && (u = o.indexOf(h)) < 0 && (u = i.activeIndex - 1), i.slideTo(u, e, t, a) }, slideReset: function(e, t, a) { return void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), this.slideTo(this.activeIndex, e, t, a) }, slideToClosest: function(e, t, a, i) { void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), void 0 === i && (i = .5); var s = this,\r\n                        r = s.activeIndex,\r\n                        n = Math.min(s.params.slidesPerGroupSkip, r),\r\n                        o = n + Math.floor((r - n) / s.params.slidesPerGroup),\r\n                        l = s.rtlTranslate ? s.translate : -s.translate; if (l >= s.snapGrid[o]) { var d = s.snapGrid[o];\r\n                        l - d > (s.snapGrid[o + 1] - d) * i && (r += s.params.slidesPerGroup) } else { var p = s.snapGrid[o - 1];\r\n                        l - p <= (s.snapGrid[o] - p) * i && (r -= s.params.slidesPerGroup) } return r = Math.max(r, 0), r = Math.min(r, s.slidesGrid.length - 1), s.slideTo(r, e, t, a) }, slideToClickedSlide: function() { var e, t = this,\r\n                        a = t.params,\r\n                        i = t.$wrapperEl,\r\n                        s = \"auto\" === a.slidesPerView ? t.slidesPerViewDynamic() : a.slidesPerView,\r\n                        r = t.clickedIndex; if (a.loop) { if (t.animating) return;\r\n                        e = parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"), 10), a.centeredSlides ? r < t.loopedSlides - s / 2 || r > t.slides.length - t.loopedSlides + s / 2 ? (t.loopFix(), r = i.children(\".\" + a.slideClass + '[data-swiper-slide-index=\"' + e + '\"]:not(.' + a.slideDuplicateClass + \")\").eq(0).index(), E((function() { t.slideTo(r) }))) : t.slideTo(r) : r > t.slides.length - s ? (t.loopFix(), r = i.children(\".\" + a.slideClass + '[data-swiper-slide-index=\"' + e + '\"]:not(.' + a.slideDuplicateClass + \")\").eq(0).index(), E((function() { t.slideTo(r) }))) : t.slideTo(r) } else t.slideTo(r) } }, loop: { loopCreate: function() { var e = this,\r\n                        t = r(),\r\n                        a = e.params,\r\n                        i = e.$wrapperEl;\r\n                    i.children(\".\" + a.slideClass + \".\" + a.slideDuplicateClass).remove(); var s = i.children(\".\" + a.slideClass); if (a.loopFillGroupWithBlank) { var n = a.slidesPerGroup - s.length % a.slidesPerGroup; if (n !== a.slidesPerGroup) { for (var o = 0; o < n; o += 1) { var l = m(t.createElement(\"div\")).addClass(a.slideClass + \" \" + a.slideBlankClass);\r\n                                i.append(l) } s = i.children(\".\" + a.slideClass) } } \"auto\" !== a.slidesPerView || a.loopedSlides || (a.loopedSlides = s.length), e.loopedSlides = Math.ceil(parseFloat(a.loopedSlides || a.slidesPerView, 10)), e.loopedSlides += a.loopAdditionalSlides, e.loopedSlides > s.length && (e.loopedSlides = s.length); var d = [],\r\n                        p = [];\r\n                    s.each((function(t, a) { var i = m(t);\r\n                        a < e.loopedSlides && p.push(t), a < s.length && a >= s.length - e.loopedSlides && d.push(t), i.attr(\"data-swiper-slide-index\", a) })); for (var c = 0; c < p.length; c += 1) i.append(m(p[c].cloneNode(!0)).addClass(a.slideDuplicateClass)); for (var u = d.length - 1; u >= 0; u -= 1) i.prepend(m(d[u].cloneNode(!0)).addClass(a.slideDuplicateClass)) }, loopFix: function() { var e = this;\r\n                    e.emit(\"beforeLoopFix\"); var t, a = e.activeIndex,\r\n                        i = e.slides,\r\n                        s = e.loopedSlides,\r\n                        r = e.allowSlidePrev,\r\n                        n = e.allowSlideNext,\r\n                        o = e.snapGrid,\r\n                        l = e.rtlTranslate;\r\n                    e.allowSlidePrev = !0, e.allowSlideNext = !0; var d = -o[a] - e.getTranslate(); if (a < s) t = i.length - 3 * s + a, t += s, e.slideTo(t, 0, !1, !0) && 0 !== d && e.setTranslate((l ? -e.translate : e.translate) - d);\r\n                    else if (a >= i.length - s) { t = -i.length + a + s, t += s, e.slideTo(t, 0, !1, !0) && 0 !== d && e.setTranslate((l ? -e.translate : e.translate) - d) } e.allowSlidePrev = r, e.allowSlideNext = n, e.emit(\"loopFix\") }, loopDestroy: function() { var e = this,\r\n                        t = e.$wrapperEl,\r\n                        a = e.params,\r\n                        i = e.slides;\r\n                    t.children(\".\" + a.slideClass + \".\" + a.slideDuplicateClass + \",.\" + a.slideClass + \".\" + a.slideBlankClass).remove(), i.removeAttr(\"data-swiper-slide-index\") } }, grabCursor: { setGrabCursor: function(e) { var t = this; if (!(t.support.touch || !t.params.simulateTouch || t.params.watchOverflow && t.isLocked || t.params.cssMode)) { var a = t.el;\r\n                        a.style.cursor = \"move\", a.style.cursor = e ? \"-webkit-grabbing\" : \"-webkit-grab\", a.style.cursor = e ? \"-moz-grabbin\" : \"-moz-grab\", a.style.cursor = e ? \"grabbing\" : \"grab\" } }, unsetGrabCursor: function() { var e = this;\r\n                    e.support.touch || e.params.watchOverflow && e.isLocked || e.params.cssMode || (e.el.style.cursor = \"\") } }, manipulation: { appendSlide: function(e) { var t = this,\r\n                        a = t.$wrapperEl,\r\n                        i = t.params; if (i.loop && t.loopDestroy(), \"object\" == typeof e && \"length\" in e)\r\n                        for (var s = 0; s < e.length; s += 1) e[s] && a.append(e[s]);\r\n                    else a.append(e);\r\n                    i.loop && t.loopCreate(), i.observer && t.support.observer || t.update() }, prependSlide: function(e) { var t = this,\r\n                        a = t.params,\r\n                        i = t.$wrapperEl,\r\n                        s = t.activeIndex;\r\n                    a.loop && t.loopDestroy(); var r = s + 1; if (\"object\" == typeof e && \"length\" in e) { for (var n = 0; n < e.length; n += 1) e[n] && i.prepend(e[n]);\r\n                        r = s + e.length } else i.prepend(e);\r\n                    a.loop && t.loopCreate(), a.observer && t.support.observer || t.update(), t.slideTo(r, 0, !1) }, addSlide: function(e, t) { var a = this,\r\n                        i = a.$wrapperEl,\r\n                        s = a.params,\r\n                        r = a.activeIndex;\r\n                    s.loop && (r -= a.loopedSlides, a.loopDestroy(), a.slides = i.children(\".\" + s.slideClass)); var n = a.slides.length; if (e <= 0) a.prependSlide(t);\r\n                    else if (e >= n) a.appendSlide(t);\r\n                    else { for (var o = r > e ? r + 1 : r, l = [], d = n - 1; d >= e; d -= 1) { var p = a.slides.eq(d);\r\n                            p.remove(), l.unshift(p) } if (\"object\" == typeof t && \"length\" in t) { for (var c = 0; c < t.length; c += 1) t[c] && i.append(t[c]);\r\n                            o = r > e ? r + t.length : r } else i.append(t); for (var u = 0; u < l.length; u += 1) i.append(l[u]);\r\n                        s.loop && a.loopCreate(), s.observer && a.support.observer || a.update(), s.loop ? a.slideTo(o + a.loopedSlides, 0, !1) : a.slideTo(o, 0, !1) } }, removeSlide: function(e) { var t = this,\r\n                        a = t.params,\r\n                        i = t.$wrapperEl,\r\n                        s = t.activeIndex;\r\n                    a.loop && (s -= t.loopedSlides, t.loopDestroy(), t.slides = i.children(\".\" + a.slideClass)); var r, n = s; if (\"object\" == typeof e && \"length\" in e) { for (var o = 0; o < e.length; o += 1) r = e[o], t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1);\r\n                        n = Math.max(n, 0) } else r = e, t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1), n = Math.max(n, 0);\r\n                    a.loop && t.loopCreate(), a.observer && t.support.observer || t.update(), a.loop ? t.slideTo(n + t.loopedSlides, 0, !1) : t.slideTo(n, 0, !1) }, removeAllSlides: function() { for (var e = [], t = 0; t < this.slides.length; t += 1) e.push(t);\r\n                    this.removeSlide(e) } }, events: { attachEvents: function() { var e = this,\r\n                        t = r(),\r\n                        a = e.params,\r\n                        i = e.touchEvents,\r\n                        s = e.el,\r\n                        n = e.wrapperEl,\r\n                        o = e.device,\r\n                        l = e.support;\r\n                    e.onTouchStart = A.bind(e), e.onTouchMove = D.bind(e), e.onTouchEnd = N.bind(e), a.cssMode && (e.onScroll = H.bind(e)), e.onClick = B.bind(e); var d = !!a.nested; if (!l.touch && l.pointerEvents) s.addEventListener(i.start, e.onTouchStart, !1), t.addEventListener(i.move, e.onTouchMove, d), t.addEventListener(i.end, e.onTouchEnd, !1);\r\n                    else { if (l.touch) { var p = !(\"touchstart\" !== i.start || !l.passiveListener || !a.passiveListeners) && { passive: !0, capture: !1 };\r\n                            s.addEventListener(i.start, e.onTouchStart, p), s.addEventListener(i.move, e.onTouchMove, l.passiveListener ? { passive: !1, capture: d } : d), s.addEventListener(i.end, e.onTouchEnd, p), i.cancel && s.addEventListener(i.cancel, e.onTouchEnd, p), X || (t.addEventListener(\"touchstart\", Y), X = !0) }(a.simulateTouch && !o.ios && !o.android || a.simulateTouch && !l.touch && o.ios) && (s.addEventListener(\"mousedown\", e.onTouchStart, !1), t.addEventListener(\"mousemove\", e.onTouchMove, d), t.addEventListener(\"mouseup\", e.onTouchEnd, !1)) }(a.preventClicks || a.preventClicksPropagation) && s.addEventListener(\"click\", e.onClick, !0), a.cssMode && n.addEventListener(\"scroll\", e.onScroll), a.updateOnWindowResize ? e.on(o.ios || o.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", G, !0) : e.on(\"observerUpdate\", G, !0) }, detachEvents: function() { var e = this,\r\n                        t = r(),\r\n                        a = e.params,\r\n                        i = e.touchEvents,\r\n                        s = e.el,\r\n                        n = e.wrapperEl,\r\n                        o = e.device,\r\n                        l = e.support,\r\n                        d = !!a.nested; if (!l.touch && l.pointerEvents) s.removeEventListener(i.start, e.onTouchStart, !1), t.removeEventListener(i.move, e.onTouchMove, d), t.removeEventListener(i.end, e.onTouchEnd, !1);\r\n                    else { if (l.touch) { var p = !(\"onTouchStart\" !== i.start || !l.passiveListener || !a.passiveListeners) && { passive: !0, capture: !1 };\r\n                            s.removeEventListener(i.start, e.onTouchStart, p), s.removeEventListener(i.move, e.onTouchMove, d), s.removeEventListener(i.end, e.onTouchEnd, p), i.cancel && s.removeEventListener(i.cancel, e.onTouchEnd, p) }(a.simulateTouch && !o.ios && !o.android || a.simulateTouch && !l.touch && o.ios) && (s.removeEventListener(\"mousedown\", e.onTouchStart, !1), t.removeEventListener(\"mousemove\", e.onTouchMove, d), t.removeEventListener(\"mouseup\", e.onTouchEnd, !1)) }(a.preventClicks || a.preventClicksPropagation) && s.removeEventListener(\"click\", e.onClick, !0), a.cssMode && n.removeEventListener(\"scroll\", e.onScroll), e.off(o.ios || o.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", G) } }, breakpoints: { setBreakpoint: function() { var e = this,\r\n                        t = e.activeIndex,\r\n                        a = e.initialized,\r\n                        i = e.loopedSlides,\r\n                        s = void 0 === i ? 0 : i,\r\n                        r = e.params,\r\n                        n = e.$el,\r\n                        o = r.breakpoints; if (o && (!o || 0 !== Object.keys(o).length)) { var l = e.getBreakpoint(o, e.params.breakpointsBase, e.el); if (l && e.currentBreakpoint !== l) { var d = l in o ? o[l] : void 0;\r\n                            d && [\"slidesPerView\", \"spaceBetween\", \"slidesPerGroup\", \"slidesPerGroupSkip\", \"slidesPerColumn\"].forEach((function(e) { var t = d[e];\r\n                                void 0 !== t && (d[e] = \"slidesPerView\" !== e || \"AUTO\" !== t && \"auto\" !== t ? \"slidesPerView\" === e ? parseFloat(t) : parseInt(t, 10) : \"auto\") })); var p = d || e.originalParams,\r\n                                c = r.slidesPerColumn > 1,\r\n                                u = p.slidesPerColumn > 1;\r\n                            c && !u ? (n.removeClass(r.containerModifierClass + \"multirow \" + r.containerModifierClass + \"multirow-column\"), e.emitContainerClasses()) : !c && u && (n.addClass(r.containerModifierClass + \"multirow\"), \"column\" === p.slidesPerColumnFill && n.addClass(r.containerModifierClass + \"multirow-column\"), e.emitContainerClasses()); var h = p.direction && p.direction !== r.direction,\r\n                                v = r.loop && (p.slidesPerView !== r.slidesPerView || h);\r\n                            h && a && e.changeDirection(), C(e.params, p), C(e, { allowTouchMove: e.params.allowTouchMove, allowSlideNext: e.params.allowSlideNext, allowSlidePrev: e.params.allowSlidePrev }), e.currentBreakpoint = l, e.emit(\"_beforeBreakpoint\", p), v && a && (e.loopDestroy(), e.loopCreate(), e.updateSlides(), e.slideTo(t - s + e.loopedSlides, 0, !1)), e.emit(\"breakpoint\", p) } } }, getBreakpoint: function(e, t, a) { if (void 0 === t && (t = \"window\"), e && (\"container\" !== t || a)) { var i = !1,\r\n                            s = o(),\r\n                            r = \"window\" === t ? s.innerWidth : a.clientWidth,\r\n                            n = \"window\" === t ? s.innerHeight : a.clientHeight,\r\n                            l = Object.keys(e).map((function(e) { if (\"string\" == typeof e && 0 === e.indexOf(\"@\")) { var t = parseFloat(e.substr(1)); return { value: n * t, point: e } } return { value: e, point: e } }));\r\n                        l.sort((function(e, t) { return parseInt(e.value, 10) - parseInt(t.value, 10) })); for (var d = 0; d < l.length; d += 1) { var p = l[d],\r\n                                c = p.point;\r\n                            p.value <= r && (i = c) } return i || \"max\" } } }, checkOverflow: { checkOverflow: function() { var e = this,\r\n                        t = e.params,\r\n                        a = e.isLocked,\r\n                        i = e.slides.length > 0 && t.slidesOffsetBefore + t.spaceBetween * (e.slides.length - 1) + e.slides[0].offsetWidth * e.slides.length;\r\n                    t.slidesOffsetBefore && t.slidesOffsetAfter && i ? e.isLocked = i <= e.size : e.isLocked = 1 === e.snapGrid.length, e.allowSlideNext = !e.isLocked, e.allowSlidePrev = !e.isLocked, a !== e.isLocked && e.emit(e.isLocked ? \"lock\" : \"unlock\"), a && a !== e.isLocked && (e.isEnd = !1, e.navigation && e.navigation.update()) } }, classes: { addClasses: function() { var e, t, a, i = this,\r\n                        s = i.classNames,\r\n                        r = i.params,\r\n                        n = i.rtl,\r\n                        o = i.$el,\r\n                        l = i.device,\r\n                        d = i.support,\r\n                        p = (e = [\"initialized\", r.direction, { \"pointer-events\": d.pointerEvents && !d.touch }, { \"free-mode\": r.freeMode }, { autoheight: r.autoHeight }, { rtl: n }, { multirow: r.slidesPerColumn > 1 }, { \"multirow-column\": r.slidesPerColumn > 1 && \"column\" === r.slidesPerColumnFill }, { android: l.android }, { ios: l.ios }, { \"css-mode\": r.cssMode }], t = r.containerModifierClass, a = [], e.forEach((function(e) { \"object\" == typeof e ? Object.keys(e).forEach((function(i) { e[i] && a.push(t + i) })) : \"string\" == typeof e && a.push(t + e) })), a);\r\n                    s.push.apply(s, p), o.addClass([].concat(s).join(\" \")), i.emitContainerClasses() }, removeClasses: function() { var e = this,\r\n                        t = e.$el,\r\n                        a = e.classNames;\r\n                    t.removeClass(a.join(\" \")), e.emitContainerClasses() } }, images: { loadImage: function(e, t, a, i, s, r) { var n, l = o();\r\n\r\n                    function d() { r && r() } m(e).parent(\"picture\")[0] || e.complete && s ? d() : t ? ((n = new l.Image).onload = d, n.onerror = d, i && (n.sizes = i), a && (n.srcset = a), t && (n.src = t)) : d() }, preloadImages: function() { var e = this;\r\n\r\n                    function t() { null != e && e && !e.destroyed && (void 0 !== e.imagesLoaded && (e.imagesLoaded += 1), e.imagesLoaded === e.imagesToLoad.length && (e.params.updateOnImagesReady && e.update(), e.emit(\"imagesReady\"))) } e.imagesToLoad = e.$el.find(\"img\"); for (var a = 0; a < e.imagesToLoad.length; a += 1) { var i = e.imagesToLoad[a];\r\n                        e.loadImage(i, i.currentSrc || i.getAttribute(\"src\"), i.srcset || i.getAttribute(\"srcset\"), i.sizes || i.getAttribute(\"sizes\"), !0, t) } } } },\r\n        W = {},\r\n        F = function() {\r\n            function t() { for (var e, a, i = arguments.length, s = new Array(i), r = 0; r < i; r++) s[r] = arguments[r]; if (1 === s.length && s[0].constructor && \"Object\" === Object.prototype.toString.call(s[0]).slice(8, -1) ? a = s[0] : (e = s[0], a = s[1]), a || (a = {}), a = C({}, a), e && !a.el && (a.el = e), a.el && m(a.el).length > 1) { var n = []; return m(a.el).each((function(e) { var i = C({}, a, { el: e });\r\n                        n.push(new t(i)) })), n } var o = this;\r\n                o.__swiper__ = !0, o.support = P(), o.device = k({ userAgent: a.userAgent }), o.browser = L(), o.eventsListeners = {}, o.eventsAnyListeners = [], void 0 === o.modules && (o.modules = {}), Object.keys(o.modules).forEach((function(e) { var t = o.modules[e]; if (t.params) { var i = Object.keys(t.params)[0],\r\n                            s = t.params[i]; if (\"object\" != typeof s || null === s) return; if (!(i in a) || !(\"enabled\" in s)) return;!0 === a[i] && (a[i] = { enabled: !0 }), \"object\" != typeof a[i] || \"enabled\" in a[i] || (a[i].enabled = !0), a[i] || (a[i] = { enabled: !1 }) } })); var l, d, p = C({}, R); return o.useParams(p), o.params = C({}, p, W, a), o.originalParams = C({}, o.params), o.passedParams = C({}, a), o.params && o.params.on && Object.keys(o.params.on).forEach((function(e) { o.on(e, o.params.on[e]) })), o.params && o.params.onAny && o.onAny(o.params.onAny), o.$ = m, C(o, { el: e, classNames: [], slides: m(), slidesGrid: [], snapGrid: [], slidesSizesGrid: [], isHorizontal: function() { return \"horizontal\" === o.params.direction }, isVertical: function() { return \"vertical\" === o.params.direction }, activeIndex: 0, realIndex: 0, isBeginning: !0, isEnd: !1, translate: 0, previousTranslate: 0, progress: 0, velocity: 0, animating: !1, allowSlideNext: o.params.allowSlideNext, allowSlidePrev: o.params.allowSlidePrev, touchEvents: (l = [\"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"], d = [\"mousedown\", \"mousemove\", \"mouseup\"], o.support.pointerEvents && (d = [\"pointerdown\", \"pointermove\", \"pointerup\"]), o.touchEventsTouch = { start: l[0], move: l[1], end: l[2], cancel: l[3] }, o.touchEventsDesktop = { start: d[0], move: d[1], end: d[2] }, o.support.touch || !o.params.simulateTouch ? o.touchEventsTouch : o.touchEventsDesktop), touchEventsData: { isTouched: void 0, isMoved: void 0, allowTouchCallbacks: void 0, touchStartTime: void 0, isScrolling: void 0, currentTranslate: void 0, startTranslate: void 0, allowThresholdMove: void 0, formElements: \"input, select, option, textarea, button, video, label\", lastClickTime: x(), clickTimeout: void 0, velocities: [], allowMomentumBounce: void 0, isTouchEvent: void 0, startMoving: void 0 }, allowClick: !0, allowTouchMove: o.params.allowTouchMove, touches: { startX: 0, startY: 0, currentX: 0, currentY: 0, diff: 0 }, imagesToLoad: [], imagesLoaded: 0 }), o.useModules(), o.emit(\"_swiper\"), o.params.init && o.init(), o } var a, i, s, r = t.prototype; return r.emitContainerClasses = function() { var e = this; if (e.params._emitClasses && e.el) { var t = e.el.className.split(\" \").filter((function(t) { return 0 === t.indexOf(\"swiper-container\") || 0 === t.indexOf(e.params.containerModifierClass) }));\r\n                    e.emit(\"_containerClasses\", t.join(\" \")) } }, r.getSlideClasses = function(e) { var t = this; return e.className.split(\" \").filter((function(e) { return 0 === e.indexOf(\"swiper-slide\") || 0 === e.indexOf(t.params.slideClass) })).join(\" \") }, r.emitSlidesClasses = function() { var e = this; if (e.params._emitClasses && e.el) { var t = [];\r\n                    e.slides.each((function(a) { var i = e.getSlideClasses(a);\r\n                        t.push({ slideEl: a, classNames: i }), e.emit(\"_slideClass\", a, i) })), e.emit(\"_slideClasses\", t) } }, r.slidesPerViewDynamic = function() { var e = this,\r\n                    t = e.params,\r\n                    a = e.slides,\r\n                    i = e.slidesGrid,\r\n                    s = e.size,\r\n                    r = e.activeIndex,\r\n                    n = 1; if (t.centeredSlides) { for (var o, l = a[r].swiperSlideSize, d = r + 1; d < a.length; d += 1) a[d] && !o && (n += 1, (l += a[d].swiperSlideSize) > s && (o = !0)); for (var p = r - 1; p >= 0; p -= 1) a[p] && !o && (n += 1, (l += a[p].swiperSlideSize) > s && (o = !0)) } else\r\n                    for (var c = r + 1; c < a.length; c += 1) i[c] - i[r] < s && (n += 1); return n }, r.update = function() { var e = this; if (e && !e.destroyed) { var t = e.snapGrid,\r\n                        a = e.params;\r\n                    a.breakpoints && e.setBreakpoint(), e.updateSize(), e.updateSlides(), e.updateProgress(), e.updateSlidesClasses(), e.params.freeMode ? (i(), e.params.autoHeight && e.updateAutoHeight()) : ((\"auto\" === e.params.slidesPerView || e.params.slidesPerView > 1) && e.isEnd && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0)) || i(), a.watchOverflow && t !== e.snapGrid && e.checkOverflow(), e.emit(\"update\") }\r\n\r\n                function i() { var t = e.rtlTranslate ? -1 * e.translate : e.translate,\r\n                        a = Math.min(Math.max(t, e.maxTranslate()), e.minTranslate());\r\n                    e.setTranslate(a), e.updateActiveIndex(), e.updateSlidesClasses() } }, r.changeDirection = function(e, t) { void 0 === t && (t = !0); var a = this,\r\n                    i = a.params.direction; return e || (e = \"horizontal\" === i ? \"vertical\" : \"horizontal\"), e === i || \"horizontal\" !== e && \"vertical\" !== e || (a.$el.removeClass(\"\" + a.params.containerModifierClass + i).addClass(\"\" + a.params.containerModifierClass + e), a.emitContainerClasses(), a.params.direction = e, a.slides.each((function(t) { \"vertical\" === e ? t.style.width = \"\" : t.style.height = \"\" })), a.emit(\"changeDirection\"), t && a.update()), a }, r.mount = function(e) { var t = this; if (t.mounted) return !0; var a, i = m(e || t.params.el); return !!(e = i[0]) && (e.swiper = t, e && e.shadowRoot && e.shadowRoot.querySelector ? (a = m(e.shadowRoot.querySelector(\".\" + t.params.wrapperClass))).children = function(e) { return i.children(e) } : a = i.children(\".\" + t.params.wrapperClass), C(t, { $el: i, el: e, $wrapperEl: a, wrapperEl: a[0], mounted: !0, rtl: \"rtl\" === e.dir.toLowerCase() || \"rtl\" === i.css(\"direction\"), rtlTranslate: \"horizontal\" === t.params.direction && (\"rtl\" === e.dir.toLowerCase() || \"rtl\" === i.css(\"direction\")), wrongRTL: \"-webkit-box\" === a.css(\"display\") }), !0) }, r.init = function(e) { var t = this; return t.initialized || !1 === t.mount(e) || (t.emit(\"beforeInit\"), t.params.breakpoints && t.setBreakpoint(), t.addClasses(), t.params.loop && t.loopCreate(), t.updateSize(), t.updateSlides(), t.params.watchOverflow && t.checkOverflow(), t.params.grabCursor && t.setGrabCursor(), t.params.preloadImages && t.preloadImages(), t.params.loop ? t.slideTo(t.params.initialSlide + t.loopedSlides, 0, t.params.runCallbacksOnInit) : t.slideTo(t.params.initialSlide, 0, t.params.runCallbacksOnInit), t.attachEvents(), t.initialized = !0, t.emit(\"init\"), t.emit(\"afterInit\")), t }, r.destroy = function(e, t) { void 0 === e && (e = !0), void 0 === t && (t = !0); var a, i = this,\r\n                    s = i.params,\r\n                    r = i.$el,\r\n                    n = i.$wrapperEl,\r\n                    o = i.slides; return void 0 === i.params || i.destroyed || (i.emit(\"beforeDestroy\"), i.initialized = !1, i.detachEvents(), s.loop && i.loopDestroy(), t && (i.removeClasses(), r.removeAttr(\"style\"), n.removeAttr(\"style\"), o && o.length && o.removeClass([s.slideVisibleClass, s.slideActiveClass, s.slideNextClass, s.slidePrevClass].join(\" \")).removeAttr(\"style\").removeAttr(\"data-swiper-slide-index\")), i.emit(\"destroy\"), Object.keys(i.eventsListeners).forEach((function(e) { i.off(e) })), !1 !== e && (i.$el[0].swiper = null, a = i, Object.keys(a).forEach((function(e) { try { a[e] = null } catch (e) {} try { delete a[e] } catch (e) {} }))), i.destroyed = !0), null }, t.extendDefaults = function(e) { C(W, e) }, t.installModule = function(e) { t.prototype.modules || (t.prototype.modules = {}); var a = e.name || Object.keys(t.prototype.modules).length + \"_\" + x();\r\n                t.prototype.modules[a] = e }, t.use = function(e) { return Array.isArray(e) ? (e.forEach((function(e) { return t.installModule(e) })), t) : (t.installModule(e), t) }, a = t, s = [{ key: \"extendedDefaults\", get: function() { return W } }, { key: \"defaults\", get: function() { return R } }], (i = null) && e(a.prototype, i), s && e(a, s), t }();\r\n    Object.keys(V).forEach((function(e) { Object.keys(V[e]).forEach((function(t) { F.prototype[t] = V[e][t] })) })), F.use([$, O]); var _ = { update: function(e) { var t = this,\r\n                    a = t.params,\r\n                    i = a.slidesPerView,\r\n                    s = a.slidesPerGroup,\r\n                    r = a.centeredSlides,\r\n                    n = t.params.virtual,\r\n                    o = n.addSlidesBefore,\r\n                    l = n.addSlidesAfter,\r\n                    d = t.virtual,\r\n                    p = d.from,\r\n                    c = d.to,\r\n                    u = d.slides,\r\n                    h = d.slidesGrid,\r\n                    v = d.renderSlide,\r\n                    f = d.offset;\r\n                t.updateActiveIndex(); var m, g, b, w = t.activeIndex || 0;\r\n                m = t.rtlTranslate ? \"right\" : t.isHorizontal() ? \"left\" : \"top\", r ? (g = Math.floor(i / 2) + s + l, b = Math.floor(i / 2) + s + o) : (g = i + (s - 1) + l, b = s + o); var y = Math.max((w || 0) - b, 0),\r\n                    E = Math.min((w || 0) + g, u.length - 1),\r\n                    x = (t.slidesGrid[y] || 0) - (t.slidesGrid[0] || 0);\r\n\r\n                function T() { t.updateSlides(), t.updateProgress(), t.updateSlidesClasses(), t.lazy && t.params.lazy.enabled && t.lazy.load() } if (C(t.virtual, { from: y, to: E, offset: x, slidesGrid: t.slidesGrid }), p === y && c === E && !e) return t.slidesGrid !== h && x !== f && t.slides.css(m, x + \"px\"), void t.updateProgress(); if (t.params.virtual.renderExternal) return t.params.virtual.renderExternal.call(t, { offset: x, from: y, to: E, slides: function() { for (var e = [], t = y; t <= E; t += 1) e.push(u[t]); return e }() }), void(t.params.virtual.renderExternalUpdate && T()); var S = [],\r\n                    M = []; if (e) t.$wrapperEl.find(\".\" + t.params.slideClass).remove();\r\n                else\r\n                    for (var z = p; z <= c; z += 1)(z < y || z > E) && t.$wrapperEl.find(\".\" + t.params.slideClass + '[data-swiper-slide-index=\"' + z + '\"]').remove(); for (var P = 0; P < u.length; P += 1) P >= y && P <= E && (void 0 === c || e ? M.push(P) : (P > c && M.push(P), P < p && S.push(P)));\r\n                M.forEach((function(e) { t.$wrapperEl.append(v(u[e], e)) })), S.sort((function(e, t) { return t - e })).forEach((function(e) { t.$wrapperEl.prepend(v(u[e], e)) })), t.$wrapperEl.children(\".swiper-slide\").css(m, x + \"px\"), T() }, renderSlide: function(e, t) { var a = this,\r\n                    i = a.params.virtual; if (i.cache && a.virtual.cache[t]) return a.virtual.cache[t]; var s = i.renderSlide ? m(i.renderSlide.call(a, e, t)) : m('<div class=\"' + a.params.slideClass + '\" data-swiper-slide-index=\"' + t + '\">' + e + \"</div>\"); return s.attr(\"data-swiper-slide-index\") || s.attr(\"data-swiper-slide-index\", t), i.cache && (a.virtual.cache[t] = s), s }, appendSlide: function(e) { var t = this; if (\"object\" == typeof e && \"length\" in e)\r\n                    for (var a = 0; a < e.length; a += 1) e[a] && t.virtual.slides.push(e[a]);\r\n                else t.virtual.slides.push(e);\r\n                t.virtual.update(!0) }, prependSlide: function(e) { var t = this,\r\n                    a = t.activeIndex,\r\n                    i = a + 1,\r\n                    s = 1; if (Array.isArray(e)) { for (var r = 0; r < e.length; r += 1) e[r] && t.virtual.slides.unshift(e[r]);\r\n                    i = a + e.length, s = e.length } else t.virtual.slides.unshift(e); if (t.params.virtual.cache) { var n = t.virtual.cache,\r\n                        o = {};\r\n                    Object.keys(n).forEach((function(e) { var t = n[e],\r\n                            a = t.attr(\"data-swiper-slide-index\");\r\n                        a && t.attr(\"data-swiper-slide-index\", parseInt(a, 10) + 1), o[parseInt(e, 10) + s] = t })), t.virtual.cache = o } t.virtual.update(!0), t.slideTo(i, 0) }, removeSlide: function(e) { var t = this; if (null != e) { var a = t.activeIndex; if (Array.isArray(e))\r\n                        for (var i = e.length - 1; i >= 0; i -= 1) t.virtual.slides.splice(e[i], 1), t.params.virtual.cache && delete t.virtual.cache[e[i]], e[i] < a && (a -= 1), a = Math.max(a, 0);\r\n                    else t.virtual.slides.splice(e, 1), t.params.virtual.cache && delete t.virtual.cache[e], e < a && (a -= 1), a = Math.max(a, 0);\r\n                    t.virtual.update(!0), t.slideTo(a, 0) } }, removeAllSlides: function() { var e = this;\r\n                e.virtual.slides = [], e.params.virtual.cache && (e.virtual.cache = {}), e.virtual.update(!0), e.slideTo(0, 0) } },\r\n        q = { name: \"virtual\", params: { virtual: { enabled: !1, slides: [], cache: !0, renderSlide: null, renderExternal: null, renderExternalUpdate: !0, addSlidesBefore: 0, addSlidesAfter: 0 } }, create: function() { M(this, { virtual: t({}, _, { slides: this.params.virtual.slides, cache: {} }) }) }, on: { beforeInit: function(e) { if (e.params.virtual.enabled) { e.classNames.push(e.params.containerModifierClass + \"virtual\"); var t = { watchSlidesProgress: !0 };\r\n                        C(e.params, t), C(e.originalParams, t), e.params.initialSlide || e.virtual.update() } }, setTranslate: function(e) { e.params.virtual.enabled && e.virtual.update() } } },\r\n        j = { handle: function(e) { var t = this,\r\n                    a = o(),\r\n                    i = r(),\r\n                    s = t.rtlTranslate,\r\n                    n = e;\r\n                n.originalEvent && (n = n.originalEvent); var l = n.keyCode || n.charCode,\r\n                    d = t.params.keyboard.pageUpDown,\r\n                    p = d && 33 === l,\r\n                    c = d && 34 === l,\r\n                    u = 37 === l,\r\n                    h = 39 === l,\r\n                    v = 38 === l,\r\n                    f = 40 === l; if (!t.allowSlideNext && (t.isHorizontal() && h || t.isVertical() && f || c)) return !1; if (!t.allowSlidePrev && (t.isHorizontal() && u || t.isVertical() && v || p)) return !1; if (!(n.shiftKey || n.altKey || n.ctrlKey || n.metaKey || i.activeElement && i.activeElement.nodeName && (\"input\" === i.activeElement.nodeName.toLowerCase() || \"textarea\" === i.activeElement.nodeName.toLowerCase()))) { if (t.params.keyboard.onlyInViewport && (p || c || u || h || v || f)) { var m = !1; if (t.$el.parents(\".\" + t.params.slideClass).length > 0 && 0 === t.$el.parents(\".\" + t.params.slideActiveClass).length) return; var g = t.$el,\r\n                            b = g[0].clientWidth,\r\n                            w = g[0].clientHeight,\r\n                            y = a.innerWidth,\r\n                            E = a.innerHeight,\r\n                            x = t.$el.offset();\r\n                        s && (x.left -= t.$el[0].scrollLeft); for (var T = [\r\n                                [x.left, x.top],\r\n                                [x.left + b, x.top],\r\n                                [x.left, x.top + w],\r\n                                [x.left + b, x.top + w]\r\n                            ], S = 0; S < T.length; S += 1) { var C = T[S]; if (C[0] >= 0 && C[0] <= y && C[1] >= 0 && C[1] <= E) { if (0 === C[0] && 0 === C[1]) continue;\r\n                                m = !0 } } if (!m) return } t.isHorizontal() ? ((p || c || u || h) && (n.preventDefault ? n.preventDefault() : n.returnValue = !1), ((c || h) && !s || (p || u) && s) && t.slideNext(), ((p || u) && !s || (c || h) && s) && t.slidePrev()) : ((p || c || v || f) && (n.preventDefault ? n.preventDefault() : n.returnValue = !1), (c || f) && t.slideNext(), (p || v) && t.slidePrev()), t.emit(\"keyPress\", l) } }, enable: function() { var e = this,\r\n                    t = r();\r\n                e.keyboard.enabled || (m(t).on(\"keydown\", e.keyboard.handle), e.keyboard.enabled = !0) }, disable: function() { var e = this,\r\n                    t = r();\r\n                e.keyboard.enabled && (m(t).off(\"keydown\", e.keyboard.handle), e.keyboard.enabled = !1) } },\r\n        U = { name: \"keyboard\", params: { keyboard: { enabled: !1, onlyInViewport: !0, pageUpDown: !0 } }, create: function() { M(this, { keyboard: t({ enabled: !1 }, j) }) }, on: { init: function(e) { e.params.keyboard.enabled && e.keyboard.enable() }, destroy: function(e) { e.keyboard.enabled && e.keyboard.disable() } } }; var K = { lastScrollTime: x(), lastEventBeforeSnap: void 0, recentWheelEvents: [], event: function() { return o().navigator.userAgent.indexOf(\"firefox\") > -1 ? \"DOMMouseScroll\" : function() { var e = r(),\r\n                        t = \"onwheel\",\r\n                        a = t in e; if (!a) { var i = e.createElement(\"div\");\r\n                        i.setAttribute(t, \"return;\"), a = \"function\" == typeof i.onwheel } return !a && e.implementation && e.implementation.hasFeature && !0 !== e.implementation.hasFeature(\"\", \"\") && (a = e.implementation.hasFeature(\"Events.wheel\", \"3.0\")), a }() ? \"wheel\" : \"mousewheel\" }, normalize: function(e) { var t = 0,\r\n                    a = 0,\r\n                    i = 0,\r\n                    s = 0; return \"detail\" in e && (a = e.detail), \"wheelDelta\" in e && (a = -e.wheelDelta / 120), \"wheelDeltaY\" in e && (a = -e.wheelDeltaY / 120), \"wheelDeltaX\" in e && (t = -e.wheelDeltaX / 120), \"axis\" in e && e.axis === e.HORIZONTAL_AXIS && (t = a, a = 0), i = 10 * t, s = 10 * a, \"deltaY\" in e && (s = e.deltaY), \"deltaX\" in e && (i = e.deltaX), e.shiftKey && !i && (i = s, s = 0), (i || s) && e.deltaMode && (1 === e.deltaMode ? (i *= 40, s *= 40) : (i *= 800, s *= 800)), i && !t && (t = i < 1 ? -1 : 1), s && !a && (a = s < 1 ? -1 : 1), { spinX: t, spinY: a, pixelX: i, pixelY: s } }, handleMouseEnter: function() { this.mouseEntered = !0 }, handleMouseLeave: function() { this.mouseEntered = !1 }, handle: function(e) { var t = e,\r\n                    a = this,\r\n                    i = a.params.mousewheel;\r\n                a.params.cssMode && t.preventDefault(); var s = a.$el; if (\"container\" !== a.params.mousewheel.eventsTarget && (s = m(a.params.mousewheel.eventsTarget)), !a.mouseEntered && !s[0].contains(t.target) && !i.releaseOnEdges) return !0;\r\n                t.originalEvent && (t = t.originalEvent); var r = 0,\r\n                    n = a.rtlTranslate ? -1 : 1,\r\n                    o = K.normalize(t); if (i.forceToAxis)\r\n                    if (a.isHorizontal()) { if (!(Math.abs(o.pixelX) > Math.abs(o.pixelY))) return !0;\r\n                        r = -o.pixelX * n } else { if (!(Math.abs(o.pixelY) > Math.abs(o.pixelX))) return !0;\r\n                        r = -o.pixelY } else r = Math.abs(o.pixelX) > Math.abs(o.pixelY) ? -o.pixelX * n : -o.pixelY; if (0 === r) return !0;\r\n                i.invert && (r = -r); var l = a.getTranslate() + r * i.sensitivity; if (l >= a.minTranslate() && (l = a.minTranslate()), l <= a.maxTranslate() && (l = a.maxTranslate()), (!!a.params.loop || !(l === a.minTranslate() || l === a.maxTranslate())) && a.params.nested && t.stopPropagation(), a.params.freeMode) { var d = { time: x(), delta: Math.abs(r), direction: Math.sign(r) },\r\n                        p = a.mousewheel.lastEventBeforeSnap,\r\n                        c = p && d.time < p.time + 500 && d.delta <= p.delta && d.direction === p.direction; if (!c) { a.mousewheel.lastEventBeforeSnap = void 0, a.params.loop && a.loopFix(); var u = a.getTranslate() + r * i.sensitivity,\r\n                            h = a.isBeginning,\r\n                            v = a.isEnd; if (u >= a.minTranslate() && (u = a.minTranslate()), u <= a.maxTranslate() && (u = a.maxTranslate()), a.setTransition(0), a.setTranslate(u), a.updateProgress(), a.updateActiveIndex(), a.updateSlidesClasses(), (!h && a.isBeginning || !v && a.isEnd) && a.updateSlidesClasses(), a.params.freeModeSticky) { clearTimeout(a.mousewheel.timeout), a.mousewheel.timeout = void 0; var f = a.mousewheel.recentWheelEvents;\r\n                            f.length >= 15 && f.shift(); var g = f.length ? f[f.length - 1] : void 0,\r\n                                b = f[0]; if (f.push(d), g && (d.delta > g.delta || d.direction !== g.direction)) f.splice(0);\r\n                            else if (f.length >= 15 && d.time - b.time < 500 && b.delta - d.delta >= 1 && d.delta <= 6) { var w = r > 0 ? .8 : .2;\r\n                                a.mousewheel.lastEventBeforeSnap = d, f.splice(0), a.mousewheel.timeout = E((function() { a.slideToClosest(a.params.speed, !0, void 0, w) }), 0) } a.mousewheel.timeout || (a.mousewheel.timeout = E((function() { a.mousewheel.lastEventBeforeSnap = d, f.splice(0), a.slideToClosest(a.params.speed, !0, void 0, .5) }), 500)) } if (c || a.emit(\"scroll\", t), a.params.autoplay && a.params.autoplayDisableOnInteraction && a.autoplay.stop(), u === a.minTranslate() || u === a.maxTranslate()) return !0 } } else { var y = { time: x(), delta: Math.abs(r), direction: Math.sign(r), raw: e },\r\n                        T = a.mousewheel.recentWheelEvents;\r\n                    T.length >= 2 && T.shift(); var S = T.length ? T[T.length - 1] : void 0; if (T.push(y), S ? (y.direction !== S.direction || y.delta > S.delta || y.time > S.time + 150) && a.mousewheel.animateSlider(y) : a.mousewheel.animateSlider(y), a.mousewheel.releaseScroll(y)) return !0 } return t.preventDefault ? t.preventDefault() : t.returnValue = !1, !1 }, animateSlider: function(e) { var t = this,\r\n                    a = o(); return !(this.params.mousewheel.thresholdDelta && e.delta < this.params.mousewheel.thresholdDelta) && (!(this.params.mousewheel.thresholdTime && x() - t.mousewheel.lastScrollTime < this.params.mousewheel.thresholdTime) && (e.delta >= 6 && x() - t.mousewheel.lastScrollTime < 60 || (e.direction < 0 ? t.isEnd && !t.params.loop || t.animating || (t.slideNext(), t.emit(\"scroll\", e.raw)) : t.isBeginning && !t.params.loop || t.animating || (t.slidePrev(), t.emit(\"scroll\", e.raw)), t.mousewheel.lastScrollTime = (new a.Date).getTime(), !1))) }, releaseScroll: function(e) { var t = this,\r\n                    a = t.params.mousewheel; if (e.direction < 0) { if (t.isEnd && !t.params.loop && a.releaseOnEdges) return !0 } else if (t.isBeginning && !t.params.loop && a.releaseOnEdges) return !0; return !1 }, enable: function() { var e = this,\r\n                    t = K.event(); if (e.params.cssMode) return e.wrapperEl.removeEventListener(t, e.mousewheel.handle), !0; if (!t) return !1; if (e.mousewheel.enabled) return !1; var a = e.$el; return \"container\" !== e.params.mousewheel.eventsTarget && (a = m(e.params.mousewheel.eventsTarget)), a.on(\"mouseenter\", e.mousewheel.handleMouseEnter), a.on(\"mouseleave\", e.mousewheel.handleMouseLeave), a.on(t, e.mousewheel.handle), e.mousewheel.enabled = !0, !0 }, disable: function() { var e = this,\r\n                    t = K.event(); if (e.params.cssMode) return e.wrapperEl.addEventListener(t, e.mousewheel.handle), !0; if (!t) return !1; if (!e.mousewheel.enabled) return !1; var a = e.$el; return \"container\" !== e.params.mousewheel.eventsTarget && (a = m(e.params.mousewheel.eventsTarget)), a.off(t, e.mousewheel.handle), e.mousewheel.enabled = !1, !0 } },\r\n        Z = { toggleEl: function(e, t) { e[t ? \"addClass\" : \"removeClass\"](this.params.navigation.disabledClass), e[0] && \"BUTTON\" === e[0].tagName && (e[0].disabled = t) }, update: function() { var e = this,\r\n                    t = e.params.navigation,\r\n                    a = e.navigation.toggleEl; if (!e.params.loop) { var i = e.navigation,\r\n                        s = i.$nextEl,\r\n                        r = i.$prevEl;\r\n                    r && r.length > 0 && (e.isBeginning ? a(r, !0) : a(r, !1), r[e.params.watchOverflow && e.isLocked ? \"addClass\" : \"removeClass\"](t.lockClass)), s && s.length > 0 && (e.isEnd ? a(s, !0) : a(s, !1), s[e.params.watchOverflow && e.isLocked ? \"addClass\" : \"removeClass\"](t.lockClass)) } }, onPrevClick: function(e) { var t = this;\r\n                e.preventDefault(), t.isBeginning && !t.params.loop || t.slidePrev() }, onNextClick: function(e) { var t = this;\r\n                e.preventDefault(), t.isEnd && !t.params.loop || t.slideNext() }, init: function() { var e, t, a = this,\r\n                    i = a.params.navigation;\r\n                (i.nextEl || i.prevEl) && (i.nextEl && (e = m(i.nextEl), a.params.uniqueNavElements && \"string\" == typeof i.nextEl && e.length > 1 && 1 === a.$el.find(i.nextEl).length && (e = a.$el.find(i.nextEl))), i.prevEl && (t = m(i.prevEl), a.params.uniqueNavElements && \"string\" == typeof i.prevEl && t.length > 1 && 1 === a.$el.find(i.prevEl).length && (t = a.$el.find(i.prevEl))), e && e.length > 0 && e.on(\"click\", a.navigation.onNextClick), t && t.length > 0 && t.on(\"click\", a.navigation.onPrevClick), C(a.navigation, { $nextEl: e, nextEl: e && e[0], $prevEl: t, prevEl: t && t[0] })) }, destroy: function() { var e = this,\r\n                    t = e.navigation,\r\n                    a = t.$nextEl,\r\n                    i = t.$prevEl;\r\n                a && a.length && (a.off(\"click\", e.navigation.onNextClick), a.removeClass(e.params.navigation.disabledClass)), i && i.length && (i.off(\"click\", e.navigation.onPrevClick), i.removeClass(e.params.navigation.disabledClass)) } },\r\n        J = { update: function() { var e = this,\r\n                    t = e.rtl,\r\n                    a = e.params.pagination; if (a.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) { var i, s = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,\r\n                        r = e.pagination.$el,\r\n                        n = e.params.loop ? Math.ceil((s - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length; if (e.params.loop ? ((i = Math.ceil((e.activeIndex - e.loopedSlides) / e.params.slidesPerGroup)) > s - 1 - 2 * e.loopedSlides && (i -= s - 2 * e.loopedSlides), i > n - 1 && (i -= n), i < 0 && \"bullets\" !== e.params.paginationType && (i = n + i)) : i = void 0 !== e.snapIndex ? e.snapIndex : e.activeIndex || 0, \"bullets\" === a.type && e.pagination.bullets && e.pagination.bullets.length > 0) { var o, l, d, p = e.pagination.bullets; if (a.dynamicBullets && (e.pagination.bulletSize = p.eq(0)[e.isHorizontal() ? \"outerWidth\" : \"outerHeight\"](!0), r.css(e.isHorizontal() ? \"width\" : \"height\", e.pagination.bulletSize * (a.dynamicMainBullets + 4) + \"px\"), a.dynamicMainBullets > 1 && void 0 !== e.previousIndex && (e.pagination.dynamicBulletIndex += i - e.previousIndex, e.pagination.dynamicBulletIndex > a.dynamicMainBullets - 1 ? e.pagination.dynamicBulletIndex = a.dynamicMainBullets - 1 : e.pagination.dynamicBulletIndex < 0 && (e.pagination.dynamicBulletIndex = 0)), o = i - e.pagination.dynamicBulletIndex, d = ((l = o + (Math.min(p.length, a.dynamicMainBullets) - 1)) + o) / 2), p.removeClass(a.bulletActiveClass + \" \" + a.bulletActiveClass + \"-next \" + a.bulletActiveClass + \"-next-next \" + a.bulletActiveClass + \"-prev \" + a.bulletActiveClass + \"-prev-prev \" + a.bulletActiveClass + \"-main\"), r.length > 1) p.each((function(e) { var t = m(e),\r\n                                s = t.index();\r\n                            s === i && t.addClass(a.bulletActiveClass), a.dynamicBullets && (s >= o && s <= l && t.addClass(a.bulletActiveClass + \"-main\"), s === o && t.prev().addClass(a.bulletActiveClass + \"-prev\").prev().addClass(a.bulletActiveClass + \"-prev-prev\"), s === l && t.next().addClass(a.bulletActiveClass + \"-next\").next().addClass(a.bulletActiveClass + \"-next-next\")) }));\r\n                        else { var c = p.eq(i),\r\n                                u = c.index(); if (c.addClass(a.bulletActiveClass), a.dynamicBullets) { for (var h = p.eq(o), v = p.eq(l), f = o; f <= l; f += 1) p.eq(f).addClass(a.bulletActiveClass + \"-main\"); if (e.params.loop)\r\n                                    if (u >= p.length - a.dynamicMainBullets) { for (var g = a.dynamicMainBullets; g >= 0; g -= 1) p.eq(p.length - g).addClass(a.bulletActiveClass + \"-main\");\r\n                                        p.eq(p.length - a.dynamicMainBullets - 1).addClass(a.bulletActiveClass + \"-prev\") } else h.prev().addClass(a.bulletActiveClass + \"-prev\").prev().addClass(a.bulletActiveClass + \"-prev-prev\"), v.next().addClass(a.bulletActiveClass + \"-next\").next().addClass(a.bulletActiveClass + \"-next-next\");\r\n                                else h.prev().addClass(a.bulletActiveClass + \"-prev\").prev().addClass(a.bulletActiveClass + \"-prev-prev\"), v.next().addClass(a.bulletActiveClass + \"-next\").next().addClass(a.bulletActiveClass + \"-next-next\") } } if (a.dynamicBullets) { var b = Math.min(p.length, a.dynamicMainBullets + 4),\r\n                                w = (e.pagination.bulletSize * b - e.pagination.bulletSize) / 2 - d * e.pagination.bulletSize,\r\n                                y = t ? \"right\" : \"left\";\r\n                            p.css(e.isHorizontal() ? y : \"top\", w + \"px\") } } if (\"fraction\" === a.type && (r.find(z(a.currentClass)).text(a.formatFractionCurrent(i + 1)), r.find(z(a.totalClass)).text(a.formatFractionTotal(n))), \"progressbar\" === a.type) { var E;\r\n                        E = a.progressbarOpposite ? e.isHorizontal() ? \"vertical\" : \"horizontal\" : e.isHorizontal() ? \"horizontal\" : \"vertical\"; var x = (i + 1) / n,\r\n                            T = 1,\r\n                            S = 1; \"horizontal\" === E ? T = x : S = x, r.find(z(a.progressbarFillClass)).transform(\"translate3d(0,0,0) scaleX(\" + T + \") scaleY(\" + S + \")\").transition(e.params.speed) } \"custom\" === a.type && a.renderCustom ? (r.html(a.renderCustom(e, i + 1, n)), e.emit(\"paginationRender\", r[0])) : e.emit(\"paginationUpdate\", r[0]), r[e.params.watchOverflow && e.isLocked ? \"addClass\" : \"removeClass\"](a.lockClass) } }, render: function() { var e = this,\r\n                    t = e.params.pagination; if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) { var a = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,\r\n                        i = e.pagination.$el,\r\n                        s = \"\"; if (\"bullets\" === t.type) { var r = e.params.loop ? Math.ceil((a - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length;\r\n                        e.params.freeMode && !e.params.loop && r > a && (r = a); for (var n = 0; n < r; n += 1) t.renderBullet ? s += t.renderBullet.call(e, n, t.bulletClass) : s += \"<\" + t.bulletElement + ' class=\"' + t.bulletClass + '\"></' + t.bulletElement + \">\";\r\n                        i.html(s), e.pagination.bullets = i.find(z(t.bulletClass)) } \"fraction\" === t.type && (s = t.renderFraction ? t.renderFraction.call(e, t.currentClass, t.totalClass) : '<span class=\"' + t.currentClass + '\"></span> / <span class=\"' + t.totalClass + '\"></span>', i.html(s)), \"progressbar\" === t.type && (s = t.renderProgressbar ? t.renderProgressbar.call(e, t.progressbarFillClass) : '<span class=\"' + t.progressbarFillClass + '\"></span>', i.html(s)), \"custom\" !== t.type && e.emit(\"paginationRender\", e.pagination.$el[0]) } }, init: function() { var e = this,\r\n                    t = e.params.pagination; if (t.el) { var a = m(t.el);\r\n                    0 !== a.length && (e.params.uniqueNavElements && \"string\" == typeof t.el && a.length > 1 && (a = e.$el.find(t.el)), \"bullets\" === t.type && t.clickable && a.addClass(t.clickableClass), a.addClass(t.modifierClass + t.type), \"bullets\" === t.type && t.dynamicBullets && (a.addClass(\"\" + t.modifierClass + t.type + \"-dynamic\"), e.pagination.dynamicBulletIndex = 0, t.dynamicMainBullets < 1 && (t.dynamicMainBullets = 1)), \"progressbar\" === t.type && t.progressbarOpposite && a.addClass(t.progressbarOppositeClass), t.clickable && a.on(\"click\", z(t.bulletClass), (function(t) { t.preventDefault(); var a = m(this).index() * e.params.slidesPerGroup;\r\n                        e.params.loop && (a += e.loopedSlides), e.slideTo(a) })), C(e.pagination, { $el: a, el: a[0] })) } }, destroy: function() { var e = this,\r\n                    t = e.params.pagination; if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) { var a = e.pagination.$el;\r\n                    a.removeClass(t.hiddenClass), a.removeClass(t.modifierClass + t.type), e.pagination.bullets && e.pagination.bullets.removeClass(t.bulletActiveClass), t.clickable && a.off(\"click\", z(t.bulletClass)) } } },\r\n        Q = { setTranslate: function() { var e = this; if (e.params.scrollbar.el && e.scrollbar.el) { var t = e.scrollbar,\r\n                        a = e.rtlTranslate,\r\n                        i = e.progress,\r\n                        s = t.dragSize,\r\n                        r = t.trackSize,\r\n                        n = t.$dragEl,\r\n                        o = t.$el,\r\n                        l = e.params.scrollbar,\r\n                        d = s,\r\n                        p = (r - s) * i;\r\n                    a ? (p = -p) > 0 ? (d = s - p, p = 0) : -p + s > r && (d = r + p) : p < 0 ? (d = s + p, p = 0) : p + s > r && (d = r - p), e.isHorizontal() ? (n.transform(\"translate3d(\" + p + \"px, 0, 0)\"), n[0].style.width = d + \"px\") : (n.transform(\"translate3d(0px, \" + p + \"px, 0)\"), n[0].style.height = d + \"px\"), l.hide && (clearTimeout(e.scrollbar.timeout), o[0].style.opacity = 1, e.scrollbar.timeout = setTimeout((function() { o[0].style.opacity = 0, o.transition(400) }), 1e3)) } }, setTransition: function(e) { var t = this;\r\n                t.params.scrollbar.el && t.scrollbar.el && t.scrollbar.$dragEl.transition(e) }, updateSize: function() { var e = this; if (e.params.scrollbar.el && e.scrollbar.el) { var t = e.scrollbar,\r\n                        a = t.$dragEl,\r\n                        i = t.$el;\r\n                    a[0].style.width = \"\", a[0].style.height = \"\"; var s, r = e.isHorizontal() ? i[0].offsetWidth : i[0].offsetHeight,\r\n                        n = e.size / e.virtualSize,\r\n                        o = n * (r / e.size);\r\n                    s = \"auto\" === e.params.scrollbar.dragSize ? r * n : parseInt(e.params.scrollbar.dragSize, 10), e.isHorizontal() ? a[0].style.width = s + \"px\" : a[0].style.height = s + \"px\", i[0].style.display = n >= 1 ? \"none\" : \"\", e.params.scrollbar.hide && (i[0].style.opacity = 0), C(t, { trackSize: r, divider: n, moveDivider: o, dragSize: s }), t.$el[e.params.watchOverflow && e.isLocked ? \"addClass\" : \"removeClass\"](e.params.scrollbar.lockClass) } }, getPointerPosition: function(e) { return this.isHorizontal() ? \"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0].clientX : e.clientX : \"touchstart\" === e.type || \"touchmove\" === e.type ? e.targetTouches[0].clientY : e.clientY }, setDragPosition: function(e) { var t, a = this,\r\n                    i = a.scrollbar,\r\n                    s = a.rtlTranslate,\r\n                    r = i.$el,\r\n                    n = i.dragSize,\r\n                    o = i.trackSize,\r\n                    l = i.dragStartPos;\r\n                t = (i.getPointerPosition(e) - r.offset()[a.isHorizontal() ? \"left\" : \"top\"] - (null !== l ? l : n / 2)) / (o - n), t = Math.max(Math.min(t, 1), 0), s && (t = 1 - t); var d = a.minTranslate() + (a.maxTranslate() - a.minTranslate()) * t;\r\n                a.updateProgress(d), a.setTranslate(d), a.updateActiveIndex(), a.updateSlidesClasses() }, onDragStart: function(e) { var t = this,\r\n                    a = t.params.scrollbar,\r\n                    i = t.scrollbar,\r\n                    s = t.$wrapperEl,\r\n                    r = i.$el,\r\n                    n = i.$dragEl;\r\n                t.scrollbar.isTouched = !0, t.scrollbar.dragStartPos = e.target === n[0] || e.target === n ? i.getPointerPosition(e) - e.target.getBoundingClientRect()[t.isHorizontal() ? \"left\" : \"top\"] : null, e.preventDefault(), e.stopPropagation(), s.transition(100), n.transition(100), i.setDragPosition(e), clearTimeout(t.scrollbar.dragTimeout), r.transition(0), a.hide && r.css(\"opacity\", 1), t.params.cssMode && t.$wrapperEl.css(\"scroll-snap-type\", \"none\"), t.emit(\"scrollbarDragStart\", e) }, onDragMove: function(e) { var t = this,\r\n                    a = t.scrollbar,\r\n                    i = t.$wrapperEl,\r\n                    s = a.$el,\r\n                    r = a.$dragEl;\r\n                t.scrollbar.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, a.setDragPosition(e), i.transition(0), s.transition(0), r.transition(0), t.emit(\"scrollbarDragMove\", e)) }, onDragEnd: function(e) { var t = this,\r\n                    a = t.params.scrollbar,\r\n                    i = t.scrollbar,\r\n                    s = t.$wrapperEl,\r\n                    r = i.$el;\r\n                t.scrollbar.isTouched && (t.scrollbar.isTouched = !1, t.params.cssMode && (t.$wrapperEl.css(\"scroll-snap-type\", \"\"), s.transition(\"\")), a.hide && (clearTimeout(t.scrollbar.dragTimeout), t.scrollbar.dragTimeout = E((function() { r.css(\"opacity\", 0), r.transition(400) }), 1e3)), t.emit(\"scrollbarDragEnd\", e), a.snapOnRelease && t.slideToClosest()) }, enableDraggable: function() { var e = this; if (e.params.scrollbar.el) { var t = r(),\r\n                        a = e.scrollbar,\r\n                        i = e.touchEventsTouch,\r\n                        s = e.touchEventsDesktop,\r\n                        n = e.params,\r\n                        o = e.support,\r\n                        l = a.$el[0],\r\n                        d = !(!o.passiveListener || !n.passiveListeners) && { passive: !1, capture: !1 },\r\n                        p = !(!o.passiveListener || !n.passiveListeners) && { passive: !0, capture: !1 };\r\n                    l && (o.touch ? (l.addEventListener(i.start, e.scrollbar.onDragStart, d), l.addEventListener(i.move, e.scrollbar.onDragMove, d), l.addEventListener(i.end, e.scrollbar.onDragEnd, p)) : (l.addEventListener(s.start, e.scrollbar.onDragStart, d), t.addEventListener(s.move, e.scrollbar.onDragMove, d), t.addEventListener(s.end, e.scrollbar.onDragEnd, p))) } }, disableDraggable: function() { var e = this; if (e.params.scrollbar.el) { var t = r(),\r\n                        a = e.scrollbar,\r\n                        i = e.touchEventsTouch,\r\n                        s = e.touchEventsDesktop,\r\n                        n = e.params,\r\n                        o = e.support,\r\n                        l = a.$el[0],\r\n                        d = !(!o.passiveListener || !n.passiveListeners) && { passive: !1, capture: !1 },\r\n                        p = !(!o.passiveListener || !n.passiveListeners) && { passive: !0, capture: !1 };\r\n                    l && (o.touch ? (l.removeEventListener(i.start, e.scrollbar.onDragStart, d), l.removeEventListener(i.move, e.scrollbar.onDragMove, d), l.removeEventListener(i.end, e.scrollbar.onDragEnd, p)) : (l.removeEventListener(s.start, e.scrollbar.onDragStart, d), t.removeEventListener(s.move, e.scrollbar.onDragMove, d), t.removeEventListener(s.end, e.scrollbar.onDragEnd, p))) } }, init: function() { var e = this; if (e.params.scrollbar.el) { var t = e.scrollbar,\r\n                        a = e.$el,\r\n                        i = e.params.scrollbar,\r\n                        s = m(i.el);\r\n                    e.params.uniqueNavElements && \"string\" == typeof i.el && s.length > 1 && 1 === a.find(i.el).length && (s = a.find(i.el)); var r = s.find(\".\" + e.params.scrollbar.dragClass);\r\n                    0 === r.length && (r = m('<div class=\"' + e.params.scrollbar.dragClass + '\"></div>'), s.append(r)), C(t, { $el: s, el: s[0], $dragEl: r, dragEl: r[0] }), i.draggable && t.enableDraggable() } }, destroy: function() { this.scrollbar.disableDraggable() } },\r\n        ee = { setTransform: function(e, t) { var a = this.rtl,\r\n                    i = m(e),\r\n                    s = a ? -1 : 1,\r\n                    r = i.attr(\"data-swiper-parallax\") || \"0\",\r\n                    n = i.attr(\"data-swiper-parallax-x\"),\r\n                    o = i.attr(\"data-swiper-parallax-y\"),\r\n                    l = i.attr(\"data-swiper-parallax-scale\"),\r\n                    d = i.attr(\"data-swiper-parallax-opacity\"); if (n || o ? (n = n || \"0\", o = o || \"0\") : this.isHorizontal() ? (n = r, o = \"0\") : (o = r, n = \"0\"), n = n.indexOf(\"%\") >= 0 ? parseInt(n, 10) * t * s + \"%\" : n * t * s + \"px\", o = o.indexOf(\"%\") >= 0 ? parseInt(o, 10) * t + \"%\" : o * t + \"px\", null != d) { var p = d - (d - 1) * (1 - Math.abs(t));\r\n                    i[0].style.opacity = p } if (null == l) i.transform(\"translate3d(\" + n + \", \" + o + \", 0px)\");\r\n                else { var c = l - (l - 1) * (1 - Math.abs(t));\r\n                    i.transform(\"translate3d(\" + n + \", \" + o + \", 0px) scale(\" + c + \")\") } }, setTranslate: function() { var e = this,\r\n                    t = e.$el,\r\n                    a = e.slides,\r\n                    i = e.progress,\r\n                    s = e.snapGrid;\r\n                t.children(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t) { e.parallax.setTransform(t, i) })), a.each((function(t, a) { var r = t.progress;\r\n                    e.params.slidesPerGroup > 1 && \"auto\" !== e.params.slidesPerView && (r += Math.ceil(a / 2) - i * (s.length - 1)), r = Math.min(Math.max(r, -1), 1), m(t).find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t) { e.parallax.setTransform(t, r) })) })) }, setTransition: function(e) { void 0 === e && (e = this.params.speed);\r\n                this.$el.find(\"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\").each((function(t) { var a = m(t),\r\n                        i = parseInt(a.attr(\"data-swiper-parallax-duration\"), 10) || e;\r\n                    0 === e && (i = 0), a.transition(i) })) } },\r\n        te = { getDistanceBetweenTouches: function(e) { if (e.targetTouches.length < 2) return 1; var t = e.targetTouches[0].pageX,\r\n                    a = e.targetTouches[0].pageY,\r\n                    i = e.targetTouches[1].pageX,\r\n                    s = e.targetTouches[1].pageY; return Math.sqrt(Math.pow(i - t, 2) + Math.pow(s - a, 2)) }, onGestureStart: function(e) { var t = this,\r\n                    a = t.support,\r\n                    i = t.params.zoom,\r\n                    s = t.zoom,\r\n                    r = s.gesture; if (s.fakeGestureTouched = !1, s.fakeGestureMoved = !1, !a.gestures) { if (\"touchstart\" !== e.type || \"touchstart\" === e.type && e.targetTouches.length < 2) return;\r\n                    s.fakeGestureTouched = !0, r.scaleStart = te.getDistanceBetweenTouches(e) } r.$slideEl && r.$slideEl.length || (r.$slideEl = m(e.target).closest(\".\" + t.params.slideClass), 0 === r.$slideEl.length && (r.$slideEl = t.slides.eq(t.activeIndex)), r.$imageEl = r.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"), r.$imageWrapEl = r.$imageEl.parent(\".\" + i.containerClass), r.maxRatio = r.$imageWrapEl.attr(\"data-swiper-zoom\") || i.maxRatio, 0 !== r.$imageWrapEl.length) ? (r.$imageEl && r.$imageEl.transition(0), t.zoom.isScaling = !0) : r.$imageEl = void 0 }, onGestureChange: function(e) { var t = this,\r\n                    a = t.support,\r\n                    i = t.params.zoom,\r\n                    s = t.zoom,\r\n                    r = s.gesture; if (!a.gestures) { if (\"touchmove\" !== e.type || \"touchmove\" === e.type && e.targetTouches.length < 2) return;\r\n                    s.fakeGestureMoved = !0, r.scaleMove = te.getDistanceBetweenTouches(e) } r.$imageEl && 0 !== r.$imageEl.length ? (a.gestures ? s.scale = e.scale * s.currentScale : s.scale = r.scaleMove / r.scaleStart * s.currentScale, s.scale > r.maxRatio && (s.scale = r.maxRatio - 1 + Math.pow(s.scale - r.maxRatio + 1, .5)), s.scale < i.minRatio && (s.scale = i.minRatio + 1 - Math.pow(i.minRatio - s.scale + 1, .5)), r.$imageEl.transform(\"translate3d(0,0,0) scale(\" + s.scale + \")\")) : \"gesturechange\" === e.type && s.onGestureStart(e) }, onGestureEnd: function(e) { var t = this,\r\n                    a = t.device,\r\n                    i = t.support,\r\n                    s = t.params.zoom,\r\n                    r = t.zoom,\r\n                    n = r.gesture; if (!i.gestures) { if (!r.fakeGestureTouched || !r.fakeGestureMoved) return; if (\"touchend\" !== e.type || \"touchend\" === e.type && e.changedTouches.length < 2 && !a.android) return;\r\n                    r.fakeGestureTouched = !1, r.fakeGestureMoved = !1 } n.$imageEl && 0 !== n.$imageEl.length && (r.scale = Math.max(Math.min(r.scale, n.maxRatio), s.minRatio), n.$imageEl.transition(t.params.speed).transform(\"translate3d(0,0,0) scale(\" + r.scale + \")\"), r.currentScale = r.scale, r.isScaling = !1, 1 === r.scale && (n.$slideEl = void 0)) }, onTouchStart: function(e) { var t = this.device,\r\n                    a = this.zoom,\r\n                    i = a.gesture,\r\n                    s = a.image;\r\n                i.$imageEl && 0 !== i.$imageEl.length && (s.isTouched || (t.android && e.cancelable && e.preventDefault(), s.isTouched = !0, s.touchesStart.x = \"touchstart\" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesStart.y = \"touchstart\" === e.type ? e.targetTouches[0].pageY : e.pageY)) }, onTouchMove: function(e) { var t = this,\r\n                    a = t.zoom,\r\n                    i = a.gesture,\r\n                    s = a.image,\r\n                    r = a.velocity; if (i.$imageEl && 0 !== i.$imageEl.length && (t.allowClick = !1, s.isTouched && i.$slideEl)) { s.isMoved || (s.width = i.$imageEl[0].offsetWidth, s.height = i.$imageEl[0].offsetHeight, s.startX = T(i.$imageWrapEl[0], \"x\") || 0, s.startY = T(i.$imageWrapEl[0], \"y\") || 0, i.slideWidth = i.$slideEl[0].offsetWidth, i.slideHeight = i.$slideEl[0].offsetHeight, i.$imageWrapEl.transition(0), t.rtl && (s.startX = -s.startX, s.startY = -s.startY)); var n = s.width * a.scale,\r\n                        o = s.height * a.scale; if (!(n < i.slideWidth && o < i.slideHeight)) { if (s.minX = Math.min(i.slideWidth / 2 - n / 2, 0), s.maxX = -s.minX, s.minY = Math.min(i.slideHeight / 2 - o / 2, 0), s.maxY = -s.minY, s.touchesCurrent.x = \"touchmove\" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesCurrent.y = \"touchmove\" === e.type ? e.targetTouches[0].pageY : e.pageY, !s.isMoved && !a.isScaling) { if (t.isHorizontal() && (Math.floor(s.minX) === Math.floor(s.startX) && s.touchesCurrent.x < s.touchesStart.x || Math.floor(s.maxX) === Math.floor(s.startX) && s.touchesCurrent.x > s.touchesStart.x)) return void(s.isTouched = !1); if (!t.isHorizontal() && (Math.floor(s.minY) === Math.floor(s.startY) && s.touchesCurrent.y < s.touchesStart.y || Math.floor(s.maxY) === Math.floor(s.startY) && s.touchesCurrent.y > s.touchesStart.y)) return void(s.isTouched = !1) } e.cancelable && e.preventDefault(), e.stopPropagation(), s.isMoved = !0, s.currentX = s.touchesCurrent.x - s.touchesStart.x + s.startX, s.currentY = s.touchesCurrent.y - s.touchesStart.y + s.startY, s.currentX < s.minX && (s.currentX = s.minX + 1 - Math.pow(s.minX - s.currentX + 1, .8)), s.currentX > s.maxX && (s.currentX = s.maxX - 1 + Math.pow(s.currentX - s.maxX + 1, .8)), s.currentY < s.minY && (s.currentY = s.minY + 1 - Math.pow(s.minY - s.currentY + 1, .8)), s.currentY > s.maxY && (s.currentY = s.maxY - 1 + Math.pow(s.currentY - s.maxY + 1, .8)), r.prevPositionX || (r.prevPositionX = s.touchesCurrent.x), r.prevPositionY || (r.prevPositionY = s.touchesCurrent.y), r.prevTime || (r.prevTime = Date.now()), r.x = (s.touchesCurrent.x - r.prevPositionX) / (Date.now() - r.prevTime) / 2, r.y = (s.touchesCurrent.y - r.prevPositionY) / (Date.now() - r.prevTime) / 2, Math.abs(s.touchesCurrent.x - r.prevPositionX) < 2 && (r.x = 0), Math.abs(s.touchesCurrent.y - r.prevPositionY) < 2 && (r.y = 0), r.prevPositionX = s.touchesCurrent.x, r.prevPositionY = s.touchesCurrent.y, r.prevTime = Date.now(), i.$imageWrapEl.transform(\"translate3d(\" + s.currentX + \"px, \" + s.currentY + \"px,0)\") } } }, onTouchEnd: function() { var e = this.zoom,\r\n                    t = e.gesture,\r\n                    a = e.image,\r\n                    i = e.velocity; if (t.$imageEl && 0 !== t.$imageEl.length) { if (!a.isTouched || !a.isMoved) return a.isTouched = !1, void(a.isMoved = !1);\r\n                    a.isTouched = !1, a.isMoved = !1; var s = 300,\r\n                        r = 300,\r\n                        n = i.x * s,\r\n                        o = a.currentX + n,\r\n                        l = i.y * r,\r\n                        d = a.currentY + l;\r\n                    0 !== i.x && (s = Math.abs((o - a.currentX) / i.x)), 0 !== i.y && (r = Math.abs((d - a.currentY) / i.y)); var p = Math.max(s, r);\r\n                    a.currentX = o, a.currentY = d; var c = a.width * e.scale,\r\n                        u = a.height * e.scale;\r\n                    a.minX = Math.min(t.slideWidth / 2 - c / 2, 0), a.maxX = -a.minX, a.minY = Math.min(t.slideHeight / 2 - u / 2, 0), a.maxY = -a.minY, a.currentX = Math.max(Math.min(a.currentX, a.maxX), a.minX), a.currentY = Math.max(Math.min(a.currentY, a.maxY), a.minY), t.$imageWrapEl.transition(p).transform(\"translate3d(\" + a.currentX + \"px, \" + a.currentY + \"px,0)\") } }, onTransitionEnd: function() { var e = this,\r\n                    t = e.zoom,\r\n                    a = t.gesture;\r\n                a.$slideEl && e.previousIndex !== e.activeIndex && (a.$imageEl && a.$imageEl.transform(\"translate3d(0,0,0) scale(1)\"), a.$imageWrapEl && a.$imageWrapEl.transform(\"translate3d(0,0,0)\"), t.scale = 1, t.currentScale = 1, a.$slideEl = void 0, a.$imageEl = void 0, a.$imageWrapEl = void 0) }, toggle: function(e) { var t = this.zoom;\r\n                t.scale && 1 !== t.scale ? t.out() : t.in(e) }, in: function(e) { var t, a, i, s, r, n, l, d, p, c, u, h, v, f, m, g, b = this,\r\n                    w = o(),\r\n                    y = b.zoom,\r\n                    E = b.params.zoom,\r\n                    x = y.gesture,\r\n                    T = y.image;\r\n                (x.$slideEl || (b.params.virtual && b.params.virtual.enabled && b.virtual ? x.$slideEl = b.$wrapperEl.children(\".\" + b.params.slideActiveClass) : x.$slideEl = b.slides.eq(b.activeIndex), x.$imageEl = x.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"), x.$imageWrapEl = x.$imageEl.parent(\".\" + E.containerClass)), x.$imageEl && 0 !== x.$imageEl.length) && (x.$slideEl.addClass(\"\" + E.zoomedSlideClass), void 0 === T.touchesStart.x && e ? (t = \"touchend\" === e.type ? e.changedTouches[0].pageX : e.pageX, a = \"touchend\" === e.type ? e.changedTouches[0].pageY : e.pageY) : (t = T.touchesStart.x, a = T.touchesStart.y), y.scale = x.$imageWrapEl.attr(\"data-swiper-zoom\") || E.maxRatio, y.currentScale = x.$imageWrapEl.attr(\"data-swiper-zoom\") || E.maxRatio, e ? (m = x.$slideEl[0].offsetWidth, g = x.$slideEl[0].offsetHeight, i = x.$slideEl.offset().left + w.scrollX + m / 2 - t, s = x.$slideEl.offset().top + w.scrollY + g / 2 - a, l = x.$imageEl[0].offsetWidth, d = x.$imageEl[0].offsetHeight, p = l * y.scale, c = d * y.scale, v = -(u = Math.min(m / 2 - p / 2, 0)), f = -(h = Math.min(g / 2 - c / 2, 0)), (r = i * y.scale) < u && (r = u), r > v && (r = v), (n = s * y.scale) < h && (n = h), n > f && (n = f)) : (r = 0, n = 0), x.$imageWrapEl.transition(300).transform(\"translate3d(\" + r + \"px, \" + n + \"px,0)\"), x.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(\" + y.scale + \")\")) }, out: function() { var e = this,\r\n                    t = e.zoom,\r\n                    a = e.params.zoom,\r\n                    i = t.gesture;\r\n                i.$slideEl || (e.params.virtual && e.params.virtual.enabled && e.virtual ? i.$slideEl = e.$wrapperEl.children(\".\" + e.params.slideActiveClass) : i.$slideEl = e.slides.eq(e.activeIndex), i.$imageEl = i.$slideEl.find(\"img, svg, canvas, picture, .swiper-zoom-target\"), i.$imageWrapEl = i.$imageEl.parent(\".\" + a.containerClass)), i.$imageEl && 0 !== i.$imageEl.length && (t.scale = 1, t.currentScale = 1, i.$imageWrapEl.transition(300).transform(\"translate3d(0,0,0)\"), i.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(1)\"), i.$slideEl.removeClass(\"\" + a.zoomedSlideClass), i.$slideEl = void 0) }, toggleGestures: function(e) { var t = this,\r\n                    a = t.zoom,\r\n                    i = a.slideSelector,\r\n                    s = a.passiveListener;\r\n                t.$wrapperEl[e](\"gesturestart\", i, a.onGestureStart, s), t.$wrapperEl[e](\"gesturechange\", i, a.onGestureChange, s), t.$wrapperEl[e](\"gestureend\", i, a.onGestureEnd, s) }, enableGestures: function() { this.zoom.gesturesEnabled || (this.zoom.gesturesEnabled = !0, this.zoom.toggleGestures(\"on\")) }, disableGestures: function() { this.zoom.gesturesEnabled && (this.zoom.gesturesEnabled = !1, this.zoom.toggleGestures(\"off\")) }, enable: function() { var e = this,\r\n                    t = e.support,\r\n                    a = e.zoom; if (!a.enabled) { a.enabled = !0; var i = !(\"touchstart\" !== e.touchEvents.start || !t.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 },\r\n                        s = !t.passiveListener || { passive: !1, capture: !0 },\r\n                        r = \".\" + e.params.slideClass;\r\n                    e.zoom.passiveListener = i, e.zoom.slideSelector = r, t.gestures ? (e.$wrapperEl.on(e.touchEvents.start, e.zoom.enableGestures, i), e.$wrapperEl.on(e.touchEvents.end, e.zoom.disableGestures, i)) : \"touchstart\" === e.touchEvents.start && (e.$wrapperEl.on(e.touchEvents.start, r, a.onGestureStart, i), e.$wrapperEl.on(e.touchEvents.move, r, a.onGestureChange, s), e.$wrapperEl.on(e.touchEvents.end, r, a.onGestureEnd, i), e.touchEvents.cancel && e.$wrapperEl.on(e.touchEvents.cancel, r, a.onGestureEnd, i)), e.$wrapperEl.on(e.touchEvents.move, \".\" + e.params.zoom.containerClass, a.onTouchMove, s) } }, disable: function() { var e = this,\r\n                    t = e.zoom; if (t.enabled) { var a = e.support;\r\n                    e.zoom.enabled = !1; var i = !(\"touchstart\" !== e.touchEvents.start || !a.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 },\r\n                        s = !a.passiveListener || { passive: !1, capture: !0 },\r\n                        r = \".\" + e.params.slideClass;\r\n                    a.gestures ? (e.$wrapperEl.off(e.touchEvents.start, e.zoom.enableGestures, i), e.$wrapperEl.off(e.touchEvents.end, e.zoom.disableGestures, i)) : \"touchstart\" === e.touchEvents.start && (e.$wrapperEl.off(e.touchEvents.start, r, t.onGestureStart, i), e.$wrapperEl.off(e.touchEvents.move, r, t.onGestureChange, s), e.$wrapperEl.off(e.touchEvents.end, r, t.onGestureEnd, i), e.touchEvents.cancel && e.$wrapperEl.off(e.touchEvents.cancel, r, t.onGestureEnd, i)), e.$wrapperEl.off(e.touchEvents.move, \".\" + e.params.zoom.containerClass, t.onTouchMove, s) } } },\r\n        ae = { loadInSlide: function(e, t) { void 0 === t && (t = !0); var a = this,\r\n                    i = a.params.lazy; if (void 0 !== e && 0 !== a.slides.length) { var s = a.virtual && a.params.virtual.enabled ? a.$wrapperEl.children(\".\" + a.params.slideClass + '[data-swiper-slide-index=\"' + e + '\"]') : a.slides.eq(e),\r\n                        r = s.find(\".\" + i.elementClass + \":not(.\" + i.loadedClass + \"):not(.\" + i.loadingClass + \")\");!s.hasClass(i.elementClass) || s.hasClass(i.loadedClass) || s.hasClass(i.loadingClass) || r.push(s[0]), 0 !== r.length && r.each((function(e) { var r = m(e);\r\n                        r.addClass(i.loadingClass); var n = r.attr(\"data-background\"),\r\n                            o = r.attr(\"data-src\"),\r\n                            l = r.attr(\"data-srcset\"),\r\n                            d = r.attr(\"data-sizes\"),\r\n                            p = r.parent(\"picture\");\r\n                        a.loadImage(r[0], o || n, l, d, !1, (function() { if (null != a && a && (!a || a.params) && !a.destroyed) { if (n ? (r.css(\"background-image\", 'url(\"' + n + '\")'), r.removeAttr(\"data-background\")) : (l && (r.attr(\"srcset\", l), r.removeAttr(\"data-srcset\")), d && (r.attr(\"sizes\", d), r.removeAttr(\"data-sizes\")), p.length && p.children(\"source\").each((function(e) { var t = m(e);\r\n                                        t.attr(\"data-srcset\") && (t.attr(\"srcset\", t.attr(\"data-srcset\")), t.removeAttr(\"data-srcset\")) })), o && (r.attr(\"src\", o), r.removeAttr(\"data-src\"))), r.addClass(i.loadedClass).removeClass(i.loadingClass), s.find(\".\" + i.preloaderClass).remove(), a.params.loop && t) { var e = s.attr(\"data-swiper-slide-index\"); if (s.hasClass(a.params.slideDuplicateClass)) { var c = a.$wrapperEl.children('[data-swiper-slide-index=\"' + e + '\"]:not(.' + a.params.slideDuplicateClass + \")\");\r\n                                        a.lazy.loadInSlide(c.index(), !1) } else { var u = a.$wrapperEl.children(\".\" + a.params.slideDuplicateClass + '[data-swiper-slide-index=\"' + e + '\"]');\r\n                                        a.lazy.loadInSlide(u.index(), !1) } } a.emit(\"lazyImageReady\", s[0], r[0]), a.params.autoHeight && a.updateAutoHeight() } })), a.emit(\"lazyImageLoad\", s[0], r[0]) })) } }, load: function() { var e = this,\r\n                    t = e.$wrapperEl,\r\n                    a = e.params,\r\n                    i = e.slides,\r\n                    s = e.activeIndex,\r\n                    r = e.virtual && a.virtual.enabled,\r\n                    n = a.lazy,\r\n                    o = a.slidesPerView;\r\n\r\n                function l(e) { if (r) { if (t.children(\".\" + a.slideClass + '[data-swiper-slide-index=\"' + e + '\"]').length) return !0 } else if (i[e]) return !0; return !1 }\r\n\r\n                function d(e) { return r ? m(e).attr(\"data-swiper-slide-index\") : m(e).index() } if (\"auto\" === o && (o = 0), e.lazy.initialImageLoaded || (e.lazy.initialImageLoaded = !0), e.params.watchSlidesVisibility) t.children(\".\" + a.slideVisibleClass).each((function(t) { var a = r ? m(t).attr(\"data-swiper-slide-index\") : m(t).index();\r\n                    e.lazy.loadInSlide(a) }));\r\n                else if (o > 1)\r\n                    for (var p = s; p < s + o; p += 1) l(p) && e.lazy.loadInSlide(p);\r\n                else e.lazy.loadInSlide(s); if (n.loadPrevNext)\r\n                    if (o > 1 || n.loadPrevNextAmount && n.loadPrevNextAmount > 1) { for (var c = n.loadPrevNextAmount, u = o, h = Math.min(s + u + Math.max(c, u), i.length), v = Math.max(s - Math.max(u, c), 0), f = s + o; f < h; f += 1) l(f) && e.lazy.loadInSlide(f); for (var g = v; g < s; g += 1) l(g) && e.lazy.loadInSlide(g) } else { var b = t.children(\".\" + a.slideNextClass);\r\n                        b.length > 0 && e.lazy.loadInSlide(d(b)); var w = t.children(\".\" + a.slidePrevClass);\r\n                        w.length > 0 && e.lazy.loadInSlide(d(w)) } }, checkInViewOnLoad: function() { var e = o(),\r\n                    t = this; if (t && !t.destroyed) { var a = t.params.lazy.scrollingElement ? m(t.params.lazy.scrollingElement) : m(e),\r\n                        i = a[0] === e,\r\n                        s = i ? e.innerWidth : a[0].offsetWidth,\r\n                        r = i ? e.innerHeight : a[0].offsetHeight,\r\n                        n = t.$el.offset(),\r\n                        l = !1;\r\n                    t.rtlTranslate && (n.left -= t.$el[0].scrollLeft); for (var d = [\r\n                            [n.left, n.top],\r\n                            [n.left + t.width, n.top],\r\n                            [n.left, n.top + t.height],\r\n                            [n.left + t.width, n.top + t.height]\r\n                        ], p = 0; p < d.length; p += 1) { var c = d[p]; if (c[0] >= 0 && c[0] <= s && c[1] >= 0 && c[1] <= r) { if (0 === c[0] && 0 === c[1]) continue;\r\n                            l = !0 } } l ? (t.lazy.load(), a.off(\"scroll\", t.lazy.checkInViewOnLoad)) : t.lazy.scrollHandlerAttached || (t.lazy.scrollHandlerAttached = !0, a.on(\"scroll\", t.lazy.checkInViewOnLoad)) } } },\r\n        ie = { LinearSpline: function(e, t) { var a, i, s, r, n, o = function(e, t) { for (i = -1, a = e.length; a - i > 1;) e[s = a + i >> 1] <= t ? i = s : a = s; return a }; return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function(e) { return e ? (n = o(this.x, e), r = n - 1, (e - this.x[r]) * (this.y[n] - this.y[r]) / (this.x[n] - this.x[r]) + this.y[r]) : 0 }, this }, getInterpolateFunction: function(e) { var t = this;\r\n                t.controller.spline || (t.controller.spline = t.params.loop ? new ie.LinearSpline(t.slidesGrid, e.slidesGrid) : new ie.LinearSpline(t.snapGrid, e.snapGrid)) }, setTranslate: function(e, t) { var a, i, s = this,\r\n                    r = s.controller.control,\r\n                    n = s.constructor;\r\n\r\n                function o(e) { var t = s.rtlTranslate ? -s.translate : s.translate; \"slide\" === s.params.controller.by && (s.controller.getInterpolateFunction(e), i = -s.controller.spline.interpolate(-t)), i && \"container\" !== s.params.controller.by || (a = (e.maxTranslate() - e.minTranslate()) / (s.maxTranslate() - s.minTranslate()), i = (t - s.minTranslate()) * a + e.minTranslate()), s.params.controller.inverse && (i = e.maxTranslate() - i), e.updateProgress(i), e.setTranslate(i, s), e.updateActiveIndex(), e.updateSlidesClasses() } if (Array.isArray(r))\r\n                    for (var l = 0; l < r.length; l += 1) r[l] !== t && r[l] instanceof n && o(r[l]);\r\n                else r instanceof n && t !== r && o(r) }, setTransition: function(e, t) { var a, i = this,\r\n                    s = i.constructor,\r\n                    r = i.controller.control;\r\n\r\n                function n(t) { t.setTransition(e, i), 0 !== e && (t.transitionStart(), t.params.autoHeight && E((function() { t.updateAutoHeight() })), t.$wrapperEl.transitionEnd((function() { r && (t.params.loop && \"slide\" === i.params.controller.by && t.loopFix(), t.transitionEnd()) }))) } if (Array.isArray(r))\r\n                    for (a = 0; a < r.length; a += 1) r[a] !== t && r[a] instanceof s && n(r[a]);\r\n                else r instanceof s && t !== r && n(r) } },\r\n        se = { getRandomNumber: function(e) { void 0 === e && (e = 16); return \"x\".repeat(e).replace(/x/g, (function() { return Math.round(16 * Math.random()).toString(16) })) }, makeElFocusable: function(e) { return e.attr(\"tabIndex\", \"0\"), e }, makeElNotFocusable: function(e) { return e.attr(\"tabIndex\", \"-1\"), e }, addElRole: function(e, t) { return e.attr(\"role\", t), e }, addElRoleDescription: function(e, t) { return e.attr(\"aria-roledescription\", t), e }, addElControls: function(e, t) { return e.attr(\"aria-controls\", t), e }, addElLabel: function(e, t) { return e.attr(\"aria-label\", t), e }, addElId: function(e, t) { return e.attr(\"id\", t), e }, addElLive: function(e, t) { return e.attr(\"aria-live\", t), e }, disableEl: function(e) { return e.attr(\"aria-disabled\", !0), e }, enableEl: function(e) { return e.attr(\"aria-disabled\", !1), e }, onEnterOrSpaceKey: function(e) { if (13 === e.keyCode || 32 === e.keyCode) { var t = this,\r\n                        a = t.params.a11y,\r\n                        i = m(e.target);\r\n                    t.navigation && t.navigation.$nextEl && i.is(t.navigation.$nextEl) && (t.isEnd && !t.params.loop || t.slideNext(), t.isEnd ? t.a11y.notify(a.lastSlideMessage) : t.a11y.notify(a.nextSlideMessage)), t.navigation && t.navigation.$prevEl && i.is(t.navigation.$prevEl) && (t.isBeginning && !t.params.loop || t.slidePrev(), t.isBeginning ? t.a11y.notify(a.firstSlideMessage) : t.a11y.notify(a.prevSlideMessage)), t.pagination && i.is(z(t.params.pagination.bulletClass)) && i[0].click() } }, notify: function(e) { var t = this.a11y.liveRegion;\r\n                0 !== t.length && (t.html(\"\"), t.html(e)) }, updateNavigation: function() { var e = this; if (!e.params.loop && e.navigation) { var t = e.navigation,\r\n                        a = t.$nextEl,\r\n                        i = t.$prevEl;\r\n                    i && i.length > 0 && (e.isBeginning ? (e.a11y.disableEl(i), e.a11y.makeElNotFocusable(i)) : (e.a11y.enableEl(i), e.a11y.makeElFocusable(i))), a && a.length > 0 && (e.isEnd ? (e.a11y.disableEl(a), e.a11y.makeElNotFocusable(a)) : (e.a11y.enableEl(a), e.a11y.makeElFocusable(a))) } }, updatePagination: function() { var e = this,\r\n                    t = e.params.a11y;\r\n                e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.bullets.each((function(a) { var i = m(a);\r\n                    e.a11y.makeElFocusable(i), e.params.pagination.renderBullet || (e.a11y.addElRole(i, \"button\"), e.a11y.addElLabel(i, t.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, i.index() + 1))) })) }, init: function() { var e = this,\r\n                    t = e.params.a11y;\r\n                e.$el.append(e.a11y.liveRegion); var a = e.$el;\r\n                t.containerRoleDescriptionMessage && e.a11y.addElRoleDescription(a, t.containerRoleDescriptionMessage), t.containerMessage && e.a11y.addElLabel(a, t.containerMessage); var i, s, r, n = e.$wrapperEl,\r\n                    o = n.attr(\"id\") || \"swiper-wrapper-\" + e.a11y.getRandomNumber(16);\r\n                e.a11y.addElId(n, o), i = e.params.autoplay && e.params.autoplay.enabled ? \"off\" : \"polite\", e.a11y.addElLive(n, i), t.itemRoleDescriptionMessage && e.a11y.addElRoleDescription(m(e.slides), t.itemRoleDescriptionMessage), e.a11y.addElRole(m(e.slides), \"group\"), e.slides.each((function(a) { var i = m(a),\r\n                        s = t.slideLabelMessage.replace(/\\{\\{index\\}\\}/, i.index() + 1).replace(/\\{\\{slidesLength\\}\\}/, e.slides.length);\r\n                    e.a11y.addElLabel(i, s) })), e.navigation && e.navigation.$nextEl && (s = e.navigation.$nextEl), e.navigation && e.navigation.$prevEl && (r = e.navigation.$prevEl), s && s.length && (e.a11y.makeElFocusable(s), \"BUTTON\" !== s[0].tagName && (e.a11y.addElRole(s, \"button\"), s.on(\"keydown\", e.a11y.onEnterOrSpaceKey)), e.a11y.addElLabel(s, t.nextSlideMessage), e.a11y.addElControls(s, o)), r && r.length && (e.a11y.makeElFocusable(r), \"BUTTON\" !== r[0].tagName && (e.a11y.addElRole(r, \"button\"), r.on(\"keydown\", e.a11y.onEnterOrSpaceKey)), e.a11y.addElLabel(r, t.prevSlideMessage), e.a11y.addElControls(r, o)), e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.$el.on(\"keydown\", z(e.params.pagination.bulletClass), e.a11y.onEnterOrSpaceKey) }, destroy: function() { var e, t, a = this;\r\n                a.a11y.liveRegion && a.a11y.liveRegion.length > 0 && a.a11y.liveRegion.remove(), a.navigation && a.navigation.$nextEl && (e = a.navigation.$nextEl), a.navigation && a.navigation.$prevEl && (t = a.navigation.$prevEl), e && e.off(\"keydown\", a.a11y.onEnterOrSpaceKey), t && t.off(\"keydown\", a.a11y.onEnterOrSpaceKey), a.pagination && a.params.pagination.clickable && a.pagination.bullets && a.pagination.bullets.length && a.pagination.$el.off(\"keydown\", z(a.params.pagination.bulletClass), a.a11y.onEnterOrSpaceKey) } },\r\n        re = { init: function() { var e = this,\r\n                    t = o(); if (e.params.history) { if (!t.history || !t.history.pushState) return e.params.history.enabled = !1, void(e.params.hashNavigation.enabled = !0); var a = e.history;\r\n                    a.initialized = !0, a.paths = re.getPathValues(e.params.url), (a.paths.key || a.paths.value) && (a.scrollToSlide(0, a.paths.value, e.params.runCallbacksOnInit), e.params.history.replaceState || t.addEventListener(\"popstate\", e.history.setHistoryPopState)) } }, destroy: function() { var e = o();\r\n                this.params.history.replaceState || e.removeEventListener(\"popstate\", this.history.setHistoryPopState) }, setHistoryPopState: function() { var e = this;\r\n                e.history.paths = re.getPathValues(e.params.url), e.history.scrollToSlide(e.params.speed, e.history.paths.value, !1) }, getPathValues: function(e) { var t = o(),\r\n                    a = (e ? new URL(e) : t.location).pathname.slice(1).split(\"/\").filter((function(e) { return \"\" !== e })),\r\n                    i = a.length; return { key: a[i - 2], value: a[i - 1] } }, setHistory: function(e, t) { var a = this,\r\n                    i = o(); if (a.history.initialized && a.params.history.enabled) { var s;\r\n                    s = a.params.url ? new URL(a.params.url) : i.location; var r = a.slides.eq(t),\r\n                        n = re.slugify(r.attr(\"data-history\"));\r\n                    s.pathname.includes(e) || (n = e + \"/\" + n); var l = i.history.state;\r\n                    l && l.value === n || (a.params.history.replaceState ? i.history.replaceState({ value: n }, null, n) : i.history.pushState({ value: n }, null, n)) } }, slugify: function(e) { return e.toString().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\") }, scrollToSlide: function(e, t, a) { var i = this; if (t)\r\n                    for (var s = 0, r = i.slides.length; s < r; s += 1) { var n = i.slides.eq(s); if (re.slugify(n.attr(\"data-history\")) === t && !n.hasClass(i.params.slideDuplicateClass)) { var o = n.index();\r\n                            i.slideTo(o, e, a) } } else i.slideTo(0, e, a) } },\r\n        ne = { onHashCange: function() { var e = this,\r\n                    t = r();\r\n                e.emit(\"hashChange\"); var a = t.location.hash.replace(\"#\", \"\"); if (a !== e.slides.eq(e.activeIndex).attr(\"data-hash\")) { var i = e.$wrapperEl.children(\".\" + e.params.slideClass + '[data-hash=\"' + a + '\"]').index(); if (void 0 === i) return;\r\n                    e.slideTo(i) } }, setHash: function() { var e = this,\r\n                    t = o(),\r\n                    a = r(); if (e.hashNavigation.initialized && e.params.hashNavigation.enabled)\r\n                    if (e.params.hashNavigation.replaceState && t.history && t.history.replaceState) t.history.replaceState(null, null, \"#\" + e.slides.eq(e.activeIndex).attr(\"data-hash\") || \"\"), e.emit(\"hashSet\");\r\n                    else { var i = e.slides.eq(e.activeIndex),\r\n                            s = i.attr(\"data-hash\") || i.attr(\"data-history\");\r\n                        a.location.hash = s || \"\", e.emit(\"hashSet\") } }, init: function() { var e = this,\r\n                    t = r(),\r\n                    a = o(); if (!(!e.params.hashNavigation.enabled || e.params.history && e.params.history.enabled)) { e.hashNavigation.initialized = !0; var i = t.location.hash.replace(\"#\", \"\"); if (i)\r\n                        for (var s = 0, n = e.slides.length; s < n; s += 1) { var l = e.slides.eq(s); if ((l.attr(\"data-hash\") || l.attr(\"data-history\")) === i && !l.hasClass(e.params.slideDuplicateClass)) { var d = l.index();\r\n                                e.slideTo(d, 0, e.params.runCallbacksOnInit, !0) } } e.params.hashNavigation.watchState && m(a).on(\"hashchange\", e.hashNavigation.onHashCange) } }, destroy: function() { var e = o();\r\n                this.params.hashNavigation.watchState && m(e).off(\"hashchange\", this.hashNavigation.onHashCange) } },\r\n        oe = { run: function() { var e = this,\r\n                    t = e.slides.eq(e.activeIndex),\r\n                    a = e.params.autoplay.delay;\r\n                t.attr(\"data-swiper-autoplay\") && (a = t.attr(\"data-swiper-autoplay\") || e.params.autoplay.delay), clearTimeout(e.autoplay.timeout), e.autoplay.timeout = E((function() { var t;\r\n                    e.params.autoplay.reverseDirection ? e.params.loop ? (e.loopFix(), t = e.slidePrev(e.params.speed, !0, !0), e.emit(\"autoplay\")) : e.isBeginning ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (t = e.slideTo(e.slides.length - 1, e.params.speed, !0, !0), e.emit(\"autoplay\")) : (t = e.slidePrev(e.params.speed, !0, !0), e.emit(\"autoplay\")) : e.params.loop ? (e.loopFix(), t = e.slideNext(e.params.speed, !0, !0), e.emit(\"autoplay\")) : e.isEnd ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (t = e.slideTo(0, e.params.speed, !0, !0), e.emit(\"autoplay\")) : (t = e.slideNext(e.params.speed, !0, !0), e.emit(\"autoplay\")), (e.params.cssMode && e.autoplay.running || !1 === t) && e.autoplay.run() }), a) }, start: function() { var e = this; return void 0 === e.autoplay.timeout && (!e.autoplay.running && (e.autoplay.running = !0, e.emit(\"autoplayStart\"), e.autoplay.run(), !0)) }, stop: function() { var e = this; return !!e.autoplay.running && (void 0 !== e.autoplay.timeout && (e.autoplay.timeout && (clearTimeout(e.autoplay.timeout), e.autoplay.timeout = void 0), e.autoplay.running = !1, e.emit(\"autoplayStop\"), !0)) }, pause: function(e) { var t = this;\r\n                t.autoplay.running && (t.autoplay.paused || (t.autoplay.timeout && clearTimeout(t.autoplay.timeout), t.autoplay.paused = !0, 0 !== e && t.params.autoplay.waitForTransition ? (t.$wrapperEl[0].addEventListener(\"transitionend\", t.autoplay.onTransitionEnd), t.$wrapperEl[0].addEventListener(\"webkitTransitionEnd\", t.autoplay.onTransitionEnd)) : (t.autoplay.paused = !1, t.autoplay.run()))) }, onVisibilityChange: function() { var e = this,\r\n                    t = r(); \"hidden\" === t.visibilityState && e.autoplay.running && e.autoplay.pause(), \"visible\" === t.visibilityState && e.autoplay.paused && (e.autoplay.run(), e.autoplay.paused = !1) }, onTransitionEnd: function(e) { var t = this;\r\n                t && !t.destroyed && t.$wrapperEl && e.target === t.$wrapperEl[0] && (t.$wrapperEl[0].removeEventListener(\"transitionend\", t.autoplay.onTransitionEnd), t.$wrapperEl[0].removeEventListener(\"webkitTransitionEnd\", t.autoplay.onTransitionEnd), t.autoplay.paused = !1, t.autoplay.running ? t.autoplay.run() : t.autoplay.stop()) } },\r\n        le = { setTranslate: function() { for (var e = this, t = e.slides, a = 0; a < t.length; a += 1) { var i = e.slides.eq(a),\r\n                        s = -i[0].swiperSlideOffset;\r\n                    e.params.virtualTranslate || (s -= e.translate); var r = 0;\r\n                    e.isHorizontal() || (r = s, s = 0); var n = e.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(i[0].progress), 0) : 1 + Math.min(Math.max(i[0].progress, -1), 0);\r\n                    i.css({ opacity: n }).transform(\"translate3d(\" + s + \"px, \" + r + \"px, 0px)\") } }, setTransition: function(e) { var t = this,\r\n                    a = t.slides,\r\n                    i = t.$wrapperEl; if (a.transition(e), t.params.virtualTranslate && 0 !== e) { var s = !1;\r\n                    a.transitionEnd((function() { if (!s && t && !t.destroyed) { s = !0, t.animating = !1; for (var e = [\"webkitTransitionEnd\", \"transitionend\"], a = 0; a < e.length; a += 1) i.trigger(e[a]) } })) } } },\r\n        de = { setTranslate: function() { var e, t = this,\r\n                    a = t.$el,\r\n                    i = t.$wrapperEl,\r\n                    s = t.slides,\r\n                    r = t.width,\r\n                    n = t.height,\r\n                    o = t.rtlTranslate,\r\n                    l = t.size,\r\n                    d = t.browser,\r\n                    p = t.params.cubeEffect,\r\n                    c = t.isHorizontal(),\r\n                    u = t.virtual && t.params.virtual.enabled,\r\n                    h = 0;\r\n                p.shadow && (c ? (0 === (e = i.find(\".swiper-cube-shadow\")).length && (e = m('<div class=\"swiper-cube-shadow\"></div>'), i.append(e)), e.css({ height: r + \"px\" })) : 0 === (e = a.find(\".swiper-cube-shadow\")).length && (e = m('<div class=\"swiper-cube-shadow\"></div>'), a.append(e))); for (var v = 0; v < s.length; v += 1) { var f = s.eq(v),\r\n                        g = v;\r\n                    u && (g = parseInt(f.attr(\"data-swiper-slide-index\"), 10)); var b = 90 * g,\r\n                        w = Math.floor(b / 360);\r\n                    o && (b = -b, w = Math.floor(-b / 360)); var y = Math.max(Math.min(f[0].progress, 1), -1),\r\n                        E = 0,\r\n                        x = 0,\r\n                        T = 0;\r\n                    g % 4 == 0 ? (E = 4 * -w * l, T = 0) : (g - 1) % 4 == 0 ? (E = 0, T = 4 * -w * l) : (g - 2) % 4 == 0 ? (E = l + 4 * w * l, T = l) : (g - 3) % 4 == 0 && (E = -l, T = 3 * l + 4 * l * w), o && (E = -E), c || (x = E, E = 0); var S = \"rotateX(\" + (c ? 0 : -b) + \"deg) rotateY(\" + (c ? b : 0) + \"deg) translate3d(\" + E + \"px, \" + x + \"px, \" + T + \"px)\"; if (y <= 1 && y > -1 && (h = 90 * g + 90 * y, o && (h = 90 * -g - 90 * y)), f.transform(S), p.slideShadows) { var C = c ? f.find(\".swiper-slide-shadow-left\") : f.find(\".swiper-slide-shadow-top\"),\r\n                            M = c ? f.find(\".swiper-slide-shadow-right\") : f.find(\".swiper-slide-shadow-bottom\");\r\n                        0 === C.length && (C = m('<div class=\"swiper-slide-shadow-' + (c ? \"left\" : \"top\") + '\"></div>'), f.append(C)), 0 === M.length && (M = m('<div class=\"swiper-slide-shadow-' + (c ? \"right\" : \"bottom\") + '\"></div>'), f.append(M)), C.length && (C[0].style.opacity = Math.max(-y, 0)), M.length && (M[0].style.opacity = Math.max(y, 0)) } } if (i.css({ \"-webkit-transform-origin\": \"50% 50% -\" + l / 2 + \"px\", \"-moz-transform-origin\": \"50% 50% -\" + l / 2 + \"px\", \"-ms-transform-origin\": \"50% 50% -\" + l / 2 + \"px\", \"transform-origin\": \"50% 50% -\" + l / 2 + \"px\" }), p.shadow)\r\n                    if (c) e.transform(\"translate3d(0px, \" + (r / 2 + p.shadowOffset) + \"px, \" + -r / 2 + \"px) rotateX(90deg) rotateZ(0deg) scale(\" + p.shadowScale + \")\");\r\n                    else { var z = Math.abs(h) - 90 * Math.floor(Math.abs(h) / 90),\r\n                            P = 1.5 - (Math.sin(2 * z * Math.PI / 360) / 2 + Math.cos(2 * z * Math.PI / 360) / 2),\r\n                            k = p.shadowScale,\r\n                            L = p.shadowScale / P,\r\n                            $ = p.shadowOffset;\r\n                        e.transform(\"scale3d(\" + k + \", 1, \" + L + \") translate3d(0px, \" + (n / 2 + $) + \"px, \" + -n / 2 / L + \"px) rotateX(-90deg)\") } var I = d.isSafari || d.isWebView ? -l / 2 : 0;\r\n                i.transform(\"translate3d(0px,0,\" + I + \"px) rotateX(\" + (t.isHorizontal() ? 0 : h) + \"deg) rotateY(\" + (t.isHorizontal() ? -h : 0) + \"deg)\") }, setTransition: function(e) { var t = this,\r\n                    a = t.$el;\r\n                t.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), t.params.cubeEffect.shadow && !t.isHorizontal() && a.find(\".swiper-cube-shadow\").transition(e) } },\r\n        pe = { setTranslate: function() { for (var e = this, t = e.slides, a = e.rtlTranslate, i = 0; i < t.length; i += 1) { var s = t.eq(i),\r\n                        r = s[0].progress;\r\n                    e.params.flipEffect.limitRotation && (r = Math.max(Math.min(s[0].progress, 1), -1)); var n = -180 * r,\r\n                        o = 0,\r\n                        l = -s[0].swiperSlideOffset,\r\n                        d = 0; if (e.isHorizontal() ? a && (n = -n) : (d = l, l = 0, o = -n, n = 0), s[0].style.zIndex = -Math.abs(Math.round(r)) + t.length, e.params.flipEffect.slideShadows) { var p = e.isHorizontal() ? s.find(\".swiper-slide-shadow-left\") : s.find(\".swiper-slide-shadow-top\"),\r\n                            c = e.isHorizontal() ? s.find(\".swiper-slide-shadow-right\") : s.find(\".swiper-slide-shadow-bottom\");\r\n                        0 === p.length && (p = m('<div class=\"swiper-slide-shadow-' + (e.isHorizontal() ? \"left\" : \"top\") + '\"></div>'), s.append(p)), 0 === c.length && (c = m('<div class=\"swiper-slide-shadow-' + (e.isHorizontal() ? \"right\" : \"bottom\") + '\"></div>'), s.append(c)), p.length && (p[0].style.opacity = Math.max(-r, 0)), c.length && (c[0].style.opacity = Math.max(r, 0)) } s.transform(\"translate3d(\" + l + \"px, \" + d + \"px, 0px) rotateX(\" + o + \"deg) rotateY(\" + n + \"deg)\") } }, setTransition: function(e) { var t = this,\r\n                    a = t.slides,\r\n                    i = t.activeIndex,\r\n                    s = t.$wrapperEl; if (a.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e), t.params.virtualTranslate && 0 !== e) { var r = !1;\r\n                    a.eq(i).transitionEnd((function() { if (!r && t && !t.destroyed) { r = !0, t.animating = !1; for (var e = [\"webkitTransitionEnd\", \"transitionend\"], a = 0; a < e.length; a += 1) s.trigger(e[a]) } })) } } },\r\n        ce = { setTranslate: function() { for (var e = this, t = e.width, a = e.height, i = e.slides, s = e.slidesSizesGrid, r = e.params.coverflowEffect, n = e.isHorizontal(), o = e.translate, l = n ? t / 2 - o : a / 2 - o, d = n ? r.rotate : -r.rotate, p = r.depth, c = 0, u = i.length; c < u; c += 1) { var h = i.eq(c),\r\n                        v = s[c],\r\n                        f = (l - h[0].swiperSlideOffset - v / 2) / v * r.modifier,\r\n                        g = n ? d * f : 0,\r\n                        b = n ? 0 : d * f,\r\n                        w = -p * Math.abs(f),\r\n                        y = r.stretch; \"string\" == typeof y && -1 !== y.indexOf(\"%\") && (y = parseFloat(r.stretch) / 100 * v); var E = n ? 0 : y * f,\r\n                        x = n ? y * f : 0,\r\n                        T = 1 - (1 - r.scale) * Math.abs(f);\r\n                    Math.abs(x) < .001 && (x = 0), Math.abs(E) < .001 && (E = 0), Math.abs(w) < .001 && (w = 0), Math.abs(g) < .001 && (g = 0), Math.abs(b) < .001 && (b = 0), Math.abs(T) < .001 && (T = 0); var S = \"translate3d(\" + x + \"px,\" + E + \"px,\" + w + \"px)  rotateX(\" + b + \"deg) rotateY(\" + g + \"deg) scale(\" + T + \")\"; if (h.transform(S), h[0].style.zIndex = 1 - Math.abs(Math.round(f)), r.slideShadows) { var C = n ? h.find(\".swiper-slide-shadow-left\") : h.find(\".swiper-slide-shadow-top\"),\r\n                            M = n ? h.find(\".swiper-slide-shadow-right\") : h.find(\".swiper-slide-shadow-bottom\");\r\n                        0 === C.length && (C = m('<div class=\"swiper-slide-shadow-' + (n ? \"left\" : \"top\") + '\"></div>'), h.append(C)), 0 === M.length && (M = m('<div class=\"swiper-slide-shadow-' + (n ? \"right\" : \"bottom\") + '\"></div>'), h.append(M)), C.length && (C[0].style.opacity = f > 0 ? f : 0), M.length && (M[0].style.opacity = -f > 0 ? -f : 0) } } }, setTransition: function(e) { this.slides.transition(e).find(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").transition(e) } },\r\n        ue = { init: function() { var e = this,\r\n                    t = e.params.thumbs; if (e.thumbs.initialized) return !1;\r\n                e.thumbs.initialized = !0; var a = e.constructor; return t.swiper instanceof a ? (e.thumbs.swiper = t.swiper, C(e.thumbs.swiper.originalParams, { watchSlidesProgress: !0, slideToClickedSlide: !1 }), C(e.thumbs.swiper.params, { watchSlidesProgress: !0, slideToClickedSlide: !1 })) : S(t.swiper) && (e.thumbs.swiper = new a(C({}, t.swiper, { watchSlidesVisibility: !0, watchSlidesProgress: !0, slideToClickedSlide: !1 })), e.thumbs.swiperCreated = !0), e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass), e.thumbs.swiper.on(\"tap\", e.thumbs.onThumbClick), !0 }, onThumbClick: function() { var e = this,\r\n                    t = e.thumbs.swiper; if (t) { var a = t.clickedIndex,\r\n                        i = t.clickedSlide; if (!(i && m(i).hasClass(e.params.thumbs.slideThumbActiveClass) || null == a)) { var s; if (s = t.params.loop ? parseInt(m(t.clickedSlide).attr(\"data-swiper-slide-index\"), 10) : a, e.params.loop) { var r = e.activeIndex;\r\n                            e.slides.eq(r).hasClass(e.params.slideDuplicateClass) && (e.loopFix(), e._clientLeft = e.$wrapperEl[0].clientLeft, r = e.activeIndex); var n = e.slides.eq(r).prevAll('[data-swiper-slide-index=\"' + s + '\"]').eq(0).index(),\r\n                                o = e.slides.eq(r).nextAll('[data-swiper-slide-index=\"' + s + '\"]').eq(0).index();\r\n                            s = void 0 === n ? o : void 0 === o ? n : o - r < r - n ? o : n } e.slideTo(s) } } }, update: function(e) { var t = this,\r\n                    a = t.thumbs.swiper; if (a) { var i = \"auto\" === a.params.slidesPerView ? a.slidesPerViewDynamic() : a.params.slidesPerView,\r\n                        s = t.params.thumbs.autoScrollOffset,\r\n                        r = s && !a.params.loop; if (t.realIndex !== a.realIndex || r) { var n, o, l = a.activeIndex; if (a.params.loop) { a.slides.eq(l).hasClass(a.params.slideDuplicateClass) && (a.loopFix(), a._clientLeft = a.$wrapperEl[0].clientLeft, l = a.activeIndex); var d = a.slides.eq(l).prevAll('[data-swiper-slide-index=\"' + t.realIndex + '\"]').eq(0).index(),\r\n                                p = a.slides.eq(l).nextAll('[data-swiper-slide-index=\"' + t.realIndex + '\"]').eq(0).index();\r\n                            n = void 0 === d ? p : void 0 === p ? d : p - l == l - d ? l : p - l < l - d ? p : d, o = t.activeIndex > t.previousIndex ? \"next\" : \"prev\" } else o = (n = t.realIndex) > t.previousIndex ? \"next\" : \"prev\";\r\n                        r && (n += \"next\" === o ? s : -1 * s), a.visibleSlidesIndexes && a.visibleSlidesIndexes.indexOf(n) < 0 && (a.params.centeredSlides ? n = n > l ? n - Math.floor(i / 2) + 1 : n + Math.floor(i / 2) - 1 : n > l && (n = n - i + 1), a.slideTo(n, e ? 0 : void 0)) } var c = 1,\r\n                        u = t.params.thumbs.slideThumbActiveClass; if (t.params.slidesPerView > 1 && !t.params.centeredSlides && (c = t.params.slidesPerView), t.params.thumbs.multipleActiveThumbs || (c = 1), c = Math.floor(c), a.slides.removeClass(u), a.params.loop || a.params.virtual && a.params.virtual.enabled)\r\n                        for (var h = 0; h < c; h += 1) a.$wrapperEl.children('[data-swiper-slide-index=\"' + (t.realIndex + h) + '\"]').addClass(u);\r\n                    else\r\n                        for (var v = 0; v < c; v += 1) a.slides.eq(t.realIndex + v).addClass(u) } } },\r\n        he = [q, U, { name: \"mousewheel\", params: { mousewheel: { enabled: !1, releaseOnEdges: !1, invert: !1, forceToAxis: !1, sensitivity: 1, eventsTarget: \"container\", thresholdDelta: null, thresholdTime: null } }, create: function() { M(this, { mousewheel: { enabled: !1, lastScrollTime: x(), lastEventBeforeSnap: void 0, recentWheelEvents: [], enable: K.enable, disable: K.disable, handle: K.handle, handleMouseEnter: K.handleMouseEnter, handleMouseLeave: K.handleMouseLeave, animateSlider: K.animateSlider, releaseScroll: K.releaseScroll } }) }, on: { init: function(e) {!e.params.mousewheel.enabled && e.params.cssMode && e.mousewheel.disable(), e.params.mousewheel.enabled && e.mousewheel.enable() }, destroy: function(e) { e.params.cssMode && e.mousewheel.enable(), e.mousewheel.enabled && e.mousewheel.disable() } } }, { name: \"navigation\", params: { navigation: { nextEl: null, prevEl: null, hideOnClick: !1, disabledClass: \"swiper-button-disabled\", hiddenClass: \"swiper-button-hidden\", lockClass: \"swiper-button-lock\" } }, create: function() { M(this, { navigation: t({}, Z) }) }, on: { init: function(e) { e.navigation.init(), e.navigation.update() }, toEdge: function(e) { e.navigation.update() }, fromEdge: function(e) { e.navigation.update() }, destroy: function(e) { e.navigation.destroy() }, click: function(e, t) { var a = e.navigation,\r\n                        i = a.$nextEl,\r\n                        s = a.$prevEl,\r\n                        r = t.target; if (e.params.navigation.hideOnClick && !m(r).is(s) && !m(r).is(i)) { if (e.pagination && e.params.pagination && e.params.pagination.clickable && (e.pagination.el === r || e.pagination.el.contains(r))) return; var n;\r\n                        i ? n = i.hasClass(e.params.navigation.hiddenClass) : s && (n = s.hasClass(e.params.navigation.hiddenClass)), !0 === n ? e.emit(\"navigationShow\") : e.emit(\"navigationHide\"), i && i.toggleClass(e.params.navigation.hiddenClass), s && s.toggleClass(e.params.navigation.hiddenClass) } } } }, { name: \"pagination\", params: { pagination: { el: null, bulletElement: \"span\", clickable: !1, hideOnClick: !1, renderBullet: null, renderProgressbar: null, renderFraction: null, renderCustom: null, progressbarOpposite: !1, type: \"bullets\", dynamicBullets: !1, dynamicMainBullets: 1, formatFractionCurrent: function(e) { return e }, formatFractionTotal: function(e) { return e }, bulletClass: \"swiper-pagination-bullet\", bulletActiveClass: \"swiper-pagination-bullet-active\", modifierClass: \"swiper-pagination-\", currentClass: \"swiper-pagination-current\", totalClass: \"swiper-pagination-total\", hiddenClass: \"swiper-pagination-hidden\", progressbarFillClass: \"swiper-pagination-progressbar-fill\", progressbarOppositeClass: \"swiper-pagination-progressbar-opposite\", clickableClass: \"swiper-pagination-clickable\", lockClass: \"swiper-pagination-lock\" } }, create: function() { M(this, { pagination: t({ dynamicBulletIndex: 0 }, J) }) }, on: { init: function(e) { e.pagination.init(), e.pagination.render(), e.pagination.update() }, activeIndexChange: function(e) {\r\n                    (e.params.loop || void 0 === e.snapIndex) && e.pagination.update() }, snapIndexChange: function(e) { e.params.loop || e.pagination.update() }, slidesLengthChange: function(e) { e.params.loop && (e.pagination.render(), e.pagination.update()) }, snapGridLengthChange: function(e) { e.params.loop || (e.pagination.render(), e.pagination.update()) }, destroy: function(e) { e.pagination.destroy() }, click: function(e, t) { var a = t.target; if (e.params.pagination.el && e.params.pagination.hideOnClick && e.pagination.$el.length > 0 && !m(a).hasClass(e.params.pagination.bulletClass)) { if (e.navigation && (e.navigation.nextEl && a === e.navigation.nextEl || e.navigation.prevEl && a === e.navigation.prevEl)) return;!0 === e.pagination.$el.hasClass(e.params.pagination.hiddenClass) ? e.emit(\"paginationShow\") : e.emit(\"paginationHide\"), e.pagination.$el.toggleClass(e.params.pagination.hiddenClass) } } } }, { name: \"scrollbar\", params: { scrollbar: { el: null, dragSize: \"auto\", hide: !1, draggable: !1, snapOnRelease: !0, lockClass: \"swiper-scrollbar-lock\", dragClass: \"swiper-scrollbar-drag\" } }, create: function() { M(this, { scrollbar: t({ isTouched: !1, timeout: null, dragTimeout: null }, Q) }) }, on: { init: function(e) { e.scrollbar.init(), e.scrollbar.updateSize(), e.scrollbar.setTranslate() }, update: function(e) { e.scrollbar.updateSize() }, resize: function(e) { e.scrollbar.updateSize() }, observerUpdate: function(e) { e.scrollbar.updateSize() }, setTranslate: function(e) { e.scrollbar.setTranslate() }, setTransition: function(e, t) { e.scrollbar.setTransition(t) }, destroy: function(e) { e.scrollbar.destroy() } } }, { name: \"parallax\", params: { parallax: { enabled: !1 } }, create: function() { M(this, { parallax: t({}, ee) }) }, on: { beforeInit: function(e) { e.params.parallax.enabled && (e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0) }, init: function(e) { e.params.parallax.enabled && e.parallax.setTranslate() }, setTranslate: function(e) { e.params.parallax.enabled && e.parallax.setTranslate() }, setTransition: function(e, t) { e.params.parallax.enabled && e.parallax.setTransition(t) } } }, { name: \"zoom\", params: { zoom: { enabled: !1, maxRatio: 3, minRatio: 1, toggle: !0, containerClass: \"swiper-zoom-container\", zoomedSlideClass: \"swiper-slide-zoomed\" } }, create: function() { var e = this;\r\n                M(e, { zoom: t({ enabled: !1, scale: 1, currentScale: 1, isScaling: !1, gesture: { $slideEl: void 0, slideWidth: void 0, slideHeight: void 0, $imageEl: void 0, $imageWrapEl: void 0, maxRatio: 3 }, image: { isTouched: void 0, isMoved: void 0, currentX: void 0, currentY: void 0, minX: void 0, minY: void 0, maxX: void 0, maxY: void 0, width: void 0, height: void 0, startX: void 0, startY: void 0, touchesStart: {}, touchesCurrent: {} }, velocity: { x: void 0, y: void 0, prevPositionX: void 0, prevPositionY: void 0, prevTime: void 0 } }, te) }); var a = 1;\r\n                Object.defineProperty(e.zoom, \"scale\", { get: function() { return a }, set: function(t) { if (a !== t) { var i = e.zoom.gesture.$imageEl ? e.zoom.gesture.$imageEl[0] : void 0,\r\n                                s = e.zoom.gesture.$slideEl ? e.zoom.gesture.$slideEl[0] : void 0;\r\n                            e.emit(\"zoomChange\", t, i, s) } a = t } }) }, on: { init: function(e) { e.params.zoom.enabled && e.zoom.enable() }, destroy: function(e) { e.zoom.disable() }, touchStart: function(e, t) { e.zoom.enabled && e.zoom.onTouchStart(t) }, touchEnd: function(e, t) { e.zoom.enabled && e.zoom.onTouchEnd(t) }, doubleTap: function(e, t) {!e.animating && e.params.zoom.enabled && e.zoom.enabled && e.params.zoom.toggle && e.zoom.toggle(t) }, transitionEnd: function(e) { e.zoom.enabled && e.params.zoom.enabled && e.zoom.onTransitionEnd() }, slideChange: function(e) { e.zoom.enabled && e.params.zoom.enabled && e.params.cssMode && e.zoom.onTransitionEnd() } } }, { name: \"lazy\", params: { lazy: { checkInView: !1, enabled: !1, loadPrevNext: !1, loadPrevNextAmount: 1, loadOnTransitionStart: !1, scrollingElement: \"\", elementClass: \"swiper-lazy\", loadingClass: \"swiper-lazy-loading\", loadedClass: \"swiper-lazy-loaded\", preloaderClass: \"swiper-lazy-preloader\" } }, create: function() { M(this, { lazy: t({ initialImageLoaded: !1 }, ae) }) }, on: { beforeInit: function(e) { e.params.lazy.enabled && e.params.preloadImages && (e.params.preloadImages = !1) }, init: function(e) { e.params.lazy.enabled && !e.params.loop && 0 === e.params.initialSlide && (e.params.lazy.checkInView ? e.lazy.checkInViewOnLoad() : e.lazy.load()) }, scroll: function(e) { e.params.freeMode && !e.params.freeModeSticky && e.lazy.load() }, \"scrollbarDragMove resize _freeModeNoMomentumRelease\": function(e) { e.params.lazy.enabled && e.lazy.load() }, transitionStart: function(e) { e.params.lazy.enabled && (e.params.lazy.loadOnTransitionStart || !e.params.lazy.loadOnTransitionStart && !e.lazy.initialImageLoaded) && e.lazy.load() }, transitionEnd: function(e) { e.params.lazy.enabled && !e.params.lazy.loadOnTransitionStart && e.lazy.load() }, slideChange: function(e) { e.params.lazy.enabled && e.params.cssMode && e.lazy.load() } } }, { name: \"controller\", params: { controller: { control: void 0, inverse: !1, by: \"slide\" } }, create: function() { M(this, { controller: t({ control: this.params.controller.control }, ie) }) }, on: { update: function(e) { e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline) }, resize: function(e) { e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline) }, observerUpdate: function(e) { e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline) }, setTranslate: function(e, t, a) { e.controller.control && e.controller.setTranslate(t, a) }, setTransition: function(e, t, a) { e.controller.control && e.controller.setTransition(t, a) } } }, { name: \"a11y\", params: { a11y: { enabled: !0, notificationClass: \"swiper-notification\", prevSlideMessage: \"Previous slide\", nextSlideMessage: \"Next slide\", firstSlideMessage: \"This is the first slide\", lastSlideMessage: \"This is the last slide\", paginationBulletMessage: \"Go to slide {{index}}\", slideLabelMessage: \"{{index}} / {{slidesLength}}\", containerMessage: null, containerRoleDescriptionMessage: null, itemRoleDescriptionMessage: null } }, create: function() { M(this, { a11y: t({}, se, { liveRegion: m('<span class=\"' + this.params.a11y.notificationClass + '\" aria-live=\"assertive\" aria-atomic=\"true\"></span>') }) }) }, on: { afterInit: function(e) { e.params.a11y.enabled && (e.a11y.init(), e.a11y.updateNavigation()) }, toEdge: function(e) { e.params.a11y.enabled && e.a11y.updateNavigation() }, fromEdge: function(e) { e.params.a11y.enabled && e.a11y.updateNavigation() }, paginationUpdate: function(e) { e.params.a11y.enabled && e.a11y.updatePagination() }, destroy: function(e) { e.params.a11y.enabled && e.a11y.destroy() } } }, { name: \"history\", params: { history: { enabled: !1, replaceState: !1, key: \"slides\" } }, create: function() { M(this, { history: t({}, re) }) }, on: { init: function(e) { e.params.history.enabled && e.history.init() }, destroy: function(e) { e.params.history.enabled && e.history.destroy() }, transitionEnd: function(e) { e.history.initialized && e.history.setHistory(e.params.history.key, e.activeIndex) }, slideChange: function(e) { e.history.initialized && e.params.cssMode && e.history.setHistory(e.params.history.key, e.activeIndex) } } }, { name: \"hash-navigation\", params: { hashNavigation: { enabled: !1, replaceState: !1, watchState: !1 } }, create: function() { M(this, { hashNavigation: t({ initialized: !1 }, ne) }) }, on: { init: function(e) { e.params.hashNavigation.enabled && e.hashNavigation.init() }, destroy: function(e) { e.params.hashNavigation.enabled && e.hashNavigation.destroy() }, transitionEnd: function(e) { e.hashNavigation.initialized && e.hashNavigation.setHash() }, slideChange: function(e) { e.hashNavigation.initialized && e.params.cssMode && e.hashNavigation.setHash() } } }, { name: \"autoplay\", params: { autoplay: { enabled: !1, delay: 3e3, waitForTransition: !0, disableOnInteraction: !0, stopOnLastSlide: !1, reverseDirection: !1 } }, create: function() { M(this, { autoplay: t({}, oe, { running: !1, paused: !1 }) }) }, on: { init: function(e) { e.params.autoplay.enabled && (e.autoplay.start(), r().addEventListener(\"visibilitychange\", e.autoplay.onVisibilityChange)) }, beforeTransitionStart: function(e, t, a) { e.autoplay.running && (a || !e.params.autoplay.disableOnInteraction ? e.autoplay.pause(t) : e.autoplay.stop()) }, sliderFirstMove: function(e) { e.autoplay.running && (e.params.autoplay.disableOnInteraction ? e.autoplay.stop() : e.autoplay.pause()) }, touchEnd: function(e) { e.params.cssMode && e.autoplay.paused && !e.params.autoplay.disableOnInteraction && e.autoplay.run() }, destroy: function(e) { e.autoplay.running && e.autoplay.stop(), r().removeEventListener(\"visibilitychange\", e.autoplay.onVisibilityChange) } } }, { name: \"effect-fade\", params: { fadeEffect: { crossFade: !1 } }, create: function() { M(this, { fadeEffect: t({}, le) }) }, on: { beforeInit: function(e) { if (\"fade\" === e.params.effect) { e.classNames.push(e.params.containerModifierClass + \"fade\"); var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 };\r\n                        C(e.params, t), C(e.originalParams, t) } }, setTranslate: function(e) { \"fade\" === e.params.effect && e.fadeEffect.setTranslate() }, setTransition: function(e, t) { \"fade\" === e.params.effect && e.fadeEffect.setTransition(t) } } }, { name: \"effect-cube\", params: { cubeEffect: { slideShadows: !0, shadow: !0, shadowOffset: 20, shadowScale: .94 } }, create: function() { M(this, { cubeEffect: t({}, de) }) }, on: { beforeInit: function(e) { if (\"cube\" === e.params.effect) { e.classNames.push(e.params.containerModifierClass + \"cube\"), e.classNames.push(e.params.containerModifierClass + \"3d\"); var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, resistanceRatio: 0, spaceBetween: 0, centeredSlides: !1, virtualTranslate: !0 };\r\n                        C(e.params, t), C(e.originalParams, t) } }, setTranslate: function(e) { \"cube\" === e.params.effect && e.cubeEffect.setTranslate() }, setTransition: function(e, t) { \"cube\" === e.params.effect && e.cubeEffect.setTransition(t) } } }, { name: \"effect-flip\", params: { flipEffect: { slideShadows: !0, limitRotation: !0 } }, create: function() { M(this, { flipEffect: t({}, pe) }) }, on: { beforeInit: function(e) { if (\"flip\" === e.params.effect) { e.classNames.push(e.params.containerModifierClass + \"flip\"), e.classNames.push(e.params.containerModifierClass + \"3d\"); var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 };\r\n                        C(e.params, t), C(e.originalParams, t) } }, setTranslate: function(e) { \"flip\" === e.params.effect && e.flipEffect.setTranslate() }, setTransition: function(e, t) { \"flip\" === e.params.effect && e.flipEffect.setTransition(t) } } }, { name: \"effect-coverflow\", params: { coverflowEffect: { rotate: 50, stretch: 0, depth: 100, scale: 1, modifier: 1, slideShadows: !0 } }, create: function() { M(this, { coverflowEffect: t({}, ce) }) }, on: { beforeInit: function(e) { \"coverflow\" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + \"coverflow\"), e.classNames.push(e.params.containerModifierClass + \"3d\"), e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0) }, setTranslate: function(e) { \"coverflow\" === e.params.effect && e.coverflowEffect.setTranslate() }, setTransition: function(e, t) { \"coverflow\" === e.params.effect && e.coverflowEffect.setTransition(t) } } }, { name: \"thumbs\", params: { thumbs: { swiper: null, multipleActiveThumbs: !0, autoScrollOffset: 0, slideThumbActiveClass: \"swiper-slide-thumb-active\", thumbsContainerClass: \"swiper-container-thumbs\" } }, create: function() { M(this, { thumbs: t({ swiper: null, initialized: !1 }, ue) }) }, on: { beforeInit: function(e) { var t = e.params.thumbs;\r\n                    t && t.swiper && (e.thumbs.init(), e.thumbs.update(!0)) }, slideChange: function(e) { e.thumbs.swiper && e.thumbs.update() }, update: function(e) { e.thumbs.swiper && e.thumbs.update() }, resize: function(e) { e.thumbs.swiper && e.thumbs.update() }, observerUpdate: function(e) { e.thumbs.swiper && e.thumbs.update() }, setTransition: function(e, t) { var a = e.thumbs.swiper;\r\n                    a && a.setTransition(t) }, beforeDestroy: function(e) { var t = e.thumbs.swiper;\r\n                    t && e.thumbs.swiperCreated && t && t.destroy() } } }]; return F.use(he), F }));\r\n//# sourceMappingURL=swiper-bundle.min.js.map"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:13.439Z",
        "time": 9.099000017158687,
        "timings": {
          "blocked": 3.9410000512748957,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.7879999853298068,
          "receive": 4.369999980553985,
          "_blocked_queueing": 2.8810000512748957,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [],
            "parent": {
              "description": "Image",
              "callFrames": [
                {
                  "functionName": "",
                  "scriptId": "77",
                  "url": "",
                  "lineNumber": 84,
                  "columnNumber": 14
                },
                {
                  "functionName": "",
                  "scriptId": "77",
                  "url": "",
                  "lineNumber": 77,
                  "columnNumber": 29
                },
                {
                  "functionName": "m",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 879
                },
                {
                  "functionName": "$e",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 46273
                },
                {
                  "functionName": "append",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 47632
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 48728
                },
                {
                  "functionName": "M",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 29496
                },
                {
                  "functionName": "html",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 48404
                },
                {
                  "functionName": "UIActions.showViewHtml",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 11246
                },
                {
                  "functionName": "moveNextView",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 21252
                },
                {
                  "functionName": "actions",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 2190
                },
                {
                  "functionName": "",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 7238
                },
                {
                  "functionName": "nextView",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 20922
                },
                {
                  "functionName": "onclick",
                  "scriptId": "75",
                  "url": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018",
                  "lineNumber": 0,
                  "columnNumber": 32
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/lgn/5566897871528661947/TichDiemUuDai_600x860.png",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "350396"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 11:12:37 GMT"
            },
            {
              "name": "etag",
              "value": "\"67d7ce59-558bc\""
            },
            {
              "name": "last-modified",
              "value": "Mon, 17 Mar 2025 07:25:13 GMT"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 350396,
            "mimeType": "image/png",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:13.470Z",
        "time": 9.115999971982092,
        "timings": {
          "blocked": 1.4139999794773757,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.5069999796338379,
          "receive": 7.195000012870878,
          "_blocked_queueing": 1.0139999794773757,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [],
            "parent": {
              "description": "Image",
              "callFrames": [
                {
                  "functionName": "",
                  "scriptId": "77",
                  "url": "",
                  "lineNumber": 84,
                  "columnNumber": 14
                },
                {
                  "functionName": "",
                  "scriptId": "77",
                  "url": "",
                  "lineNumber": 77,
                  "columnNumber": 29
                },
                {
                  "functionName": "m",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 879
                },
                {
                  "functionName": "$e",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 46273
                },
                {
                  "functionName": "append",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 47632
                },
                {
                  "functionName": "",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 48728
                },
                {
                  "functionName": "M",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 29496
                },
                {
                  "functionName": "html",
                  "scriptId": "16",
                  "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                  "lineNumber": 1,
                  "columnNumber": 48404
                },
                {
                  "functionName": "UIActions.showViewHtml",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 11246
                },
                {
                  "functionName": "moveNextView",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 21252
                },
                {
                  "functionName": "actions",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 2190
                },
                {
                  "functionName": "",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 7238
                },
                {
                  "functionName": "nextView",
                  "scriptId": "18",
                  "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                  "lineNumber": 0,
                  "columnNumber": 20922
                },
                {
                  "functionName": "onclick",
                  "scriptId": "75",
                  "url": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018",
                  "lineNumber": 0,
                  "columnNumber": 32
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "image",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "http://v1.awingconnect.vn/static/Files/lgn/5566897871528661947/MuaThePhu600x860.png",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "http/1.1",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "content-length",
              "value": "475891"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 11:12:37 GMT"
            },
            {
              "name": "etag",
              "value": "\"67e12eb4-742f3\""
            },
            {
              "name": "last-modified",
              "value": "Mon, 24 Mar 2025 10:06:44 GMT"
            },
            {
              "name": "content-type",
              "value": "image/png"
            },
            {
              "name": "server",
              "value": "nginx/1.17.10"
            }
          ],
          "cookies": [],
          "content": {
            "size": 475891,
            "mimeType": "image/png",
            "text": "iVBORw0KGgoAAAANSUhEUgAAAlgAAANcCAIAAAAM4kYpAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAFyGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSfvu78nIGlkPSdXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQnPz4KPHg6eG1wbWV0YSB4bWxuczp4PSdhZG9iZTpuczptZXRhLyc+CjxyZGY6UkRGIHhtbG5zOnJkZj0naHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyc+CgogPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9JycKICB4bWxuczpBdHRyaWI9J2h0dHA6Ly9ucy5hdHRyaWJ1dGlvbi5jb20vYWRzLzEuMC8nPgogIDxBdHRyaWI6QWRzPgogICA8cmRmOlNlcT4KICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0nUmVzb3VyY2UnPgogICAgIDxBdHRyaWI6Q3JlYXRlZD4yMDI1LTAzLTE0PC9BdHRyaWI6Q3JlYXRlZD4KICAgICA8QXR0cmliOkV4dElkPmFmZGRjMGZiLWYwMjktNDU4Mi1hYmJhLWQwYjQ2OTQ1ZGNlMjwvQXR0cmliOkV4dElkPgogICAgIDxBdHRyaWI6RmJJZD41MjUyNjU5MTQxNzk1ODA8L0F0dHJpYjpGYklkPgogICAgIDxBdHRyaWI6VG91Y2hUeXBlPjI8L0F0dHJpYjpUb3VjaFR5cGU+CiAgICA8L3JkZjpsaT4KICAgPC9yZGY6U2VxPgogIDwvQXR0cmliOkFkcz4KIDwvcmRmOkRlc2NyaXB0aW9uPgoKIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PScnCiAgeG1sbnM6Q29udGFpbnNBaUdlbmVyYXRlZENvbnRlbnQ9J2h0dHBzOi8vY2FudmEuY29tL2V4cG9ydCc+CiAgPENvbnRhaW5zQWlHZW5lcmF0ZWRDb250ZW50OkNvbnRhaW5zQWlHZW5lcmF0ZWRDb250ZW50PlllczwvQ29udGFpbnNBaUdlbmVyYXRlZENvbnRlbnQ6Q29udGFpbnNBaUdlbmVyYXRlZENvbnRlbnQ+CiA8L3JkZjpEZXNjcmlwdGlvbj4K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",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:04:13.470Z",
        "time": 11.111000028904527,
        "timings": {
          "blocked": 1.3310000463202596,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.5420000129565596,
          "receive": 9.237999969627708,
          "_blocked_queueing": 1.0610000463202596,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_connectionId": "321523",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "send",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 80624
              },
              {
                "functionName": "ajax",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 76166
              },
              {
                "functionName": "sendAnalytic",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 21574
              },
              {
                "functionName": "authenWithForm",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 23702
              },
              {
                "functionName": "entry",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2517
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7398
              },
              {
                "functionName": "verifyAuthentication",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 23310
              },
              {
                "functionName": "entry",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2307
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7398
              },
              {
                "functionName": "completeAd",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 21112
              },
              {
                "functionName": "moveNextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 21355
              },
              {
                "functionName": "actions",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 2190
              },
              {
                "functionName": "",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 7238
              },
              {
                "functionName": "nextView",
                "scriptId": "18",
                "url": "http://v1.awingconnect.vn/captive/awing-captive.min.js?v=NgCTgQpyKBhdnQy_mnjVKlh7u9Y",
                "lineNumber": 0,
                "columnNumber": 20922
              },
              {
                "functionName": "connectToWifi",
                "scriptId": "77",
                "url": "",
                "lineNumber": 73,
                "columnNumber": 40
              },
              {
                "functionName": "",
                "scriptId": "77",
                "url": "",
                "lineNumber": 58,
                "columnNumber": 49
              },
              {
                "functionName": "dispatch",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 40034
              },
              {
                "functionName": "ce.event.add.v.handle",
                "scriptId": "16",
                "url": "http://v1.awingconnect.vn/lib/jquery/dist/jquery.min.js?v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo&v=_JqT3SQfawRcv_BIHPThkBvs0OEvtFFmqPF_lYI_Cxo",
                "lineNumber": 1,
                "columnNumber": 38005
              }
            ]
          }
        },
        "_priority": "High",
        "_resourceType": "xhr",
        "cache": {},
        "connection": "80",
        "pageref": "page_2",
        "request": {
          "method": "POST",
          "url": "http://v1.awingconnect.vn/Analytic/Send",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9,vi;q=0.8"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "14034"
            },
            {
              "name": "Content-Type",
              "value": "application/json; charset=UTF-8"
            },
            {
              "name": "Host",
              "value": "v1.awingconnect.vn"
            },
            {
              "name": "Origin",
              "value": "http://v1.awingconnect.vn"
            },
            {
              "name": "Referer",
              "value": "http://v1.awingconnect.vn/Connecting?sessionId=f67f01ba-50db-4ec2-b59a-fa8beff1b018"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
            },
            {
              "name": "X-Requested-With",
              "value": "XMLHttpRequest"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 554,
          "bodySize": 14034,
          "postData": {
            "mimeType": "application/json; charset=UTF-8",
            "text": "{\"captiveContextDTO\":{\"token\":\"66129d730ad1b9d62c5e36d8d8ad9cc0e6e32e38\",\"captiveContext\":{\"campaignData\":{\"sessionId\":\"f67f01ba-50db-4ec2-b59a-fa8beff1b018\",\"macAddress\":\"26-17-2E-AE-22-79\",\"apMac\":\"CC-2D-E0-0E-00-0A\",\"placeId\":\"5408580173018081493\",\"domainId\":\"5476089696408447131\",\"url\":\"http://v1.awingconnect.vn/login?serial=CC:2D:E0:0E:00:0A&client_mac=26:17:2E:AE:22:79&client_ip=186.186.31.234&userurl=&login_url=http://186.186.0.1/login&chap_id=\\\\170&chap_challenge=\\\\245\\\\345\\\\331\\\\134\\\\150\\\\331\\\\146\\\\353\\\\013\\\\120\\\\162\\\\166\\\\110\\\\312\\\\102\\\\251\",\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36\",\"campaignId\":\"4961554445594984512\",\"campaignGroupId\":1,\"campaignAdId\":1,\"campaignType\":0,\"isNetworkCampaign\":false,\"loginId\":\"0\",\"loginHtml\":{\"commonHtml\":\"\",\"pageViews\":[{\"contentHtml\":\"<style>\\r\\n    @media (max-width: 768px) {\\r\\n        .header-text {\\r\\n            font-size: 14px;\\r\\n        }\\r\\n        .connect-button {\\r\\n            font-size: 12px;\\r\\n        }\\r\\n        .policy {\\r\\n            font-size: 12px;\\r\\n        }\\r\\n        .logo-img {\\r\\n            margin: 16px !important;\\r\\n        }\\r\\n        .adsbyawing {\\r\\n            font-size: 14px;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @media (max-width: 360px) {\\r\\n        .connect-button {\\r\\n            font-size: 11px;\\r\\n        }\\r\\n        .policy {\\r\\n            font-size: 11px;\\r\\n        }\\r\\n    }\\r\\n    @media (min-width: 1024px) {\\r\\n        .logo-wrapper {\\r\\n            max-width: 700px;\\r\\n        }\\r\\n    }\\r\\n</style>\\r\\n\\r\\n<div class=\\\"container-fluid text-center p-5\\\" style=\\\"background: #f5f5f5;\\\">\\r\\n    <div class=\\\"row justify-content-center\\\">\\r\\n        <div class=\\\"col-md-10 col-lg-5 p-0 logo-wrapper\\\">\\r\\n            <div class=\\\"w-100 shadow-sm p-3 rounded\\\" style=\\\"background: #ffffff;\\\">\\r\\n                <p class=\\\"h5 header-text\\\" style=\\\"font-weight: bold\\\">Wi-Fi miễn phí tài trợ bởi</p>\\r\\n                <img id=\\\"logo\\\" class=\\\"w-75 m-4 logo-img\\\" src=\\\"/static/Files/lgn/5566897871528661947/Untitled-3.png\\\" />\\r\\n                <button id=\\\"logo_button\\\" class=\\\"btn btn-primary connect-button w-75\\\"\\r\\n                    style=\\\"min-height: 45px;\\\" onClick=\\\"awingStateMachineContextActions.nextView()\\\">\\r\\n                    <span>TIẾP TỤC ĐỂ KẾT NỐI INTERNET</span>\\r\\n                </button>\\r\\n                <div class=\\\"mt-1 policy\\\" style=\\\"color: #0000f5\\\">\\r\\n                    <p>Tôi đồng ý các điều khoản sử dụng Wi-Fi <a role=\\\"button\\\" class=\\\"awing-agreement\\\" onClick=\\\"awingUIActions.showAgreement()\\\">tại đây</a>\\r\\n                    </p>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"mt-4\\\" style=\\\"color: #5f6368\\\">\\r\\n                <u class=\\\"adsbyawing fw-bold d-flex justify-content-center align-items-center\\\" data-toggle=\\\"tooltip\\\" title=\\\"Email: contact@awing.vn\\r\\n                Hotline: 0901 05 05 17\\\"\\r\\n                    data-bs-placement=\\\"bottom\\\">Ads by AWING\\r\\n                    <div class=\\\"border border-light rounded-circle bg-secondary text-light mx-1 d-flex justify-content-center align-items-center\\\" style=\\\"width: 16px; height:16px; font-size: 10px;\\\">i</div>\\r\\n                </u>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<script>\\r\\n    let logoVariables = {\\r\\n        button: {\\r\\n            background: \\\"50b848\\\" ? \\\"#50b848\\\" : \\\"#ffffff\\\",\\r\\n            textColor: \\\"ffffff\\\" ? \\\"#ffffff\\\" : \\\"#231f20\\\"\\r\\n        },\\r\\n        options: {\\r\\n            isSquareLogo: false\\r\\n        }\\r\\n    }\\r\\n    $(\\\"#logo_button\\\").css({\\r\\n        background: logoVariables.button.background,\\r\\n        color: logoVariables.button.textColor,\\r\\n        border: logoVariables.button.background == \\\"#ffffff\\\" ? \\\"1px solid #231f20\\\" : \\\"none\\\"\\r\\n    })\\r\\n    if (logoVariables.options.isSquareLogo) {\\r\\n        $(\\\"#logo\\\").removeClass(\\\"w-75\\\")\\r\\n        $(\\\"#logo\\\").addClass(\\\"w-50\\\")\\r\\n    }\\r\\n    function startAnimation() {\\r\\n        $(document).ready(function () {\\r\\n            $('[data-toggle=\\\"tooltip\\\"]').tooltip();\\r\\n        });\\r\\n    }\\r\\n</script>\"},{\"contentHtml\":\"<link\\r\\nrel=\\\"stylesheet\\\"\\r\\nhref=\\\"/static/Files/template/5074619029972904036/swiper-bundle.min.css\\\"\\r\\n/>\\r\\n<script src=\\\"/static/Files/template/5074619029972904036/swiper-bundle.min.js\\\"></script>\\r\\n<link\\r\\nhref=\\\"/static/Files/template/5074619029972904036/template_slide_overflow_v2.1.css?v=2\\\"\\r\\nrel=\\\"stylesheet\\\"\\r\\n/>\\r\\n\\r\\n<style>\\r\\n@media (max-width: 768px) {\\r\\n    .connect-button {\\r\\n    font-size: 12px !important;\\r\\n    min-height: 50px !important;\\r\\n    }\\r\\n}\\r\\n.slide-item {\\r\\n    aspect-ratio: 600/860;\\r\\n}\\r\\n</style>\\r\\n\\r\\n<div id=\\\"slider-container\\\" class=\\\"container-fluid text-center p-0\\\">\\r\\n<div class=\\\"swiper-container p-0\\\">\\r\\n    <div\\r\\n        class=\\\"swiper-wrapper text-center p-0\\\"\\r\\n\\r\\n        id=\\\"slider-image\\\"\\r\\n    ></div>\\r\\n    <div id=\\\"btn-group\\\" class=\\\"w-100 z-3 position-absolute right-0 mb-md-5 mb-lg-3 mt-2 slide-button text-uppercase\\\">\\r\\n        <div class=\\\"swiper-pagination\\\"></div>\\r\\n        <button id=\\\"connectToInternet\\\" class=\\\"btn mt-2 connect-button text-uppercase awing-captive__blur\\\"\\r\\n            style=\\\"width: 80%; min-height: 45px; margin-bottom: 1em;\\\">\\r\\n            <span>\\r\\n                KẾT NỐI INTERNET SAU <br /><i> (CONNECTING IN) </i><i id=\\\"countdowntimer\\\" style=\\\"font-style: normal\\\">6S</i>\\r\\n            </span>\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n</div>\\r\\n<script>\\r\\nlet slideBannerVariables = {\\r\\n    banners: [{\\\"image\\\":\\\"/static/Files/lgn/5566897871528661947/TichDiemUuDai_600x860.png\\\",\\\"color\\\":\\\"fcf7cb\\\"},{\\\"image\\\":\\\"/static/Files/lgn/5566897871528661947/MuaThePhu600x860.png\\\",\\\"color\\\":\\\"58934a\\\"}],\\r\\n    connectButton: {\\r\\n        text: \\\"KẾT NỐI INTERNET\\\",\\r\\n        background: \\\"57bc53\\\" ? \\\"#57bc53\\\" : \\\"#ffffff\\\",\\r\\n        textColor: \\\"ffffff\\\" ? \\\"#ffffff\\\" : \\\"#231f20\\\"\\r\\n    },\\r\\n    slideOptions: {\\r\\n        loop: true,\\r\\n        slideTime: 3 >= 0 ?  3 :  2,\\r\\n        clickable: true,\\r\\n        skipTime: Number(6 || 0)\\r\\n    }\\r\\n}\\r\\nlet slideBannerFunctions = {\\r\\n    autoSwiper: ()=>{\\r\\n        let n = new Swiper(\\\".swiper-container\\\", {\\r\\n        pagination: \\\".swiper-pagination\\\",\\r\\n        nextButton: \\\".swiper-button-next\\\",\\r\\n        loop: slideBannerVariables.slideOptions.loop,\\r\\n        prevButton: !0,\\r\\n        paginationClickable: !0,\\r\\n        spaceBetween: 0,\\r\\n        centeredSlides: !0,\\r\\n        autoplay: {\\r\\n            delay: slideBannerVariables.slideOptions.slideTime * 1000,\\r\\n            stopOnLastSlide: slideBannerVariables.slideOptions.loop ? !1 : !0,\\r\\n        },\\r\\n        autoplayDisableOnInteraction: !1,\\r\\n        autoplayStopOnLast: !0,\\r\\n        preventClicks: !1,\\r\\n        preventClicksPropagation: !1,\\r\\n        pagination: { el: \\\".swiper-pagination\\\", clickable: !0 },\\r\\n        navigation: {\\r\\n            nextEl: \\\".swiper-button-next\\\",\\r\\n            prevEl: \\\".swiper-button-prev\\\",\\r\\n        },\\r\\n        });\\r\\n        $(\\\".swiper-pagination-clickable .swiper-pagination-bullet\\\").css(\\r\\n            \\\"background\\\",\\r\\n            slideBannerVariables.connectButton.background\\r\\n        );\\r\\n        return n;\\r\\n    },\\r\\n    countDown: (isClickable)=>{\\r\\n        let n = slideBannerVariables.slideOptions.skipTime;\\r\\n        e = setInterval(function () {\\r\\n            n--;\\r\\n            let o = document.getElementById(\\\"countdowntimer\\\");\\r\\n            if(o) {o.textContent = n + \\\"S\\\"}\\r\\n            if (n <= 0) {\\r\\n                    clearInterval(e);\\r\\n                    const img = $(\\\".image-next\\\");\\r\\n                    $(\\\"#connectToInternet\\\")\\r\\n                        .removeClass(\\\"disabled\\\")\\r\\n                        .removeClass(\\\"awing-captive__blur\\\")\\r\\n                        .click(function () {\\r\\n                            slideBannerFunctions.connectToWifi();\\r\\n                        });\\r\\n                    $(\\\"#connectToInternet span\\\").html(\\r\\n                        slideBannerVariables.connectButton.text + \\\"<br/><i>(INTERNET ACCESS)</i>\\\"\\r\\n                    );\\r\\n                    if(isClickable) {\\r\\n                    img.css(\\\"cursor\\\", \\\"pointer\\\");\\r\\n                    img.attr(\\\"onclick\\\", \\\"slideBannerFunctions.connectToWifi()\\\");\\r\\n                    }\\r\\n            }\\r\\n        }, n == 0 ? 0 : 1000);\\r\\n    },\\r\\n    connectToWifi: ()=>{\\r\\n        $(\\\".body-container\\\").css(\\\"background\\\", \\\"#F5F5F5\\\");\\r\\n        $(\\\".body-container\\\").css(\\\"min-height\\\", \\\"auto\\\");\\r\\n        awingStateMachineContextActions.nextView();\\r\\n    },\\r\\n}\\r\\nlet slide = document.getElementById(\\\"slider-image\\\");\\r\\nslideBannerVariables.banners.map((bannerItem, index) => {\\r\\n    const wrapper = document.createElement(\\\"div\\\")\\r\\n    wrapper.className += \\\" swiper-slide\\\"\\r\\n    const bodySlide = document.createElement(\\\"div\\\")\\r\\n    bodySlide.className += `body-container body-slide-${index + 1}`\\r\\n    const image = document.createElement(\\\"img\\\")\\r\\n    image.className += \\\" image-next slide-item\\\"\\r\\n    image.src = bannerItem.image\\r\\n    bodySlide.append(image)\\r\\n    const slideSpace = document.createElement(\\\"div\\\")\\r\\n    slideSpace.style.height = $(\\\"#btn-group\\\").height() + \\\"px\\\"\\r\\n    slideSpace.style.width = \\\"100%\\\";\\r\\n    bodySlide.append(slideSpace)\\r\\n    wrapper.append(bodySlide)\\r\\n    slide.appendChild(wrapper);\\r\\n    $(`.body-slide-${index + 1}`).css(\\\"background\\\", `#${bannerItem.color}`);\\r\\n});\\r\\n$(\\\".connect-button\\\").css({\\r\\n    \\\"background-color\\\": slideBannerVariables.connectButton.background,\\r\\n    color: slideBannerVariables.connectButton.textColor,\\r\\n    border: (slideBannerVariables.connectButton.background == \\\"#ffffff\\\" && slideBannerVariables.connectButton.textColor == '#231f20') ? \\\"1px solid #231f20\\\" : \\\"none\\\",\\r\\n})\\r\\n\\r\\nfunction startAnimation() {\\r\\n    $(\\\"header\\\").addClass(\\\"d-none\\\");\\r\\n    const n = slideBannerFunctions.autoSwiper();\\r\\n    slideBannerFunctions.countDown(slideBannerVariables.slideOptions.clickable);\\r\\n    n.imagesToLoad[0].onload = function () {\\r\\n        $(\\\"#btn-group\\\").css(\\\"top\\\", `${$(this).height()}px`)\\r\\n    };\\r\\n    $('.body-container').css(\\\"min-height\\\", `calc(100svh - ${$('footer').height()}px)`);\\r\\n}\\r\\n</script>\"}]},\"welcomeId\":\"0\",\"welcomeHtml\":{\"commonHtml\":\"\",\"pageViews\":[{\"contentHtml\":\"<script>\\r\\n    $('#layoutHeader').hide();\\r\\n    awingCaptiveUtils.openLandingpageV2(encodeURIComponent(\\\"https://mywifi.vn/download\\\"), encodeURIComponent(\\\"https://mywifi.vn/download\\\"));\\r\\n</script>\"}]}},\"customerActions\":[0,1,2,3],\"domain\":{\"domainId\":\"5476089696408447131\",\"domainTariffId\":1,\"directoryPath\":\".0.90.5476089696408447131.\",\"name\":\"Wi - Mesh\",\"joinNetwork\":true,\"description\":\"\",\"license\":\"AvX0ZtUdP4wukxT5af24a9BKVEZih4ieKcQUcHFTwuadEz9v97xzIgfKpjckguFxzdIhS2IfysNUsEgfXzrMQNQZBThUtOQEI62eBW6BOrIjP0LkhTpxZa/Q/7YPzRVte5Z1YN0mQwgAodQN6/hFfu3/fDkTBBN25E+gk9GeyqtQChyQHp9/jN+O9ehEV4m8nHBQ1wf1jf0QwB66pCesz/tD3rlTMmDvxkGe9+OjB160G2Wy8eCZFIGGC4Cr+SJ5Tnb0CLatO1DHvvI9NFjgAEd/EiGJqEKwamrQOgIGjRIb3g3IpcW/cq4ZErUQSsE1JNvhUhC7FHdCzBAV9QytCw==\",\"requiredCustomerData\":null,\"url\":\"\",\"customizeCustomerFormPath\":\"\",\"contactPhoneNumber\":\"\"},\"customer\":{\"macAddress\":\"26-17-2E-AE-22-79\",\"name\":null,\"phone\":null,\"gender\":true,\"birthday\":{\"seconds\":\"915123600\",\"nanos\":0},\"email\":null,\"device\":{\"deviceName\":\"Windows\",\"brandName\":\"Microsoft\",\"deviceCode\":\"PC\",\"os\":\"Windows NT\",\"osValue\":100,\"language\":\"en-US\"},\"createdDate\":{\"seconds\":\"1740803501\",\"nanos\":998000000},\"lastReminderDate\":{\"seconds\":\"1743764852\",\"nanos\":0},\"reminderCount\":3},\"placeCustomerInfoCollections\":[{\"id\":10841,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Gender\",\"timeReminder\":0},{\"id\":10842,\"placeId\":\"5408580173018081493\",\"placeName\":\"WI-MESH_BĐ - Đại học Quy Nhơn_Payment - KTX\",\"placeDirectoryPath\":\".0.90.5476089696408447131.5225343784034513445.5408580173018081493.\",\"field\":\"Birthday\",\"timeReminder\":0}],\"pageViewEvents\":[],\"customerRequiredFields\":[],\"contentAuthenForm\":\"<form name=\\\"mikrotik\\\" id=\\\"frmLogin\\\" action=\\\"http://186.186.0.1/login\\\" method=\\\"post\\\" style=\\\"display: none;\\\">\\n    <input type=\\\"hidden\\\" name=\\\"username\\\" value=\\\"awing15-15\\\"/>\\n    <input type=\\\"hidden\\\" name=\\\"password\\\" value=\\\"df4ac9e1a77c84894169c99597eba211\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"dst\\\" value=\\\"http://v1.awingconnect.vn/Success\\\" />\\n    <input type=\\\"hidden\\\" name=\\\"popup\\\" value=\\\"false\\\" />\\n</form>\\n<script>\\n\\n    var authenticationProfileOptionals = [];\\n    function bindOptionalProfileByIndex(idx) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            var mikrotikParamModel = JSON.parse(authenticationProfileOptionals[idx].Params);\\n            $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n            $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n        }\\n    }\\n    function bindOptionalProfileByName(name) {\\n        if (authenticationProfileOptionals.length > 0) {\\n            authenticationProfileOptionals.forEach(function (el) {\\n                if (el.Name.toLowerCase() == name.toLowerCase()) {\\n                    var mikrotikParamModel = JSON.parse(profileOptional.Params);\\n                    $(\\\"input[name=username]\\\").val(mikrotikParamModel.Username);\\n                    $(\\\"input[name=password]\\\").val(mikrotikParamModel.Password);\\n                }\\n            });\\n        }\\n    }\\n    awingStateMachineContext.setAuthenType(awingConstants.AUTHEN_TYPE.FORM);\\n</script>\\n\",\"createdDate\":\"2025-04-13T23:04:05.1414356+07:00\"}},\"analyticType\":\"Authentication\",\"viewIndex\":2}"
          }
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "content-type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "date",
              "value": "Sun, 13 Apr 2025 16:04:59 GMT"
            },
            {
              "name": "server",
              "value": "Kestrel"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 13968,
            "mimeType": "application/json",
            "compression": 8234
          },
          "redirectURL": "",
          "headersSize": 227,
          "bodySize": 5734,
          "_transferSize": 5961,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "1.52.48.205",
        "startedDateTime": "2025-04-13T16:05:01.036Z",
        "time": 174.36399999318272,
        "timings": {
          "blocked": 4.130000030234456,
          "dns": 0.05899999999999994,
          "ssl": -1,
          "connect": 5.788,
          "send": 0.7460000000000004,
          "wait": 104.48299997383728,
          "receive": 59.15799998911098,
          "_blocked_queueing": 2.389000030234456,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      }
    ]
  }
}